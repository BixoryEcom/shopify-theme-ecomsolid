
/*
  You SHOULD NOT modify source code in this page because
  It is automatically generated from EcomSolid
  Try to edit page with the live editor.
  https://ecomsolid.com
*/

    (function(jQuery, $) {
      
      try {
        const funcESWidgetZPndLlHJyimQv64 = function() {
          var gtVariantsStyleV2Instance;
var initVariantStyle = function() {
  var colorVariantTitle = "";
  var customColors = [];
  var colorVariantSize = "";
  var colorVariantSizeSelect = "";
  var colorVariantRadius = "3px";
  

  var imageVariantTitle = ""
  var customImages = [];
  var imageVariantSize = "";
  var imageVariantSizeSelect = "";
  var imageVariantRadius = "3px";
  
  imageVariantTitle = "Color"

  // Format custom image snippet to variable
  

  // Add variable to local script
  
  
  // Design image
  
      imageVariantSize = "60px"
      imageVariantSizeSelect = "24px"
  
  
      imageVariantRadius = "3px"
  
  
  
  gtVariantsStyleV2Instance = window.SOLID.library.gtVariantsStyleV2({
    $element: $('body'),
    options: {
      colors: customColors,
      colorVariantTitle: colorVariantTitle,
      colorVariantCircle: true,
      colorVariantRadius: colorVariantRadius,
      colorVariantSize: colorVariantSize,
      colorVariantSizeSelect: colorVariantSizeSelect,
      images: customImages,
      imageVariantTitle: imageVariantTitle,
      imageVariantCircle: false,
      imageVariantSize: imageVariantSize,
      imageVariantSizeSelect: imageVariantSizeSelect,
      imageVariantRadius: imageVariantRadius,
      variantTooltip: true,
      hideSoldOutVariants: false,
      variantSaleTag: true,
      variantSaleTagTitle: "Packs",
      variantSaleTagFormat: "[!Value!]% off",
      variantSaleTagTextColor: "#43464B",
      variantSaleTagBackgroundColor: "#F85457",
      variantSaleTagBorderRadius: "20px",  
      hideNoneExistVariant: true,
      mode: "production",
    }
  });

}

initVariantStyle();


        }
        funcESWidgetZPndLlHJyimQv64()
      } catch(e) {
        console.error("Error ESWidget Id: ZPndLlHJyimQv64" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESWidgetN49CKtI9YqrZidk = function() {
          (function() {
  var elementClassName = ".gt_widget-N49CKtI9YqrZidk";
  var id = "N49CKtI9YqrZidk";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var product;
    var gtCurrentVariant;
    var swiperThumbs;
    var swiperTop;
    var initialSlide = 0;
    var qty = 1;
    var currentOptions = [];
    var $slideTemplate;
    var $swiperContainerTemplate;
    var $slideThumbTemplate;
    var $swiperThumbsContainerTemplate;
    var checkWindowWidth = $(window).width();
    var enableMobile = "true";
    var positionIcon = "default";
    
    /* store get state block script */
    
    /* methods block script */
    function getTemplate() {
      const $swiperContainer = $element.find(".gt_product-feature--swiper");
      if ($swiperContainer && $swiperContainer.length) {
        $swiperContainerTemplate = $($swiperContainer[0]).clone();
      }
      const $slideItemImage = $swiperContainer.find(".swiper-slide");
      if ($slideItemImage && $slideItemImage.length) {
        $slideTemplate = $($slideItemImage[0]).clone();
      }

      const $swiperThumbsContainer = $element.find(".gt_product--swiper");
      if ($swiperThumbsContainer && $swiperThumbsContainer.length) {
        $swiperThumbsContainerTemplate = $($swiperThumbsContainer[0]).clone();
      }
      const $imageSlideThumb = $swiperThumbsContainer.find(".swiper-slide");
      if ($imageSlideThumb && $imageSlideThumb.length) {
        $slideThumbTemplate = $($imageSlideThumb[0]).clone();
      }
    }

    function setup() {
      renderButtonInList();
      onClickQuickView();
      onClickProductVariant();
      initEventRenderScriptVariant();
      checkOptionSettings();
      setAttributeForBtnQuickView();
    }

    function runAddClassFixed() {
      $(window)
        .off("resize.checkHeightScreensN49CKtI9YqrZidk")
        .on("resize.checkHeightScreensN49CKtI9YqrZidk", function() {
          var heightModel = $(".boxContainer").height();
          var heightModelContent = $(".gt_modal-body").height();
          if (heightModel > heightModelContent) {
            $(".js_add--fixed").addClass("es-fixed");
          } else {
            $(".js_add--fixed").removeClass("es-fixed");
          }
        });
    }

    function checkOptionSettings() {
      if (positionIcon === "default") {
        $(".gt_product-element").addClass("position-default");
        $(".gt_product-element").removeClass("position-beside");
      } else {
        $(".gt_product-element").removeClass("position-default");
        $(".gt_product-element").addClass("position-beside");
      }
      if (enableMobile === "true") {
        $("body").addClass("show-quickview-mobile");
        $("body").removeClass("hide-quickview-mobile");
      } else {
        $("body").removeClass("show-quickview-mobile");
        $("body").addClass("hide-quickview-mobile");
      }
    }

    function renderButtonInList() {
      $(".gt_product-element .gt_product-image, .gt_product-element .gt_product-button").each(function() {
        var listBtnQuickView = $(this).find(".gt_btn-quick-view");
        listBtnQuickView.remove();
        var htmlBtnQuickView = $element.find(".gt_btn-preview-quick-view");
        var htmlBtnQuickViewClass = htmlBtnQuickView && htmlBtnQuickView.attr("class") && htmlBtnQuickView.attr("class").split(/\s+/);
        htmlBtnQuickViewClass = htmlBtnQuickViewClass && htmlBtnQuickViewClass.length && htmlBtnQuickViewClass.join(" ");

        var htmlBtnQuickViewHTML = "";
        if (htmlBtnQuickView && htmlBtnQuickView.html()) {
          htmlBtnQuickViewHTML = htmlBtnQuickView.html();
        }
        var btnQuickView = `<div class="gt_btn-quick-view ${htmlBtnQuickViewClass}">${htmlBtnQuickViewHTML}</div>`;
        $(this).append(btnQuickView);
        $(this).addClass("has-quick-view");
      });

      //addattributeopensetting in editor
      $(".gt_product-element .gt_btn-quick-view").each(function() {
        var button = $(this).find(".gt_button");
        addAttributeOpenSetingInEditor($(this));
        addAttributeOpenSetingInEditor(button);
      });
    }

    function addAttributeOpenSetingInEditor(el) {
      el.attr("has-open-setting", true);
      el.attr("remove-toolbar-active", true);
      el.attr("only-widget", true);
    }

    function onClickQuickView() {
      $(".gt_btn-quick-view").on("click", function(event) {
        setTimeout(() => {
          $("body").addClass("show-quickview");
        }, 1000);
        event.preventDefault();
        
        resetDataModal();
        var productJson = $(this).closest(".gt_product-element").find(".ProductJson");
        productJson = JSON.parse(productJson.html());
        product = productJson;
        //resetDataJson
        var productID = productJson.id;
        var prJsontext = $(this).closest(".gt_product-element").find(".ProductJson").html();
        $element.find(".ProductJson").attr("data-id", productID);
        $element.find(".ProductJson").html(prJsontext);

        if (!product) {
          return;
        }
        jQuery.getJSON("https://" + __GemSettings.domain + "/products/" + product.handle + ".js", function(result) {
            product = result;
            inProgressRender();
          })
          .fail(function() {
            inProgressRender();
          });
      });
    }

    function setAttributeForBtnQuickView() {
      $(".gt_product-element").each(function() {
        var productJson = $(this).find(".ProductJson");
        productJson = JSON.parse(productJson.html());
        $(this).find(".gt_btn-quick-view").attr("product-id", productJson.id);
      });
    }

    function getQueryByUrl() {
      const urlParams = new URLSearchParams(window.location.search);
      const afterSubmitFormSoldOut = urlParams.get("success");
      const currentProductId = urlParams.get("q_product_id");
      const currentVariantId = urlParams.get("q_variant_id");
      return {
        status: afterSubmitFormSoldOut,
        product_id: currentProductId,
        variant_id: currentVariantId,
      };
    }

    function openQuickViewWhenSubmitSoldOutSuccess() {
      var queryUrl = getQueryByUrl();
      if (queryUrl.status) {
        $(".gt_product-element .gt_btn-quick-view").each(function() {
          var productId = $(this).attr("product-id");
          if (productId == queryUrl.product_id) {
            $(this).trigger("click");
            $("html, body").animate({
              scrollTop: $(this).offset().top - 300
            }, 300);
          }
        });
      }
    }

    function inProgressRender() {
      renderProduct();
      showModalQuickView();
      onClickProductVariant();
      window.SOLID.store.dispatch("addon-quick-view-render", true);
    }

    function onClickProductVariant() {
      $element.find(".gt_product-variant--checked").click(function() {
        var $currentTargetOptions = $(this);
        const $options = $currentTargetOptions.parents(".gt_product-variant--item").find(".gt_product-variant-options");
        $currentTargetOptions.toggleClass("gt_active-option gt_active");
        $options.toggleClass("gt_active-option gt_active");
        jQuery(document).mouseup(function(e) {
          var container = jQuery(".gt_product-variant--checked");
          if (!container.is(e.target) && container.has(e.target).length === 0) {
            $currentTargetOptions.removeClass("gt_active-option gt_active");
            $options.removeClass("gt_active-option gt_active");
          }
        });
      });
      $element.find(".gt_product-variant").on("click", ".gt_product-variant--option-item", function() {
        $(this).closest(".gt_product-variant--item").find(".gt_product-variant--checked").removeClass("gt_active");
        $(this).closest(".gt_product-variant-options").removeClass("gt_active");
        optionChange($(this));
      });
    }

    function initEventRenderScriptVariant() {
      window.SOLID.store.dispatch(`run-script-${id}_productVariants`, true);
    }

    function resetDataModal() {
      qty = 1;
      setValQty();
    }

    function showModalQuickView() {
      var modalQuickView = $element.find(".gt_modal-quick-view");
      modalQuickView.addClass("gt_modal-show");
    }

    function hideModalQuickView() {
      var modalQuickView = $element.find(".gt_modal-quick-view");
      $("body").removeClass("show-quickview");
      modalQuickView.removeClass("gt_modal-show");
      removeQueryCurrentUrl("success");
      removeQueryCurrentUrl("q_product_id");
      removeQueryCurrentUrl("q_variant_id");
    }

    function formatMoney(price) {
      var dataCurrency = window.store.get("dataCurrency");
      var format = __GemSettings.money;
      if (dataCurrency) {
        price = Shopify.gemFormatMoney(price, dataCurrency.currency, dataCurrency.data);
      } else {
        price = Shopify.formatMoney(price, format);
      }
      return price;
    }

    function imgURL(src) {
      //removeanycurrentimagesizethenaddthe new imagesize
      return src
        .replace(/_(pico|icon|thumb|small|compact|medium|large|grande|original|1024x1024|2048x2048|master)+\./g, ".")
        .replace(/\.jpg|\.png|\.gif|\.jpeg/g, function(match) {
          return match;
        });
    }

    function getValQty() {
      return $element.find(".gt_product-quantity--number").val();
    }

    function setValQty() {
      $element.find(".gt_product-quantity--number").val(qty);
    }

    function qtyPlus() {
      var currentQty = getValQty();
      currentQty = parseInt(currentQty);
      if (currentQty === 100) {
        return;
      }
      qty = currentQty + 1;
      setValQty();
      renderPrice();
    }

    function qtyMinus() {
      var currentQty = getValQty();
      currentQty = parseInt(currentQty);
      currentQty = currentQty - 1;
      if (currentQty <= 0) {
        currentQty = 1;
      }
      qty = currentQty;
      setValQty();
      renderPrice();
    }

    function qtyChange() {
      var currentQty = getValQty();
      currentQty = parseInt(currentQty);
      if (!currentQty || isNaN(currentQty) || currentQty <= 0) {
        currentQty = 1;
      }
      if (currentQty >= 100) {
        currentQty = 100;
      }
      qty = currentQty;
      setValQty();
      renderPrice();
    }

    function convertImageURL(url) {
      //removedomain
      url = url.replace(/^.*\/\/[^\/]+/, "");
      //removeparams
      url = url.replace(/\?v=.*?$/g, "");
      return url;
    }

    function getCurrentVariant() {
      currentOptions = [];
      $element.find(".gt_product-variant--option-item").each(function() {
        var hasActive = $(this).hasClass("gt_active");
        var itemValue = $(this).find(".gt_product-variant--select__name").text();
        if (hasActive) {
          currentOptions.push(itemValue);
        }
      });

      var currentVariant = "";

      product.variants.forEach((variant) => {
        if (variant.options && variant.options.length && variant.options.join() === currentOptions.join()) {
          currentVariant = variant;
        }
      });

      if (currentVariant) {
        gtCurrentVariant = currentVariant;
      }
    }

    function renderProduct() {
      var queryUrl = getQueryByUrl();
      const currentVariantId = queryUrl.variant_id;
      var currentVariant = "";
      if (currentVariantId) {
        currentVariant = product.variants.length && product.variants.find((variant) => variant.id == currentVariantId);
      }
      gtCurrentVariant = currentVariant || product.selected_or_first_available_variant || (product.variants.length && product.variants[0]);
      setValueCurrentVariant();
      //RENDERSLIDE
      renderImage();
      //RENDERTITLE
      renderTitle();
      //RENDERPRICE
      renderPrice();
      //RENDEROPTIONS
      renderOptions();
      //RENDERCARTBUTTON
      renderCartButton();
      //RENDERFORMSOLDOUT
      renderFormSoldOut();
      //RENDERPRODUCTDESCRIPTION
      renderProductDescription();
    }

    function getInitialSlideByCurrentVariant() {
      if (!gtCurrentVariant || !gtCurrentVariant.featured_image || !gtCurrentVariant.featured_image.src) {
        return;
      }
      var currentInitialSlide = 0;
      product.images.forEach((image, index) => {
        var imageSrc = image;
        if (isObject(image)) {
          imageSrc = image.src;
        }
        if (convertImageURL(imageSrc) === convertImageURL(gtCurrentVariant.featured_image.src)) {
          currentInitialSlide = index;
        }
      });
      initialSlide = currentInitialSlide;
      if (!swiperTop) {
        return;
      }
      swiperThumbs.slideTo(initialSlide);
      swiperTop.slideTo(initialSlide);
    }

    function slideChange() {
      if (!swiperTop) {
        return;
      }
      var currentImage = product.images[swiperThumbs.realIndex] || "";
      var currentImageSrc = currentImage;
      if (isObject(currentImage)) {
        currentImageSrc = currentImage.src;
      }
      var currentVariant = "";

      product.variants.forEach((variant) => {
        if (
          variant &&
          variant.featured_image &&
          variant.featured_image.src &&
          convertImageURL(variant.featured_image.src) === convertImageURL(currentImageSrc)
        ) {
          currentVariant = variant;
        }
      });

      if (currentVariant) {
        gtCurrentVariant = currentVariant;

        //Activeoption
        var items = $element.find(".gt_product-variant--option-item");
        items.each(function() {
          $(this).removeClass("gt_active");
        });

        items.each(function() {
          var itemValue = $(this).find(".gt_product-variant--select__name").text();
          if (gtCurrentVariant.options && gtCurrentVariant.options.includes(itemValue)) {
            $(this).addClass("gt_active");
            changeOptionSelectText($(this));
          }
        });

        activeImageSlideThumb();
        renderPrice();
        renderCartButton();
        renderFormSoldOut();
        setValueCurrentVariant();
      }
    }

    function activeImageSlideThumb() {
      const $swiperThumbsContainer = $element.find(".gt_product--swiper");
      const $imageSlideThumb = $swiperThumbsContainer.find(".swiper-slide");
      $imageSlideThumb.each(function(index) {
        const elImg = $(this).find("img");
        if (index !== swiperThumbs.realIndex) {
          elImg.removeClass("gt_active gf_active");
        } else {
          elImg.addClass("gt_active gf_active");
        }
      });
    }

    function renderImage() {
      if (!product.images || !product.images.length) {
        var srcNotFound = "https://cdn.shopify.com/s/assets/no-image-2048-5e88c1b20e087fb7bbe9a3771824e743c244f437e4f8ba93bbf7b11b53f7824c.gif";
        product.images.push(srcNotFound);
      }

      var atomId = `N49CKtI9YqrZidk_` + "productImageList";
      if (!$swiperContainerTemplate || !$swiperThumbsContainerTemplate) {
        return;
      }
      const $swiperContainer = $swiperContainerTemplate.clone();
      const $swiperThumbsContainer = $swiperThumbsContainerTemplate.clone();
      $swiperContainer.find(".swiper-wrapper").html("");
      $swiperThumbsContainer.find(".swiper-wrapper").html("");

      product.images.forEach((image, index) => {
        var imageSrc = image;
        var dataImageId = index;
        if (isObject(image)) {
          imageSrc = image.src;
          dataImageId = image.id;
        }

        const $swiperItem = $slideTemplate.clone();
        $swiperItem.find("img").attr({
          "data-id": dataImageId,
          src: imageSrc,
        });
        $swiperItem.find("img").removeClass("gt_lazyload");
        $swiperContainer.find(".swiper-wrapper").append($swiperItem);

        const $swiperThumbItem = $slideThumbTemplate.clone();
        $swiperThumbItem.find("img").attr({
          "data-id": dataImageId,
          src: imgURL(imageSrc),
        });
        $swiperThumbItem.find("img").removeClass("gt_lazyload");
        $swiperThumbsContainer.find(".swiper-wrapper").append($swiperThumbItem);
      });

      $element.find(".gt_product-img").html($swiperContainer);
      $element.find(".gt_product-carousel-box").html($swiperThumbsContainer);

      setTimeout(() => {
        var atomProductImageListPublicFunc = window.SOLID.public && window.SOLID.public["atom" + "_" + atomId + "_" + 0];
        if (atomProductImageListPublicFunc) {
          atomProductImageListPublicFunc.checkImageListPosition();
          atomProductImageListPublicFunc.checkImageListActive();
          atomProductImageListPublicFunc.initSlider();
          atomProductImageListPublicFunc.calculatorImageSlideHeight();
          swiperTop = atomProductImageListPublicFunc.getMySwiper();
          swiperThumbs = atomProductImageListPublicFunc.getMySwiperFeature();
          swiperTop.update();
          swiperThumbs.update();
          activeImageSlideThumb();
        }

        if (!swiperTop) {
          return;
        }
        swiperThumbs.on("slideChange", function() {
          slideChange();
        });

        getInitialSlideByCurrentVariant();
      }, 100);
    }

    function renderTitle() {
      var productTitle = product.title;
      var productUrl = product.url;
      $element.find(".gt_product-title").html(`<a target="_blank" href="${productUrl}">${productTitle}</a>`);
    }

    function renderPrice() {
      var syncQuantityandPrice = $element.find(".gt_product-price").attr("sync-quantity-and-price");
      var syncQuantityandPriceCompare = $element.find(".gt_product-compare-price").attr("sync-quantity-and-price");

      var productPrice = (gtCurrentVariant && gtCurrentVariant.price) || product.price || 0;
      if (syncQuantityandPrice && syncQuantityandPrice === "true") {
        productPrice = productPrice * qty;
      }

      var productPriceCompare = (gtCurrentVariant && gtCurrentVariant.compare_at_price) || product.compare_at_price || 0;
      if (syncQuantityandPriceCompare && syncQuantityandPriceCompare === "true") {
        productPriceCompare = productPriceCompare * qty;
      }

      $element.find(".gt_product-price--number").html(`${formatMoney(productPrice)}`);
      $element.find(".gt_product-price--compare").css({
        display: "none",
      });
      $element.find(".gt_product-tag-sale").css({
        display: "none",
      });
      if (productPriceCompare > productPrice) {
        var dataLabel = $element.find(".gt_product-tag-sale").attr("data-label");
        var dataType = $element.find(".gt_product-tag-sale").attr("data-type");
        var dataPercent = "";
        var dataNumber = "";
        $element.find(".gt_product-price--compare").html(`${formatMoney(productPriceCompare)}`);
        $element.find(".gt_product-price--compare").css({
          display: "block",
        });
        var priceSale = parseFloat(productPriceCompare, 2) - parseFloat(productPrice, 2);
        var priceSalePercent = Math.round((priceSale / productPriceCompare) * 100);
        if (dataType === "percent") {
          dataPercent = dataLabel && dataLabel.replace("[!Profit!]", ` ${priceSalePercent}%`);
        } else {
          dataNumber = dataLabel && dataLabel.replace("[!Profit!]", ` ${formatMoney(priceSale)}`);
        }
        var tagSale = `
          <div class="gt_flex gt_items--center gt_justify-c-center gt_product-tag-sale--inner">
            <div class="gt_product-tag-sale--value gt_product-tag-sale--value--percent">${dataPercent}</div>
            <div class="gt_product-tag-sale--value gt_product-tag-sale--value--number">${dataNumber}</div>
            <div class="gt_product-tag-sale--after"></div>
          </div>
        `;
        $element.find(".gt_product-tag-sale").html(tagSale);
        $element.find(".gt_product-tag-sale").css({
          display: "block",
        });
      }
    }

    function optionChange(el) {
      var items = el.parent().find(".gt_product-variant--option-item");
      items.each(function() {
        $(this).removeClass("gt_active");
      });
      el.addClass("gt_active");
      changeOptionSelectText(el);
      getCurrentVariant();
      setValueCurrentVariant();
      renderPrice();
      getInitialSlideByCurrentVariant();
      renderCartButton();
      renderFormSoldOut();
    }

    function setValueCurrentVariant() {
      if (gtCurrentVariant && gtCurrentVariant.id) {
        $element.find(".gt_variant--input").val(gtCurrentVariant.id);
      }
    }

    function changeOptionSelectText(el) {
      var variantCustom = el.find(".gt-variant-style_custom");
      var elValue = el.attr("data-value");
      el.closest(".gt_product-variant--item").find(".gt_product-variant-option--selected-text").attr("data-value", elValue);
      var optionSelectedText = `<span>${elValue}</span>`;
      if (variantCustom && variantCustom.length) {
        optionSelectedText = `<span style="display: none;">${elValue}</span><div class="gt-variant-style_custom" style="display: flex; align-items: center;">${variantCustom.html()}</div>`;
      }
      el.closest(".gt_product-variant--item").find(".gt_product-variant--checked").find(".gt_product-variant-option--selected-text").html(optionSelectedText);
    }

    function renderOptions() {
      var options = product.options;
      if (!options || !options.length) {
        return;
      }
      options = options.sort((a, b) => a.position > b.position);
      //showvariantifdisplaynone
      var $atomVariant = $element.find(".gt_product-custom-variant");
      $atomVariant.css("display", "");
      var $elVariant = $element.find(".gt_product-variant");
      var $elVariants = $element.find(".gt_product-variant--name");
      var $options = $element.find(".gt_product-swatches--item");

      $elVariant.find(".gt_product-variant--select").addClass("gt_product-variant--option-item");

      $elVariant.find(".gt_swatches--select").addClass("gt_product-variant--option-item gt_product-variant--btn-select");
      $elVariant.find(".gt_swatches--select span").addClass("gt_product-variant--select__name");

      //showvariantifdisplaynonebyaddonvariantStyle
      if (window.SOLID.library && window.SOLID.library.gtVariantsStyleV2) {
        $elVariant.addClass("gt_show_product-variant");
        window.SOLID.library.gtVariantsStyleV2({
          $element: $atomVariant,
          options:{noCache: true}
        }).Destroy();
      }
      var dataType = $elVariant.attr("data-type");
      var boxVariant = "";
      if (dataType === "segment") {
        const $optionItems = $element.find(".gt_product-swatches--item");
        const $templateVariant = $optionItems.first().clone();
        $optionItems.remove();
        const $optionWrapper = $element.find(".gt_product-swatches");
        options.forEach((option) => {
          const $newOption = createNewOptionVariantHTMLSegment(option, $templateVariant);
          $optionWrapper.append($newOption);
        });
      } else {
        const $optionItems = $element.find(".gt_product-swatches--item");
        const $templateVariant = $optionItems.first().clone();
        $optionItems.remove();
        const $optionWrapper = $element.find(".gt_product-swatches");
        options.forEach((option) => {
          const $newOption = createNewOptionVariantHTMLSelect(option, $templateVariant);
          $optionWrapper.append($newOption);
        });
      }
      if (window.SOLID.public && window.SOLID.public["addon_variant_style"]) {
        window.SOLID.public["addon_variant_style"].forEach((cacheFunction) => {
          cacheFunction();
        });
      }
    }

    function createNewOptionVariantHTMLSelect(option, $templateVariant) {
      const $newOption = $templateVariant.clone();
      const $optionValueItemsActive = $newOption.find(".gt_product-variant-option--selected-text");
      $newOption.removeClass("variant_none");
      $newOption.attr("data-name", option.name);
      if (option.name != "Title" || (option.values.length && option.values[0] != "Default Title")) {
        $newOption.find(".gt_product-variant--name").html(option.name);
      } else {
        $newOption.find(".gt_product-variant--name").html();
        $newOption.addClass("variant_none");
      }
      const $optionValueItems = $newOption.find(".gt_product-variant--option-item");
      const $templateOptionValueItem = $optionValueItems.first().clone();
      $templateOptionValueItem.removeClass("gt_active");
      $optionValueItems.remove();
      const $optionValueWrapper = $newOption.find(".gt_product-variant-options");
      option.values.forEach((optionValue) => {
        const $newOptionValueItem = createNewOptionValueVariantHTMLSelect({
            optionName: option.name,
            optionValue: optionValue,
            optionPosition: option.position
          },
          $templateOptionValueItem
        );
        $optionValueItemsActive.html(createVariantActiveSelect({
          optionValue: optionValue,
          optionPosition: option.position
        }));
        $optionValueWrapper.append($newOptionValueItem);
      });
      const isShowOneVariant = $newOption.attr("data-check-show-one-variant");
      if (isShowOneVariant === "false" && option?.values?.length === 1) {
        $newOption.addClass("variant_none");
      }
      return $newOption;
    }

    function createVariantActiveSelect(dataOptionValue) {
      const {
        optionValue,
        optionPosition
      } = dataOptionValue;
      gtCurrentVariant = product.selected_or_first_available_variant || (product.variants.length && product.variants[0]);
      const currentVariant = window.SOLID.store.getState("variant" + product.id, gtCurrentVariant);
      const currentOptionValueActive = currentVariant["option" + optionPosition];
      if (currentOptionValueActive === optionValue) {
        return currentOptionValueActive;
      }
    }

    function createNewOptionValueVariantHTMLSelect(dataOptionValue, $template) {
      const {
        optionName,
        optionValue,
        optionPosition
      } = dataOptionValue;
      const $newOptionValueItem = $template.clone();
      $newOptionValueItem.attr({
        "data-name": optionName,
        "data-value": optionValue
      });
      $newOptionValueItem.find(".gt_product-variant--select__name").html(optionValue);

      const currentVariant = window.SOLID.store.getState("variant" + product.id);
      if (currentVariant && currentVariant["option" + optionPosition]) {
        const currentOptionValueActive = currentVariant["option" + optionPosition];
        if (currentOptionValueActive === optionValue) {
          $newOptionValueItem.addClass("gt_active");
        }
      }
      return $newOptionValueItem;
    }

    function createNewOptionVariantHTMLSegment(option, $templateVariant) {
      const $newOption = $templateVariant.clone();
      $newOption.removeClass("variant_none");
      $newOption.attr("data-name", option.name);

      if (option.name != "Title" || (option.values.length && option.values[0] != "Default Title")) {
        $newOption.find(".gt_product-variant--name").html(option.name);
      } else {
        $newOption.find(".gt_product-variant--name").html();
        $newOption.addClass("variant_none");
      }
      const $optionValueItems = $newOption.find(".gt_product-variant--option-item");
      const $templateOptionValueItem = $optionValueItems.first().clone();
      $templateOptionValueItem.removeClass("gt_active");
      $optionValueItems.remove();
      const $optionValueWrapper = $newOption.find(".gt_product-variant--options");

      option.values.forEach((optionValue) => {
        const $newOptionValueItem = createNewOptionValueVariantHTMLSegment({
            optionName: option.name,
            optionValue: optionValue,
            optionPosition: option.position
          },
          $templateOptionValueItem
        );
        $optionValueWrapper.append($newOptionValueItem);
      });
      const isShowOneVariant = $newOption.attr("data-check-show-one-variant");
      if (isShowOneVariant === "false" && option?.values?.length === 1) {
        $newOption.addClass("variant_none");
      }
      return $newOption;
    }

    function createNewOptionValueVariantHTMLSegment(dataOptionValue, $template) {
      const {
        optionName,
        optionValue,
        optionPosition
      } = dataOptionValue;
      const $newOptionValueItem = $template.clone();
      $newOptionValueItem.attr({
        "data-name": optionName,
        "data-value": optionValue
      });
      $newOptionValueItem.find(".gt_product-variant--select__name").html(optionValue);

      //gtCurrentVariant = product.selected_or_first_available_variant||(product.variants.length&&product.variants[0]);
      // const currentVariant = window.SOLID.store.dispatch("variant"+product.id,gtCurrentVariant);
      const currentVariant = window.SOLID.store.getState("variant" + product.id);
      if (currentVariant && currentVariant["option" + optionPosition]) {
        const currentOptionValueActive = currentVariant["option" + optionPosition];
        if (currentOptionValueActive === optionValue) {
          $newOptionValueItem.addClass("gt_active");
        }
      }
      return $newOptionValueItem;
    }

    function renderCartButton(isPreviewSoldOut = false) {
      var productId = product.id;
      var variantId = gtCurrentVariant.id || "";

      var addCartBtn = $element.find(".gt_product-btn__add-cart");
      var buyNowBtn = $element.find(".gt_product-btn__buy-now");

      addCartBtn.attr("data-product-id", productId);
      addCartBtn.attr("data-variant-id", variantId);

      buyNowBtn.attr("data-product-id", productId);
      buyNowBtn.attr("data-variant-id", variantId);

      var addCartBtnText = addCartBtn.attr("data-text");
      addCartBtnText = addCartBtnText || "Add To Cart";
      var addCartBtnTextSoldOut = addCartBtn.attr("data-text-sold-out");
      addCartBtnTextSoldOut = addCartBtnTextSoldOut || "Sold out";

      var buyNowBtnText = buyNowBtn.attr("data-text");
      buyNowBtnText = buyNowBtnText || "Buy Now";
      var buyNowBtnTextSoldOut = buyNowBtn.attr("data-text-sold-out");
      buyNowBtnTextSoldOut = buyNowBtnTextSoldOut || "Sold out";

      addCartBtn.find(".gt_button-content-text-main").html(addCartBtnText);
      elRemoveDisabled(addCartBtn);

      buyNowBtn.find(".gt_button-content-text-main").html(buyNowBtnText);
      elRemoveDisabled(buyNowBtn);

      var elBtnGroup = $element.find(".gt_product-group-btn");
      var elStock = $element.find(".gt_text-in-stock");
      elBtnGroup.removeClass("is-hidden");
      elStock.removeClass("is-hidden");

      var elViewMore = $element.find(".gt_box-view-more");
      elViewMore.removeClass("gt_mt2--small");

      if (!gtCurrentVariant || !gtCurrentVariant.available || isPreviewSoldOut) {
        addCartBtn.find(".gt_button-content-text-main").html(addCartBtnTextSoldOut);
        elAddDisabled(addCartBtn);

        buyNowBtn.find(".gt_button-content-text-main").html(buyNowBtnTextSoldOut);
        elAddDisabled(buyNowBtn);

        var publicFuncSoldOutForm = publicFunctionSoldOutForm();
        if (publicFuncSoldOutForm) {
          publicFuncSoldOutForm.showForm();
        }
        elBtnGroup.addClass("is-hidden");
        elStock.addClass("is-hidden");
        elViewMore.addClass("gt_mt2--small");
      }
    }

    function renderFormSoldOut(isPreviewSoldOut = false) {
      var publicFuncSoldOutForm = publicFunctionSoldOutForm();
      var form = $element.find("form");
      form.attr("action", "/cart/add");
      form.attr("enctype", "multipart/form-data");
      var formType = form.find("input[name='form_type']");
      formType.val("product");
      var boxDetail = $element.find(".gt_product-detail");
      boxDetail.removeClass("has-box-notify");
      if (publicFuncSoldOutForm) {
        publicFuncSoldOutForm.setReturnTo(window.location.pathname);
        publicFuncSoldOutForm.hideForm();
        publicFuncSoldOutForm.hideMessageSuccess();
        publicFuncSoldOutForm.setProductName(product.title);
        publicFuncSoldOutForm.setVariantName(gtCurrentVariant.title);
        publicFuncSoldOutForm.setProductUrl(window.location.origin + "/products/" + product.handle + "?variant=" + gtCurrentVariant.id);
      }
      if (!gtCurrentVariant || !gtCurrentVariant.available || isPreviewSoldOut) {
        if (publicFuncSoldOutForm) {
          publicFuncSoldOutForm.setReturnTo(window.location.pathname + `?success=true&q_product_id=${product.id}&q_variant_id=${gtCurrentVariant.id}`);
          publicFuncSoldOutForm.showForm();
        }
        boxDetail.addClass("has-box-notify");
        form.attr("action", "/contact");
        form.removeAttr("enctype");
        formType.val("contact");
      }
      var queryUrl = getQueryByUrl();
      if (queryUrl.status && queryUrl.variant_id == gtCurrentVariant.id && publicFuncSoldOutForm) {
        publicFuncSoldOutForm.hideForm();
        publicFuncSoldOutForm.showMessageSuccess();
      }
    }

    function renderProductDescription() {
      var $atomDesc = $element.find(".gt_product_description_qw");
      if (!$atomDesc.length) {
        return;
      }
      var $desc = $atomDesc.find(".gt_box-desc");
      $desc.html(product.description);
      var atomId = `N49CKtI9YqrZidk_` + "productDescription";
      var atomProductDescPublicFunc = window.SOLID.public && window.SOLID.public["atom" + "_" + atomId + "_" + 0];
      if (atomProductDescPublicFunc && atomProductDescPublicFunc.initView) {
        var $modal = $element.find(".gt_modal-quick-view");
        $modal.css("display", "flex");
        atomProductDescPublicFunc.initView();
        $modal.css("display", "");
      }
      var $link = $atomDesc.find(".gt_go-to-product");
      if ($link.length) {
        $link.attr("href", product.url);
      }
      //setmaxheightifshowmoretoolong
      setTimeout(function() {
        var modalBodyHeight = "200vh - 24px - 64px"; //minuspadding
        var $productInfo = $(".gt_product-detail");
        var productInfoHeight = $productInfo.outerHeight();
        var productInforMarginY = 0;
        if ($productInfo.length) {
          var productInfoStyle = window.getComputedStyle($productInfo[0]);
          productInforMarginY = parseInt(productInfoStyle.marginTop) + parseInt(productInfoStyle.marginBottom);
        }
        var $groupAction = $(".gt_product-sticky");
        var groupActionMarginY = 0;
        if ($groupAction.length) {
          var groupInfo = window.getComputedStyle($groupAction[0]);
          groupActionMarginY =
            parseInt(groupInfo.marginTop) + parseInt(groupInfo.marginBottom) + parseInt(groupInfo.paddingTop) + parseInt(groupInfo.paddingBottom);
        }
        var heightPrev = 0;
        var $domPrev = $atomDesc.prev();
        while ($domPrev.length) {
          var domPrevStyle = window.getComputedStyle($domPrev[0]);
          heightPrev += $domPrev.outerHeight() + parseInt(domPrevStyle.marginTop) + parseInt(domPrevStyle.marginBottom);
          $domPrev = $domPrev.prev();
        }
        var marginAtomDescY = 0;
        if ($atomDesc.length) {
          var atomDescStyle = window.getComputedStyle($atomDesc[0]);
          marginAtomDescY = parseInt(atomDescStyle.marginTop) + parseInt(atomDescStyle.marginBottom);
        }
        var maxHeightDesc = `calc(${modalBodyHeight} - ${productInfoHeight}px - ${productInforMarginY}px - ${heightPrev}px - ${groupActionMarginY}px - ${marginAtomDescY}px)`;
        $atomDesc.css("max-height", maxHeightDesc);
      }, 200);
    }

    function publicFunctionSoldOutForm() {
      var atomId = `N49CKtI9YqrZidk_` + "productSoldOutForm";
      var atomSoldOutPublicFunc = window.SOLID.public && window.SOLID.public["atom" + "_" + atomId + "_" + 0];
      return atomSoldOutPublicFunc;
    }

    function renderSoldOutFormAfterAtomLoad() {
      renderFormSoldOut();
    }

    function elAddDisabled(el) {
      el.attr("disabled", true);
      el.addClass("gt_sold_out");
    }

    function elRemoveDisabled(el) {
      el.removeAttr("disabled");
      el.removeClass("gt_sold_out");
    }

    function isObject(data) {
      return typeof data === "object" && data !== null;
    }

    function removeQueryCurrentUrl(param) {
      //ConstructURLSearchParamsobjectinstancefromcurrentURLquerystring.
      var queryParams = new URLSearchParams(window.location.search);

      //Set new ormodifyexistingparametervalue.
      if (queryParams.has(param)) {
        queryParams.delete(param);
      }

      //Replacecurrentquerystringwiththe new one.
      history.replaceState(null, null, "?" + queryParams.toString());
    }
    
    /* init block script */
    runAddClassFixed();
    getTemplate();
    setup();
    openQuickViewWhenSubmitSoldOutSuccess();
    
    /* store subscribe block script */
    
    /* events block script */
    var $elements_1 = $element.find(".gt_modal-backdrop");
    $elements_1.off("click").on("click", hideModalQuickView);
    var $elements_2 = $element.find(".gt_modal-quick-view--close");
    $elements_2.off("click").on("click", hideModalQuickView);
    var $elements_3 = $element.find(".gt_product-quantity--plus");
    $elements_3.off("click").on("click", qtyPlus);
    var $elements_4 = $element.find(".gt_product-quantity--minus");
    $elements_4.off("click").on("click", qtyMinus);
    var $elements_5 = $element.find(".gt_product-quantity--number");
    $elements_5.off("input").on("input", qtyChange);
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESWidgetN49CKtI9YqrZidk()
      } catch(e) {
        console.error("Error ESWidget Id: N49CKtI9YqrZidk" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_boxButtonQuickview = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_boxButtonQuickview";
  var id = "N49CKtI9YqrZidk_boxButtonQuickview";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "N49CKtI9YqrZidk_boxButtonQuickview",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_boxButtonQuickview()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_boxButtonQuickview" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_tooltipBox = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_tooltipBox";
  var id = "N49CKtI9YqrZidk_tooltipBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "N49CKtI9YqrZidk_tooltipBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_tooltipBox()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_tooltipBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_innerText = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_innerText";
  var id = "N49CKtI9YqrZidk_innerText";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "N49CKtI9YqrZidk_innerText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "N49CKtI9YqrZidk_innerText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_innerText()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_innerText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_iconQuickview = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_iconQuickview";
  var id = "N49CKtI9YqrZidk_iconQuickview";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"pulse"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "N49CKtI9YqrZidk_iconQuickview",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_iconQuickview()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_iconQuickview" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_box = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_box";
  var id = "N49CKtI9YqrZidk_box";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "N49CKtI9YqrZidk_box",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }

    function checkRemoteDefaultInput() {
      if (isExistAtomVariant()) {
        var $inputVariantDefault = $element.find(".gt_variant-input--default");
        if ($inputVariantDefault && $inputVariantDefault.length) {
          $($inputVariantDefault[0]).remove()
        }
      }

      if (isExistAtomQuantity()) {
        var $inputQuantityDefault = $element.find(".gt_quantity-input--default");
        if ($inputQuantityDefault && $inputQuantityDefault.length) {
          $($inputQuantityDefault[0]).remove()
        }
      }
    }

    function isExistAtomVariant() {
      var $atomProduct = $element.find(".gt_variant--input")
      if ($atomProduct && $atomProduct.length) {
        return true
      }
      return false
    }

    function isExistAtomQuantity() {
      var $atomQuantity = $element.find(".gt_quantity--input")
      if ($atomQuantity && $atomQuantity.length) {
        return true
      }
      return false
    }
    /* init block script */
    addInteraction();
    checkRemoteDefaultInput();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target, indexEl);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_box()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_box" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_boxImage = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_boxImage";
  var id = "N49CKtI9YqrZidk_boxImage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "N49CKtI9YqrZidk_boxImage",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_boxImage()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_boxImage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_productImageList = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_productImageList";
  var id = "N49CKtI9YqrZidk_productImageList";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var mode = "production";
    var checkWindowWidth = $(window).width();
    var widthSliderCurrent;
    var sizeIconDotsCurrent;
    var imageListPositionCurrent;
    var $imgSlide = $element.find(".gt_product-carousel-box");
    var $imgBox = $element.find(".gt_product-img-box");
    var $imgBoxInner = $element.find(".gt_product-img--inner");
    var $imgSlideItem = $element.find(".gt_product-carousel--item");
    var $productImgInner = $element.find(".gt_product-image--thumb");
    var $controlNext = $element.find(".gt_product--swiper .gt_control-next");
    var $controlPrev = $element.find(".gt_product--swiper .gt_control-prev");
    var dynamicDotsOnOff = "false" === "true";
    var slidesPerView_lg = "5";
    var slidesPerView_md = "4.3";
    var slidesPerView_sm = "5";
    var slidesPerView_xs = "5";
    var spaceBetween_lg = parseInt("8") || 1;
    var spaceBetween_md = parseInt("32") || 1;
    var spaceBetween_sm = parseInt("32") || 1;
    var spaceBetween_xs = parseInt("18") || 1;
    var widthActive = "false" === "true";
    var widthSlider = "100%";
    var widthSlider_lg = "100%";
    var widthSlider_md = "100%";
    var widthSlider_sm = "100%";
    var widthSlider_xs = "100%";
    var sizeIconDots_sm = "20px";
    var sizeIconDots_xs = "15px";
    var imageRadio = "square";
    var hideDisplayProductImageAdvanced = "false" === "true";
    let initShowFeatureImage = false;
    let initShow3DModel = false;
    let initShowExVideo = false;
    let initShowOtherVideo = false;
    if (hideDisplayProductImageAdvanced) {
      initShowFeatureImage = "featureImage" === "featureImage";
    } else {
      initShowFeatureImage = "featureImageAdvanced" === "featureImageAdvanced";
      initShow3DModel = "featureImageAdvanced" === "3DModel";
      initShowExVideo = "featureImageAdvanced" === "exVideo";
      initShowOtherVideo = "featureImageAdvanced" === "otherVideo";
    }
    var imageListPosition = "bottom";
    var imageListPosition_lg = "bottom";
    var imageListPosition_md = "bottom";
    var imageListPosition_sm = "bottom";
    var imageListPosition_xs = "bottom";
    var imageListActive = "false" === "true";
    var spaceBetween_sm = "32";
    var spaceBetween_xs = "18";
    var scaleZoomImageActive = "true" === "true";
    var mySwiper;
    var mySwiperFeature;
    var spacingSmall = "16px";
    var displayTypeThumb = "thumb" === "thumb";
    var displayTypeCenter = "thumb" === "center";
    var allowDragSlider = "true" === "true";
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var featuredImage = $(elementClassName).find(".gt_product-img--inner img");
      var itemImage = $(elementClassName).find(".gt_product-carousel-box img");
      var widthFeaturedImage = featuredImage.width();
      var heightFeaturedImage = featuredImage.height();
      var widthItemImage = itemImage.width();
      var heightItemImage = itemImage.height();
      featuredImage.attr("width", widthFeaturedImage);
      featuredImage.attr("height", heightFeaturedImage);
      itemImage.attr("width", widthItemImage);
      itemImage.attr("height", heightItemImage);
    }

    function checkEnableEffectZoomImage() {
      if (scaleZoomImageActive) {
        var productImageFeature = $element.find(".gt_product-image--feature");
        if (productImageFeature && productImageFeature.length) {
          $element.find(".gt_product-image--scale").gfProductZoomImage({
            classHoverItem: ".gt_product-img-box",
            scale: "1.5",
            classSection: ".gt_atom-N49CKtI9YqrZidk_productImageList",
          });
        }
      }
    }

    function listen() {
      listenElementResizeEvent();
      listenWindowResizeEvent();
    }

    function listenElementResizeEvent() {
      let observer = new ResizeObserver(() => {
        if (mySwiper) {
          mySwiper.update()
        }
      })
      observer.observe($element[0]);
    }

    function listenWindowResizeEvent() {
      var delayResize = 0;
      $(window).off("resize.checkSwitchScreensN49CKtI9YqrZidk_productImageList").on("resize.checkSwitchScreensN49CKtI9YqrZidk_productImageList", function() {
        clearTimeout(delayResize);
        delayResize = setTimeout(function() {
          const windowWidthCurrent = $(window).width();
          if (windowWidthCurrent !== checkWindowWidth) {
            checkWindowWidth = windowWidthCurrent;
            widthSliderCurrent = 0;
            sizeIconDotsCurrent = 0;
            if (checkWindowWidth <= 576) {
              widthSliderCurrent = widthSlider_xs;
              sizeIconDotsCurrent = sizeIconDots_xs;
            } else if (checkWindowWidth <= 992) {
              widthSliderCurrent = widthSlider_sm;
              sizeIconDotsCurrent = sizeIconDots_sm;
            } else if (checkWindowWidth <= 1200) {
              widthSliderCurrent = widthSlider_md;
            } else {
              widthSliderCurrent = widthSlider;
            }
            if (widthActive) {
              $element.css("cssText", "width: " + widthSliderCurrent + " !important;");
              mySwiper.update();
            }
            var $paginationItem = $element.find(".gt_control-pagination-item");
            var $paginationItemIcon = $element.find(".gt_control-pagination-item .gt_icon");
            $paginationItemIcon.css("cssText", "width: " + sizeIconDotsCurrent + " !important; height: " + sizeIconDotsCurrent + "!important;");
            $paginationItem.css("cssText", "width: calc(8px + " + sizeIconDotsCurrent + ") !important; height: calc(8px + " + sizeIconDotsCurrent + ") !important;");

            checkImageListPosition();
            calculatorImageSlideHeight();
            checkImageListActive();
            initSlider();
          }
        }, 100)
      });
      if ($element.find(".swiper-slide").length == 1) {
        $element.find('.swiper-wrapper').addClass("gt_disabled");
        $element.find('.gt_control-pagination').addClass("gt_disabled");
      }
    }

    function autoRotateModel() {
      var model = $element.find(".gt_product-media--feature .gt_product-model");
      model.attr("auto-rotate", true);
    }

    function initSlider() {
      if (mySwiper) {
        mySwiper.destroy();
        checkDimensions();
      }
      var $swiperContainer = $element.find(".gt_product--swiper-N49CKtI9YqrZidk_productImageList");
      if (!$swiperContainer || !$swiperContainer.length) {
        return;
      }
      if ($swiperContainer[0].swiper) {
        $swiperContainer[0].swiper.destroy();
      }
      if (mySwiperFeature) {
        mySwiperFeature.destroy();
      }
      if ($swiperContainer.find(".swiper-slide").length == 1) {
        $swiperContainer.addClass("gt_disabled");
      }
      var $swiperContainerFeature = $element.find(".gt_product-feature--swiper-N49CKtI9YqrZidk_productImageList");
      if (!$swiperContainerFeature || !$swiperContainerFeature.length) {
        return;
      }
      if ($swiperContainerFeature[0].swiper) {
        $swiperContainerFeature[0].swiper.destroy();
      }
      if ($swiperContainerFeature.find(".swiper-slide").length == 1) {
        $swiperContainerFeature.find(".swiper-wrapper").addClass("gt_disabled");
        $swiperContainerFeature.find(".gt_control-pagination").addClass("gt_disabled");
      }
      let gtProductImageParams = {
        $element: $element,
        settings: {
          classSwiperItems: ".gt_product--swiper-N49CKtI9YqrZidk_productImageList .gt_product-carousel--item",
          classSwiperItemsImage: ".gt_product--swiper-N49CKtI9YqrZidk_productImageList .gt_product-carousel--item img",
          classSwiperContainer: ".gt_product--swiper-N49CKtI9YqrZidk_productImageList",
          initShowFeatureImage: initShowFeatureImage,
          initShow3DModel: initShow3DModel,
          initShowExVideo: initShowExVideo,
          initShowOtherVideo: initShowOtherVideo,
          swiperSetting: getDataSwiperSettings(),
          //featureimageswiper
          featureSwiperSetting: getDataSwiperSettingsFeature(),
          classFeatureSwiperContainer: ".gt_product-feature--swiper-N49CKtI9YqrZidk_productImageList",
          classFeatureSwiperItemsImage: ".gt_product-feature--swiper-N49CKtI9YqrZidk_productImageList .gt_product-image--feature",
        }
      }
      window.SOLID.library.gtProductImagesV2(gtProductImageParams);
      mySwiper = $swiperContainer[0].swiper;
      mySwiperFeature = $swiperContainerFeature[0].swiper;
    }

    function getDataSwiperSettings() {
      let direction = 'horizontal';
      if (displayTypeThumb) {
        if (imageListPositionCurrent === "left" || imageListPositionCurrent === "right") {
          direction = "vertical";
        }
      }

      let loop = false;
      let centeredSlides = false;
      let freeMode = true;
      if (displayTypeCenter && checkWindowWidth > 992) {
        loop = true;
        centeredSlides = true;
        freeMode = false;
      }
      return {
        mousewheel: false,
        loop: loop,
        centeredSlides: centeredSlides,
        slidesPerView: 3,
        spaceBetween: 16,
        freeMode: freeMode,
        watchSlidesVisibility: true,
        watchSlidesProgress: true,
        navigation: {
          nextEl: ".gt_product--swiper-N49CKtI9YqrZidk_productImageList .gt_control-next",
          prevEl: ".gt_product--swiper-N49CKtI9YqrZidk_productImageList .gt_control-prev",
        },
        breakpoints: {
          0: {
            slidesPerView: slidesPerView_xs,
            spaceBetween: spaceBetween_xs,
            direction: direction,
            mousewheel: false,
            pagination: {
              dynamicBullets: dynamicDotsOnOff,
              dynamicMainBullets: 1,
            },
          },
          577: {
            slidesPerView: slidesPerView_sm,
            spaceBetween: spaceBetween_sm,
            direction: direction,
            mousewheel: false,
            pagination: {
              dynamicBullets: dynamicDotsOnOff,
              dynamicMainBullets: 1,
            },
          },
          993: {
            slidesPerView: slidesPerView_md,
            spaceBetween: spaceBetween_md,
            direction: direction,
            mousewhel: true,
          },
          1201: {
            slidesPerView: slidesPerView_lg,
            spaceBetween: spaceBetween_lg,
            direction: direction,
            mousewhel: true,
          }
        },
        on: {
          init: function() {
            window.SOLID.store.dispatch("trigger-lazyload", true);
          },
          imagesReady: function() {
            if (displayTypeCenter && checkWindowWidth > 992) {
              setTimeout(() => {
                var $swiperWrapperHide = $element.find(".gt_swiper_wrapper-type-center");
                if ($swiperWrapperHide && $swiperWrapperHide.length) {
                  $swiperWrapperHide.removeClass("gt_swiper_wrapper-type-center");
                }
              }, 100)
            }
          }
        },
      }
    }

    function getDataSwiperSettingsFeature() {
      let allowTouchMove = false;
      var productImageFeature = $element.find(".gt_product-image--feature");
      if (allowDragSlider && !productImageFeature.hasClass("gt_product-media--model") || displayTypeCenter) {
        allowTouchMove = true;
      }
      return {
        allowTouchMove: allowTouchMove,
        slidesPerView: 1,
        spaceBetween: 16,
        navigation: {
          nextEl: ".gt_product-feature--swiper-N49CKtI9YqrZidk_productImageList .gt_product-img-nav--right",
          prevEl: ".gt_product-feature--swiper-N49CKtI9YqrZidk_productImageList .gt_product-img-nav--left",
        },
        pagination: {
          el: "#gt_control-pagination-N49CKtI9YqrZidk_productImageList",
          type: 'bullets',
          clickable: true,
          renderBullet: function(index, classname) {
            return `<div class="gt_control-pagination-item ` + classname + ` ">
            <span data-optimize-type="icon"  data-attribute="iconDots,"  data-section-id="N49CKtI9YqrZidk_productImageList"  class="gt_icon"><svg height="100%" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg"> <path fill-rule="evenodd" clip-rule="evenodd" d="M12.5 22C13.05 22 13.5 21.55 13.5 21V3C13.5 2.45 13.05 2 12.5 2C11.95 2 11.5 2.45 11.5 3V21C11.5 21.55 11.95 22 12.5 22ZM8.5 18C9.05 18 9.5 17.55 9.5 17V7C9.5 6.45 9.05 6 8.5 6C7.95 6 7.5 6.45 7.5 7V17C7.5 17.55 7.95 18 8.5 18ZM5.5 13C5.5 13.55 5.05 14 4.5 14C3.95 14 3.5 13.55 3.5 13V11C3.5 10.45 3.95 10 4.5 10C5.05 10 5.5 10.45 5.5 11V13ZM16.5 18C17.05 18 17.5 17.55 17.5 17V7C17.5 6.45 17.05 6 16.5 6C15.95 6 15.5 6.45 15.5 7V17C15.5 17.55 15.95 18 16.5 18ZM19.5 13V11C19.5 10.45 19.95 10 20.5 10C21.05 10 21.5 10.45 21.5 11V13C21.5 13.55 21.05 14 20.5 14C19.95 14 19.5 13.55 19.5 13Z" fill="currentColor"/> </svg></span>
          </div>`;
          }
        },
        breakpoints: {
          0: {
            pagination: {
              dynamicBullets: dynamicDotsOnOff,
              dynamicMainBullets: 1,
            },
          },
          577: {
            pagination: {
              dynamicBullets: dynamicDotsOnOff,
              dynamicMainBullets: 1,
            },
          }
        },
      }
    }

    function changeSliderActive(value) {
      if (value && value.sliderIndex !== NaN) {
        if (loop) {
          mySwiper.slideToLoop(value.sliderIndex, 500, true);
        } else {
          mySwiper.slideTo(value.sliderIndex, 500, true);
        }
      }
    }

    function isImgSliderBottom() {
      const $productImage = $element.find(".gt_product-image-list--bottom");
      if ($productImage && $productImage.length) {
        return true;
      }
      return false;
    }

    function checkImageListActive() {
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        if (imageListActive) {
          slidesPerView_xs = "5";
          spaceBetween_xs = "18";
        } else if (!imageListActive) {
          slidesPerView_xs = 1;
          spaceBetween_xs = 0;
        }
      } else if (checkWindowWidth <= 992) {
        if (imageListActive) {
          slidesPerView_sm = "5";
          spaceBetween_sm = "32"
        } else if (!imageListActive) {
          slidesPerView_sm = 1;
          spaceBetween_sm = 0;
        }
      }
    }

    function calculatorImageSlideHeight() {
      var delay = setTimeout(function() {
        checkWindowWidth = $(window).width();
        if (!isImgSliderBottom()) {
          $imgBox = $element.find(".gt_product-img-box");
          var imgBoxHeight = $imgBox && $imgBox.length && $imgBox[0].offsetHeight;
          $imgSlide.css("height", imgBoxHeight);
          mySwiper.update();
        } else {
          $imgSlide.css("height", "");
        }
      }, 500);
    }

    function optimizeSizeIconDots(value) {
      mySwiper.pagination.render();
      var $paginationItem = $element.find(".gt_control-pagination-item");
      var $paginationItemIcon = $element.find(".gt_control-pagination-item .gt_icon");
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        sizeIconDots_xs = value;
      } else if (checkWindowWidth <= 992) {
        sizeIconDots_sm = value;
      }
      $paginationItemIcon.css("cssText", "width: " + value + " !important; height: " + value + "!important;");
      $paginationItem.css("cssText", "width: calc(8px + " + value + ") !important; height: calc(8px + " + value + ") !important;");
      mySwiper.pagination.update();
    }

    function optimizeSlidePerView(value) {
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        slidesPerView_xs = value;
      } else if (checkWindowWidth <= 992) {
        slidesPerView_sm = value;
      } else if (checkWindowWidth <= 1200) {
        slidesPerView_md = value;
      } else {
        slidesPerView_lg = value;
      }
      initSlider();
    }

    function optimizeWidthSlider(value) {
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        widthSlider_xs = value;
      } else if (checkWindowWidth <= 992) {
        widthSlider_sm = value;
      } else if (checkWindowWidth <= 1200) {
        widthSlider_md = value;
      } else {
        widthSlider_lg = widthSlider = value;
      }
      $element.css("cssText", "width: " + value + " !important;");
      mySwiper.update();
      calculatorImageSlideHeight();
    }

    function optimizeWidthActive(value) {
      widthActive = value;
      if (!value) {
        $element.css("cssText", "width: null");
      } else {
        checkWindowWidth = $(window).width();
        widthSliderCurrent = 0;
        if (checkWindowWidth <= 576) {
          widthSliderCurrent = widthSlider_xs;
        } else if (checkWindowWidth <= 992) {
          widthSliderCurrent = widthSlider_sm;
        } else if (checkWindowWidth <= 1200) {
          widthSliderCurrent = widthSlider_md;
        } else {
          widthSliderCurrent = widthSlider;
        }
        $element.css("cssText", "width: " + widthSliderCurrent + " !important;");
        initSlider();
        mySwiper.update();
      }
    }

    function checkImageListPosition({
      isInit
    } = {}) {
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        imageListPositionCurrent = imageListPosition_xs;
        spacingSmall = "10px";
      } else if (checkWindowWidth <= 992) {
        imageListPositionCurrent = imageListPosition_sm;
        spacingSmall = "16px";
      } else if (checkWindowWidth <= 1200) {
        imageListPositionCurrent = imageListPosition_md;
        spacingSmall = "16px";
      } else {
        imageListPositionCurrent = imageListPosition;
        spacingSmall = "16px";
      }
      $element.find("#gt_product-image-list-id").attr("class", "gt_product-image-list--" + imageListPositionCurrent);
      //showimage
      var $swiperWrapperHide = $element.find(".gt-carousel--hide-default");
      var $productImageList = $element.find("#gt_product-image-list-id");
      if ($swiperWrapperHide && $swiperWrapperHide.length) {
        $swiperWrapperHide.removeClass("gt-carousel--hide-default");
        $productImageList.css("height", "auto");
      }
      if (imageListPositionCurrent !== "bottom") {
        var $productImageListWrapper = $element.find(".gt_product-carousel-box");
        var $productImageBox = $element.find(".gt_product-image--inner");
        $productImageListWrapper.css("height", $productImageBox.outerHeight());
      }
      //css
      if (imageListPositionCurrent === "left" || imageListPositionCurrent === "right") {
        $controlNext.css({
          "height": "auto",
          "width": "100%"
        });
        $controlPrev.css({
          "height": "auto",
          "width": "100%"
        });
      }
      if (imageListPositionCurrent === "left") {
        $productImgInner.css("flex-direction", "row-reverse");
        $imgSlide.css({
          "padding-left": "0",
          "padding-right": spacingSmall
        });
      } else if (imageListPositionCurrent === "right") {
        $productImgInner.css("flex-direction", "row");
        $imgSlide.css({
          "padding-right": "0",
          "padding-left": spacingSmall
        });
      } else {
        $productImgInner.css("flex-direction", "column");
        $imgSlide.css("padding", "");
        $controlNext.css({
          "height": "100%",
          "width": "auto"
        });
        $controlPrev.css({
          "height": "100%",
          "width": "auto"
        });
      }
      if (!isInit) {
        initSlider();
        mySwiper.update();
      }
    }

    function optimizeImageListPosition(value) {
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        imageListPosition_xs = imageListPositionCurrent = value;
      } else if (checkWindowWidth <= 992) {
        imageListPosition_sm = imageListPositionCurrent = value;
      } else if (checkWindowWidth <= 1200) {
        imageListPosition_md = imageListPositionCurrent = value;
      } else {
        imageListPosition_lg = imageListPositionCurrent = imageListPosition = value;
      }
      if (imageListPositionCurrent === "left" || imageListPositionCurrent === "right") {
        $controlNext.css({
          "height": "auto",
          "width": "100%"
        });
        $controlPrev.css({
          "height": "auto",
          "width": "100%"
        });
      }
      if (imageListPositionCurrent === "left") {
        $productImgInner.css("flex-direction", "row-reverse");
        $imgSlide.css({
          "padding-left": "0",
          "padding-right": spacingSmall
        });
      } else if (imageListPositionCurrent === "right") {
        $productImgInner.css("flex-direction", "row");
        $imgSlide.css({
          "padding-right": "0",
          "padding-left": spacingSmall
        });
      } else {
        $productImgInner.css("flex-direction", "column");
        $imgSlide.css("padding", "");
        $controlNext.css({
          "height": "100%",
          "width": "auto"
        });
        $controlPrev.css({
          "height": "100%",
          "width": "auto"
        });
      }
      $element.find("#gt_product-image-list-id").attr("class", "gt_product-image-list--" + value);
      initSlider();
      mySwiper.update();
      calculatorImageSlideHeight();
    }

    function optimizeImageRadio(imageRadio) {
      checkWindowWidth = $(window).width();
      imageRadio = value;
      if (imageRadio === "square") {
        $imgBoxInner.css("padding-top", "calc(100%)");
      } else if (imageRadio === "landscape") {
        $imgBoxInner.css("padding-top", "calc(100% * 3 / 4)");
      } else if (imageRadio === "portrait") {
        $imgBoxInner.css("padding-top", "calc(100% * 4 / 3)");
      }
      if (isImgSliderBottom() || checkWindowWidth < 992) {
        if (imageRadio === "square") {
          $imgSlideItem.css("padding-top", "calc(100%)");
        } else if (imageRadio === "landscape") {
          $imgSlideItem.css("padding-top", "calc(100% * 3 / 4)");
        } else if (imageRadio === "portrait") {
          $imgSlideItem.css("padding-top", "calc(100% * 4 / 3)");
        }
      }
      calculatorImageSlideHeight();
    }

    function optimizeImageRadioActive(value) {
      if (!value) {
        $imgBoxInner.css("padding-top", "");
        $imgSlideItem.css("padding-top", "");
      } else {
        optimizeImageRadio(imageRadio);
      }
      calculatorImageSlideHeight();
    }

    function optimizeDynamicDotsOnOff(value) {
      dynamicDotsOnOff = value;
      initSlider();
      var paginationEl = mySwiperFeature.pagination.el;
      if (value) {
        paginationEl.style.cssText = paginationEl.style.cssText + "margin: 0px auto; transform: translateX(0px); justify-content: unset;";
      } else {
        paginationEl.style.cssText = paginationEl.style.cssText + "justify-content: center;";
        paginationEl.classList.remove("swiper-pagination-bullets-dynamic");
      }
      mySwiperFeature.pagination.update();
      mySwiperFeature.update();
    }

    function getMySwiper() {
      return mySwiper;
    }

    function getMySwiperFeature() {
      return mySwiperFeature;
    }
    /* init block script */
    checkDimensions();
    checkImageListPosition({
      isInit: true
    });
    checkImageListActive();
    initSlider();
    calculatorImageSlideHeight();
    checkEnableEffectZoomImage();
    autoRotateModel();
    listen();
    /* store subscribe block script */
    store.subscribe("optimize-N49CKtI9YqrZidk_productImageList-sizeIconDots", optimizeSizeIconDots);
    store.subscribe("optimal-N49CKtI9YqrZidk_productImageList-slidesPerView", optimizeSlidePerView);
    store.subscribe("optimal-N49CKtI9YqrZidk_productImageList-widthSlider", optimizeWidthSlider);
    store.subscribe("optimal-N49CKtI9YqrZidk_productImageList-widthActive", optimizeWidthActive);
    store.subscribe("optimal-N49CKtI9YqrZidk_productImageList-imageRadio", optimizeImageRadio);
    store.subscribe("optimal-N49CKtI9YqrZidk_productImageList-imageRadioActive", optimizeImageRadioActive);
    store.subscribe("optimal-N49CKtI9YqrZidk_productImageList-dynamicDotsOnOff", optimizeDynamicDotsOnOff);
    store.subscribe("optimal-N49CKtI9YqrZidk_productImageList-imageListPosition", optimizeImageListPosition);
    store.subscribe("trigger-slider-N49CKtI9YqrZidk_productImageList", changeSliderActive);

    function destroy() {
      store.unsubscribe("optimize-N49CKtI9YqrZidk_productImageList-sizeIconDots", optimizeSizeIconDots);
      store.unsubscribe("optimal-N49CKtI9YqrZidk_productImageList-slidesPerView", optimizeSlidePerView);
      store.unsubscribe("optimal-N49CKtI9YqrZidk_productImageList-widthSlider", optimizeWidthSlider);
      store.unsubscribe("optimal-N49CKtI9YqrZidk_productImageList-widthActive", optimizeWidthActive);
      store.unsubscribe("optimal-N49CKtI9YqrZidk_productImageList-imageRadio", optimizeImageRadio);
      store.unsubscribe("optimal-N49CKtI9YqrZidk_productImageList-imageRadioActive", optimizeImageRadioActive);
      store.unsubscribe("optimal-N49CKtI9YqrZidk_productImageList-dynamicDotsOnOff", optimizeDynamicDotsOnOff);
      store.unsubscribe("optimal-N49CKtI9YqrZidk_productImageList-imageListPosition", optimizeImageListPosition);
      store.unsubscribe("trigger-slider-N49CKtI9YqrZidk_productImageList", changeSliderActive);
    }
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      initSlider,
      getMySwiper,
      getMySwiperFeature,
      checkImageListPosition,
      calculatorImageSlideHeight,
      checkImageListActive
    };
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      var publicFunc = script($target, indexEl);
      window.SOLID.public = window.SOLID.public || {};
      window.SOLID.public["atom" + "_" + id + "_" + indexEl] = publicFunc;
      if (publicFunc) {
        store.dispatch("public_function_atom_" + id, publicFunc);
      }
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_productImageList()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_productImageList" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_productTagSale = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_productTagSale";
  var id = "N49CKtI9YqrZidk_productTagSale";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const roundPercent = Number("0");
    const removeZeros = "true" === "true";
    /* store get state block script */
    /* methods block script */
    /* init block script */
    window.SOLID.library.gtProductSaveV2({
      $element: $element,
      settings: {
        classTextPercent: ".gt_product-tag-sale--value--percent",
        classTextNumber: ".gt_product-tag-sale--value--number",
        dataFormat: "-[!Profit!]",
        dataFormatKey: "[!Profit!]",
        customCurrencyFormating: "shortPrefix",
        roundPercent: roundPercent,
        roundNoZeroes: removeZeros
      }
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_productTagSale()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_productTagSale" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_boxInfo = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_boxInfo";
  var id = "N49CKtI9YqrZidk_boxInfo";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "N49CKtI9YqrZidk_boxInfo",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_boxInfo()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_boxInfo" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_boxDetail = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_boxDetail";
  var id = "N49CKtI9YqrZidk_boxDetail";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "N49CKtI9YqrZidk_boxDetail",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_boxDetail()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_boxDetail" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_productTitle = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_productTitle";
  var id = "N49CKtI9YqrZidk_productTitle";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "N49CKtI9YqrZidk_productTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "N49CKtI9YqrZidk_productTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_productTitle()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_productTitle" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_messengerInStock = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_messengerInStock";
  var id = "N49CKtI9YqrZidk_messengerInStock";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "N49CKtI9YqrZidk_messengerInStock",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "N49CKtI9YqrZidk_messengerInStock",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_messengerInStock()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_messengerInStock" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_boxPrice = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_boxPrice";
  var id = "N49CKtI9YqrZidk_boxPrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "N49CKtI9YqrZidk_boxPrice",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_boxPrice()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_boxPrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_productPrice = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_productPrice";
  var id = "N49CKtI9YqrZidk_productPrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const syncQuantityandPrice = "true" == "true";
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!price!]"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "N49CKtI9YqrZidk_productPrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "N49CKtI9YqrZidk_productPrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-price-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-price-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    };
    $element.gtProductPrice({
      classCurrentPrice: ".gt_product-price--number",
      syncQuantityPrice: syncQuantityandPrice,
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_productPrice()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_productPrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_productComparePrice = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_productComparePrice";
  var id = "N49CKtI9YqrZidk_productComparePrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const syncQuantityandPrice = "true" == "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "N49CKtI9YqrZidk_productComparePrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "N49CKtI9YqrZidk_productComparePrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    $element.gtProductPrice({
      classComparePrice: ".gt_product-price--compare",
      classCurrentPrice: ".gt_product-price--number",
      syncQuantityComparePrice: syncQuantityandPrice,
      replacePriceForCurrentPrice: false,
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_productComparePrice()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_productComparePrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_productDescription = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_productDescription";
  var id = "N49CKtI9YqrZidk_productDescription";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const turnOffDescription = "false" === "true";
    const heightSettingDes = "75px";
    /* store get state block script */
    /* methods block script */
    function initView() {
      //resetcss
      if (!turnOffDescription) {
        $element.find(".gt_description").css("height", "");
        $element.find(".gt_btn-view-more").css({
          padding: "",
          position: ""
        });
      }
      var heightCurrentBoxDes = 0;
      if ($element.hasClass("gt_product-desciption--tab")) {
        heightCurrentBoxDes = $element.parents(".gt_active-content").find(".gt_box-desc").height();
      } else {
        heightCurrentBoxDes = $element.find(".gt_box-desc").height();
      }
      $element.find(".gt_description").removeClass("open");
      if (heightCurrentBoxDes <= parseInt(heightSettingDes) && !turnOffDescription) {
        $element.find(".gt_btn-view-more").addClass("gt_hidden");
        $element.find(".gt_description").css("height", "auto");
      } else {
        $element.find(".gt_btn-view-more").removeClass("gt_hidden");
        $element.find(".gt_description").css("height", "");
      }
      //setheightwhenturnoffdescription
      if (turnOffDescription) {
        $element.find(".gt_description").css("height", "auto");
        $element.find(".gt_btn-view-more").css({
          padding: "0px",
          position: "relative"
        });
      }
    }

    function toggleDes() {
      $element.find(".gt_description").toggleClass("open");
    }
    
    function checkAtomExist() {	
      if ($element.find(".gt_description").length < 1) {	
        $element.hide();	
      }	
    }
    
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "N49CKtI9YqrZidk_productDescription",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "N49CKtI9YqrZidk_productDescription",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    initView();
    /* store subscribe block script */
    /* events block script */
    var $elements_1 = $element.find("#toggleDes");
    $elements_1.off("click").on("click", toggleDes);
    /* destroy block script */
    
    /* public func block script */
    return {
      initView,
    };
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      var publicFunc = script($target, indexEl);
      window.SOLID.public = window.SOLID.public || {};
      window.SOLID.public["atom" + "_" + id + "_" + indexEl] = publicFunc;
      if (publicFunc) {
        store.dispatch("public_function_atom_" + id, publicFunc);
      }
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_productDescription()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_productDescription" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_productVariant = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_productVariant";
  var id = "N49CKtI9YqrZidk_productVariant";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var $variantChecked = $element.find(".gt_product-variant--checked");
    var $variantOptions = $element.find(".gt_product-variant-options");
    var mode = "production";
    var animationActive = 'false';
    var timeoutTooltip = null;
    var valueInTitleActive = "false" === "true";
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (animationActive === "true") {
        var interactionScrollIntoView =
          '""';
        window.SOLID.library.animation({
          elementId: id,
          $doms: $elements,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function initSwatches() {
      window.SOLID.library.gtProductSwatchesV2({
        $element: $element,
        settings: {
          classCurrentValue: ".gt_product-variant-option--selected .gt_product-variant-option--selected-text",
          classItem: ".gt_variant--select-item",
          classInputIdHidden: ".gt_variant--input",
          classBtnSelect: ".gt_product-variant--btn-select",
          classVariantValueInTitle: ".gt_title_value",
        }
      });
    }

    function openSelectDropdown() {
      $variantChecked.removeClass("gt_active");
      var $options = $(this).siblings(".gt_product-variant-options");
      if ($options.hasClass("gt_active")) {
        $options.css("top", "");
        $options.removeClass("gt_active");
        $(this).removeClass("gt_active");
        clearEventShowTooltip();
        $(document).off("mousedown.outsideClickVariantSelect");
      } else {
        $variantOptions.removeClass("gt_active");
        $options.addClass("gt_active");
        $(this).addClass("gt_active");
        var optionsOuterHeight = $options.outerHeight();
        var selectInputHeight = $variantChecked.outerHeight();
        var positionOptions = $options.offset().top - $(document).scrollTop() + optionsOuterHeight;
        var windowHeight = $(window).outerHeight();
        if (positionOptions > windowHeight) {
          const currentTopOptions = $options.css("top");
          const newTop = "calc( " + currentTopOptions + " - " + optionsOuterHeight + "px" + " - " + (Number(selectInputHeight) + 10) + "px" + " )";
          $options.css("top", newTop);
        }
        clearTimeout(timeoutTooltip);
        timeoutTooltip = setTimeout(() => {
          eventShowTooltipSelectType();
        }, 300)
        //addeventclickoutsidetoclose
        const $currentTargetOptions = $(this);
        $(document).off("mousedown.outsideClickVariantSelect").on("mousedown.outsideClickVariantSelect", function(event) {
          if ($options && $options.length && $currentTargetOptions && $currentTargetOptions.length) {
            const $optionsPure = $options[0];
            if ($optionsPure && !$optionsPure.contains(event.target) && !$currentTargetOptions[0].contains(event.target)) {
              $options.css("top", "");
              $options.removeClass("gt_active");
              $currentTargetOptions.removeClass("gt_active");
              clearEventShowTooltip();
              $(document).off("mousedown.outsideClickVariantSelect");
            }
          }
        });
      }
    }

    function onClickSelectDropDown() {
      $variantChecked.removeClass("gt_active");
      $variantOptions.removeClass("gt_active");
      var value = $(this).attr("data-value");
      var $variantCheckedCurrent = $(this).closest(
        ".gt_product-variant--select-box"
      );
      var $valueVariantChecked = $variantCheckedCurrent.find(
        ".gt_product-variant-option--selected .gt_product-variant-option--selected-text"
      );
      var $contentOptionSelect = $(this).html();
      $valueVariantChecked.attr("data-value", value);
      $valueVariantChecked.html($contentOptionSelect);
      //closetooltip
      const $tooltip = $element.find(".gt_product-variant-tooltip");
      $tooltip.css("display", "none");
      clearEventShowTooltip();
    }

    function hideAtomWhenNoVariant() {
      $element.css("display", "");
      var isHide = true;
      var $variantItems = $element.find(".gt_product-variant--item")
      for (var i = 0; i < $variantItems.length; i++) {
        var $item = $($variantItems[i]);
        var display = $item.css("display");
        if (display !== "none") {
          isHide = false;
          break;
        }
      }
      if (isHide) {
        $element.css("display", "none");
      }
    }

    function eventShowTooltipSelectType() {
      const $selectItems = $element.find(".gt_variant--select-item");
      for (var i = 0; i < $selectItems.length; i++) {
        const $selectItem = $($selectItems[i]);
        const $selectOptions = $selectItem.find(".gt_product-variant-option");
        const $tooltip = $selectItem.find(".gt_product-variant-tooltip");
        $selectOptions.off("mouseenter").on("mouseenter", function() {
          //checkoverflow
          const $contentValue = $(this).find(".gt_product-variant-option--txt");
          const cachedDisplayContentValue = $contentValue.css("display");
          $contentValue.css({
            display: "inline",
            overflow: "unset",
            whiteSpace: "nowrap"
          });
          const realWidth = $contentValue.outerWidth();
          $contentValue.css({
            display: cachedDisplayContentValue,
            overflow: "",
            whiteSpace: ""
          });
          //
          const selectOptionTop = this.getBoundingClientRect().top;
          const selectItemTop = $selectItem[0].getBoundingClientRect().top;
          const selectOptionHeight = $(this).outerHeight();
          const selectOptionWidth = $(this).outerWidth();
          const contentSelect = $contentValue.html();
          if (realWidth > selectOptionWidth) {
            $tooltip.find(".gt_product-variant-tooltip-name").html(contentSelect);
            $tooltip.css({
              display: "block",
              top: selectOptionTop - selectItemTop - selectOptionHeight,
              zIndex: 10
            });
            $tooltip.find(".gt_product-variant-tooltip-arrow").css({
              left: selectOptionWidth / 2 + "px",
            })
          }
        });
        $selectOptions.off("mouseleave").on("mouseleave", function() {
          $tooltip.css({
            display: "none"
          })
        });
      }
    }

    function clearEventShowTooltip() {
      const $selectitems = $element.find(".gt_variant--select-item");
      for (var i = 0; i < $selectitems.length; i++) {
        const $selectitem = $($selectitems[i]);
        const $selectoptions = $selectitem.find(".gt_product-variant-option");
        $selectoptions.off("mouseenter");
        $selectoptions.off("mouseleave");
      }
    }
    /* init block script */
    hideAtomWhenNoVariant();
    initSwatches();
    animation();
    /*global blockscript*/
    window.SOLID.store.subscribe("run-script-" + id, () => {
      $elements = document.querySelectorAll(elementClassName);
      main();
    });
    /* store subscribe block script */
    /* events block script */
    var $elements_1 = $element.find(".gt_product-variant--checked");
    $elements_1.off("click.openSelect").on("click.openSelect", openSelectDropdown);
    var $elements_2 = $element.find(".gt_product-variant-option");
    $elements_2.off("click.selectItem").on("click.selectItem", onClickSelectDropDown);
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_productVariant()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_productVariant" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_boxSticky = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_boxSticky";
  var id = "N49CKtI9YqrZidk_boxSticky";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "N49CKtI9YqrZidk_boxSticky",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_boxSticky()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_boxSticky" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_boxNotify = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_boxNotify";
  var id = "N49CKtI9YqrZidk_boxNotify";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "N49CKtI9YqrZidk_boxNotify",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_boxNotify()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_boxNotify" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_productSoldOutForm = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_productSoldOutForm";
  var id = "N49CKtI9YqrZidk_productSoldOutForm";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var isNotificationSuccessPreview = "false";
    var typeText = "Type";
    var nameText = "Name";
    var phoneText = "Phone";
    var productNameText = "Product Name";
    var variantNameText = "Variant Name";
    var productUrlText = "Product URL";
    /* store get state block script */
    /* methods block script */
    function checkSubmitFormSuccess() {
      //Scrollđếnatom
      var queryUrl = getQueryByUrl();
      if (queryUrl.status) {
        showMessageSuccess();
        hideForm();
        var currentElement = $(`.${queryUrl.id}`);
        if (currentElement && currentElement.length) {
          $("html, body").animate({
              scrollTop: currentElement.offset().top - 800
            },
            300
          );
        }
      }
    }

    function getQueryByUrl() {
      const urlParams = new URLSearchParams(window.location.search);
      const status = urlParams.get("posted_successfully");
      const currentId = urlParams.get("id");
      return {
        status: status,
        id: currentId,
      };
    }

    function checkPreviewMessageSuccess() {
      if ("production" !== "production" && !checkProductAvailable()) {
        if (
          isNotificationSuccessPreview &&
          isNotificationSuccessPreview === "true"
        ) {
          showMessageSuccess();
          hideForm();
        } else {
          hideMessageSuccess();
          showForm();
        }
      }
    }

    function checkProductAvailable() {
      var $sectionProductDetail = $element.closest("section[keyword='product'], section[data-keyword='product']");
      var $productJson = $sectionProductDetail.find(".ProductJson");
      let productJson;
      try {
        productJson = JSON.parse($productJson.html())
      } catch (e) {}
      if (!productJson) {
        return;
      }
      const currentVariant = window.SOLID.store.getState("variant" + productJson.id);
      return currentVariant.available;
    }

    function showMessageSuccess() {
      var message = $element.find(".gt_message-success");
      message.show();
    }

    function hideMessageSuccess() {
      var message = $element.find(".gt_message-success");
      message.hide();
    }

    function setFormName() {
      formatTypeText = typeText.toLowerCase().replace(/[^\w\s]/gi, '');
      formatNameText = nameText.toLowerCase().replace(/[^\w\s]/gi, '');
      formatPhoneText = phoneText.toLowerCase().replace(/[^\w\s]/gi, '');
      formatProductName = productNameText.toLowerCase().replace(/[^\w\s]/gi, '');
      formatVariantName = variantNameText.toLowerCase().replace(/[^\w\s]/gi, '');
      formatProductUrl = productUrlText.toLowerCase().replace(/[^\w\s]/gi, '');

      $element.find(".gt_form--type").attr("name", "contact[ " + formatTypeText + "]");
      $element.find(".gt_form-customer--name").attr("name", "contact[ " + formatNameText + "]");
      $element.find(".gt_form-customer--phone").attr("name", "contact[ " + formatPhoneText + "]");
      $element.find(".gt_form--email").attr("required", "required");
      $element.find(".gt_form-customer--email").attr("name", "contact[email]");
      $element.find(".gt_form-product--name").attr("name", "contact[ " + formatProductName + "]");
      $element.find(".gt_form-variant--name").attr("name", "contact[ " + formatVariantName + "]");
      $element.find(".gt_form-product--url").attr("name", "contact[ " + formatProductUrl + "]");
      $element.find(".gt_form--return-url").attr("name", "return_to");
    }

    function removeFormName() {
      $element.find(".gt_form--type").removeAttr("name");
      $element.find(".gt_form-customer--name").removeAttr("name");
      $element.find(".gt_form-customer--phone").removeAttr("name");
      $element.find(".gt_form--email").removeAttr("required");
      $element.find(".gt_form-customer--email").removeAttr("name");
      $element.find(".gt_form-product--name").removeAttr("name");
      $element.find(".gt_form-variant--name").removeAttr("name");
      $element.find(".gt_form-product--url").removeAttr("name");
      $element.find(".gt_form--return-url").removeAttr("name");
    }

    function showForm() {
      var form = $element.find(".gt_form");
      setFormName();
      form.show();
    }

    function hideForm() {
      var form = $element.find(".gt_form");
      $element.find(".gt_form--email").removeAttr("required");
      removeFormName();
      form.hide();
    }

    function setCustomerName(value) {
      var elCustomerName = $element.find(".gt_form-customer--name");
      elCustomerName.val(value);
    }

    function setCustomerPhone(value) {
      var elCustomerPhone = $element.find(".gt_form-customer--phone");
      elCustomerPhone.val(value);
    }

    function setProductName(value) {
      var elProductName = $element.find(".gt_form-product--name");
      elProductName.val(value);
    }

    function setVariantName(value) {
      var elVariantName = $element.find(".gt_form-variant--name");
      elVariantName.val(value);
    }

    function setProductUrl(value) {
      var elProductUrl = $element.find(".gt_form-product--url");
      elProductUrl.val(value);
    }

    function setReturnTo(value) {
      var elReturnTo = $element.find(".gt_form--return-url");
      elReturnTo.val(value);
    }
    /* init block script */
    checkPreviewMessageSuccess();
    setTimeout(() => {
      checkSubmitFormSuccess();
      setReturnTo(
        window.location.pathname + `?posted_successfully=true&id=N49CKtI9YqrZidk_productSoldOutForm`
      );
    }, 100)
    
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      showMessageSuccess,
      hideMessageSuccess,
      showForm,
      hideForm,
      setCustomerName,
      setCustomerPhone,
      setProductName,
      setVariantName,
      setProductUrl,
      setReturnTo
    };
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      var publicFunc = script($target, indexEl);
      window.SOLID.public = window.SOLID.public || {};
      window.SOLID.public["atom" + "_" + id + "_" + indexEl] = publicFunc;
      if (publicFunc) {
        store.dispatch("public_function_atom_" + id, publicFunc);
      }
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_productSoldOutForm()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_productSoldOutForm" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_boxCartBtn = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_boxCartBtn";
  var id = "N49CKtI9YqrZidk_boxCartBtn";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "N49CKtI9YqrZidk_boxCartBtn",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_boxCartBtn()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_boxCartBtn" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_productQuantity = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_productQuantity";
  var id = "N49CKtI9YqrZidk_productQuantity";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var style = "horizontal";
    var mode = "production";
    var interactionScrollIntoViewActive = "false";
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (interactionScrollIntoViewActive === "true") {
        var interactionScrollIntoView =
          '""';
        var $container = $element.find(".gt_product-quantity");
        window.SOLID.library.animation({
          elementId: id,
          $doms: $container,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function initLibrary() {
      var params = {
        $element: $element,
        settings: {
          classInput: "input[name='quantity']",
          classPlus: ".gt_quantity_plus",
          classMinus: ".gt_quantity_minus",
          mode: mode,
        }
      };
      if (style === "horizontal") {
        params = {
          $element: $element,
          settings: {
            classInput: "input[name='quantity']",
            classPlus: ".gt_product-quantity--plus",
            classMinus: ".gt_product-quantity--minus",
            mode: mode,
          }
        };
      }
      window.SOLID.library.gtProductQuantityV2(params);
    }

    function validateInput() {
      var inputQuantity = $element.find("input[name='quantity']");
      inputQuantity.keyup(function() {
        var value = parseInt(this.value);
        if (isNaN(value)) {
          value = 1;
        }
        inputQuantity.attr("value", value).val(value);
      })
    }
    /* init block script */
    initLibrary();
    animation();
    validateInput();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_productQuantity()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_productQuantity" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_boxBtn = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_boxBtn";
  var id = "N49CKtI9YqrZidk_boxBtn";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "N49CKtI9YqrZidk_boxBtn",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_boxBtn()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_boxBtn" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomN49CKtI9YqrZidk_productButtonAddToCart = function() {
          (function() {
  var elementClassName = ".gt_atom-N49CKtI9YqrZidk_productButtonAddToCart";
  var id = "N49CKtI9YqrZidk_productButtonAddToCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var scrollIntoViewActive = 'false' == 'true';
    var animationActive = 'false' == 'true';
    var animationHoverActive = 'false' == 'true';
    var scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var mode = 'production';
    var previewSoldOut = 'false';
    var actions = '[{"control":{"attribute":"pickProductButton","id":"pickProductButton","isButtonAddToCard":true,"type":"pickproduct"},"event":"click","id":1},{"control":{"attribute":"pickLinkButton","id":"pickLinkButton","newTab":false,"reference":"html","title":"Pick Link","type":"picklink","value":"/cart"},"event":"click","id":2}]';
    
    var activeButtonFixContent = "false" === "true";
    var buttonFixContent = "Buy [!quantity!] items";
    var disableListenSoldOut = "false" === "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "N49CKtI9YqrZidk_productButtonAddToCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        };
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover",
          };
        }
        window.SOLID.library.animation(settings);
      }
    }

    function eventChangeTextInIframe() {
      
    }

    function eventListenSoldOut() {
      if (mode !== "production") {
        if (previewSoldOut === "false") {
          window.SOLID.library.gtBuyProductListenSoldOut({
            $element: $($element)[0],
            options: {
              isButtonAddToCard: true,
              textAddToCard: "Add To Cart",
              textSoldOut: "Sold out",
            },
            mode: "dev"
          });
        }
      } else {
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $($element)[0],
          options: {
            isButtonAddToCard: true,
            textAddToCard: "Add To Cart",
            textSoldOut: "Sold out",
          },
        });
      }
    }

    function addActionEvent() {
      // function customEvent(actions,id,key)
      if (mode === "production") {
        $($element).customEvent(
          JSON.parse(actions),
          'N49CKtI9YqrZidk_productButtonAddToCart' + '_' + indexEl
        );
      }
      /*Listenifisbuttonaddtocard*/
      store.subscribe(
        "loading-buy-now-N49CKtI9YqrZidk_productButtonAddToCart" + "_" + indexEl,
        function(isDisplay) {
          const $loadingEl = $($element).find(
            ".atom-button-loading-circle-loader"
          );
          const $textEl = $($element).find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              store.dispatch("loading-buy-now-N49CKtI9YqrZidk_productButtonAddToCart", "");
              store.dispatch("loading-buy-now-N49CKtI9YqrZidk_productButtonAddToCart" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl
                .find(".atom-button-loading-check-mark")
                .css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl
                  .find(".atom-button-loading-check-mark")
                  .removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                store.dispatch("loading-buy-now-N49CKtI9YqrZidk_productButtonAddToCart", "");
                store.dispatch("loading-buy-now-N49CKtI9YqrZidk_productButtonAddToCart" + "_" + indexEl, "");
              }, 3000);
            }
          }
        }
      );
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    if (activeButtonFixContent) {
      initFixContent();
    }
    addInteraction();
    addActionEvent();
    if (!disableListenSoldOut) {
      eventListenSoldOut();
    }
    eventChangeTextInIframe();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      eventListenSoldOut,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomN49CKtI9YqrZidk_productButtonAddToCart()
      } catch(e) {
        console.error("Error ESAtom Id: N49CKtI9YqrZidk_productButtonAddToCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESWidgetXB1E3G9gG01qJdU = function() {
          (function() {
  var elementClassName = ".gt_widget-XB1E3G9gG01qJdU";
  var id = "XB1E3G9gG01qJdU";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var campaignSettings = [];
    var productJson;
    var DISCOUNT_ZERO_MESSAGE = "Discount Value or Minimum Quantity for this product is 0! There need to be positive numbers for addon to show.";
    var NOT_ACTIVE_MSG = "Current product is not in any active campaign! Click “Edit Campaign” in left setting sidebar to edit campaigns.";
    var mode = "production";
    var isPreview = "false" === "true";
    var $discountPlace;
    var actionBuyRedirect = "cart";
    var elementType = "section_product";
    var presetsSectionProduct = "section_product_1";
    var presetsProductPage = "product_page";
    var presetsCartPage = "cart_page";
    var showVariantsSectionProduct = "true" === "true";
    var showVariantsProductPage = "false" === "true";
    var showVariantsCartPage = "false" === "true";
    var syncDiscountPrice = "true" === "true";
    var showVariantSelector;
    var presets;
    var discounts = [];
    var delayRenderTagSale = null;
    /* store get state block script */
    /* methods block script */
    function initScript() {
      getCampainSetting();
      getPresetsAndShowVariantsSelector();
      getContainer();
      initRenderPreset();
    }

    function getCampainSetting() {
      campaignSettings = window.SOLID.store.getState("esDiscountsData") || [];
    }

    function getPresetsAndShowVariantsSelector() {
      if (elementType === "section_product") {
        presets = presetsSectionProduct;
        showVariantSelector = showVariantsSectionProduct;
      } else if (elementType === "product_page") {
        presets = presetsProductPage;
        showVariantSelector = showVariantsProductPage;
      } else if (elementType === "section_cart" || elementType === "cart_drawer") {
        presets = presetsCartPage;
        showVariantSelector = showVariantsCartPage;
      }
    }

    function getContainer() {
      if (presets === "product_page") {
        $discountPlace = $element.find(".gt_upsell_product_page--discounts");
      } else if (presets === "cart_page") {
        $discountPlace = $element.find(".gt_upsell_container-list");
      } else {
        $discountPlace = $element.find(".gt_upsell_container");
      }
    }

    function initRenderPreset() {
      switch (presets) {
        case "cart_page": {
          initRenderPresetCartPage();
          break;
        }
        case "section_product_1": {
          initRenderPresetSectionProduct();
          listenChangeVariant("section_product_1");
          break;
        }
        case "section_product_2": {
          initRenderPresetSectionProduct();
          listenChangeVariant("section_product_2");
          break;
        }
        case "product_page": {
          initRenderPresetSectionProduct();
          listenChangeVariant("product_page");
          break;
        }
      }
    }

    function initRenderPresetCartPage() {
      if (mode === "dev") {
        var demoDiscounts = [{
            discount: 20,
            quantity: 2
          },
          {
            discount: 30,
            quantity: 3
          },
          {
            discount: 40,
            quantity: 4
          },
        ];
        renderUpsellItemCartPage(demoDiscounts);
      } else {
        renderItemsInCartItems();
      }
    }

    function initRenderPresetSectionProduct() {
      getProductJson();
      if (!productJson) {
        return;
      }
      getDiscountsAndRender();
      listenAtomRender();
    }

    function getProductJson() {
      var $productEl = $($element).closest("[keyword='product'], [data-keyword='product']");
      if (!$productEl.length) {
        return;
      }
      var $productJson = $productEl.find(".ProductJson");
      if (!$productJson.length) {
        return;
      }
      try {
        productJson = JSON.parse($($productJson[0]).text());
      } catch (error) {
        console.log(error);
      }
    }

    function listenAtomRender() {
      
    }

    function reRenderElementsWhenChangeHtmlAtom(atom) {
      
    }

    function reRenderDiscountItems(atom) {
      
    }

    function reRenderTagSaleWhenChangeHtml(atom) {
      
    }

    function getDiscountsAndRender() {
      showEmptyUpsellOnEditor();
      sortCampaignsByPriority();
      getSatisfyDiscounts();
      showProductUpsell(discounts);
    }

    function showEmptyUpsellOnEditor() {
      if (!campaignSettings.length) {
        showProductUpsell([]);
        return;
      }
    }

    function sortCampaignsByPriority() {
      campaignSettings = campaignSettings.sort(function(c1, c2) {
        return c1.price_rule.target_selection > c2.price_rule.target_selection ? 1 : -1;
      });
    }

    function getSatisfyDiscounts() {
      discounts = [];
      removeNotSatisfyDiscounts();
    }

    function removeNotSatisfyDiscounts() {
      campaignSettings.forEach(function(campaign) {
        if (!campaign.price_rule) {
          return;
        }
        if ((campaign.started_at && !isBeforeToday(campaign.started_at)) || isBeforeToday(campaign.completed_at)) {
          return;
        }
        if (campaign.price_rule.target_type === "shipping_line") {
          return;
        }
        var campaignIncludeProduct;
        if (campaign.price_rule && campaign.price_rule.products && campaign.price_rule.products.length) {
          campaignIncludeProduct = campaign.price_rule.products.some((product) => product.id === productJson.id);
        }
        if (!(campaign.price_rule.target_selection === "all" || (campaign.price_rule.target_selection === "entitled" && campaignIncludeProduct))) {
          return;
        }
        var productQuantity = parseInt(campaign.price_rule.prerequisite_quantity_range?.greater_than_or_equal_to);
        var productDiscount = -parseInt(campaign.price_rule.value);
        if (productQuantity <= 0 || productDiscount <= 0) {
          return;
        }
        discounts.push({
          title: "",
          quantity: productQuantity,
          discount: productDiscount,
          tag: campaign.tag,
          code: campaign.code,
        });
      });
    }

    function isBeforeToday(date) {
      if (!date) {
        return false;
      }
      const formatDate = new Date(date);
      const today = new Date();
      return formatDate < today;
    }

    function showProductUpsell(discounts, errorMessage) {
      clearContainer();
      if (discounts.length) {
        initRenderDiscounts(discounts);
      } else {
        showWarningInDev(errorMessage);
      }
    }

    function showWarningInDev(errorMessage) {
      
    }

    function clearContainer() {
      $discountPlace.html("");
    }

    function initRenderDiscounts(discounts) {
      sortDiscounts();
      discounts.forEach((item, index) => {
        let $discountItemTemplate = $element.find(".gt_upsell_item-template").children();
        let $discountItem = $discountItemTemplate.clone();
        switch (presets) {
          case "section_product_1": {
            renderInSectionProductPreset1($discountItem, item, index);
            $discountPlace.append($discountItem);
            break;
          }
          case "section_product_2": {
            renderInSectionProductPreset2($discountItem, item, index);
            $discountPlace.append($discountItem);
            break;
          }
          case "product_page": {
            if (index >= 3) {
              break;
            }
            if (index % 2 == 0) {
              $discountItemTemplate = $element.find(".gt_upsell_item-template.gt_upsell_item-template-product-page-even").children();
              $discountItem = $discountItemTemplate.clone();
              renderInProductPage($discountItem, item, index);
            } else {
              $discountItemTemplate = $element.find(".gt_upsell_item-template.gt_upsell_item-template-product-page-odd").children();
              $discountItem = $discountItemTemplate.clone();
              renderInProductPage($discountItem, item, index);
            }
            $discountPlace.append($discountItem);
            break;
          }
        }
      });
      if (showVariantSelector) {
        callEventInVariantSelectAtom();
      }
    }

    function sortDiscounts() {
      discounts.sort(function(a, b) {
        return a.quantity - b.quantity;
      });
    }

    function callEventInVariantSelectAtom() {
      setTimeout(() => {
        switch (presets) {
          case "section_product_1": {
            callEventInVariantInSectionProduct();
            break;
          }
          case "product_page": {
            callEventInVariantInProductPage();
            break;
          }
          case "cart_page": {
            callEventInVariantInCartPage();
            break;
          }
        }
      }, 10);
    }

    function callEventInVariantInSectionProduct() {
      const $atomVariant = $element.find(".gt_atom-" + id + "_variantSelect");
      for (let i = 0; i < $atomVariant.length; i++) {
        const atomVariantSelectPublic = window.SOLID.public["atom_" + id + "_variantSelect_" + i];
        if (atomVariantSelectPublic) {
          atomVariantSelectPublic.addEventSelect();
        }
      }
    }

    function callEventInVariantInProductPage() {
      const $atomVariantEven = $element.find(".gt_atom-" + id + "_variantSelectProductPageEven");
      for (let i = 0; i < $atomVariantEven.length; i++) {
        const atomVariantSelectEventPublic = window.SOLID.public["atom_" + id + "_variantSelectProductPageEven_" + i];
        if (atomVariantSelectEventPublic) {
          atomVariantSelectEventPublic.addEventSelect();
        }
      }
      const $atomVariantOdd = $element.find(".gt_atom-" + id + "_variantSelectProductPageOdd");
      for (let i = 0; i < $atomVariantOdd.length; i++) {
        const atomVariantSelectOddPublic = window.SOLID.public["atom_" + id + "_variantSelectProductPageOdd_" + i];
        if (atomVariantSelectOddPublic) {
          atomVariantSelectOddPublic.addEventSelect();
        }
      }
    }

    function callEventInVariantInCartPage() {
      const $atomVariant = $element.find(".gt_atom-" + id + "_variantSelectCartDrawer");
      for (let i = 0; i < $atomVariant.length; i++) {
        const atomVariantSelectPublic = window.SOLID.public["atom_" + id + "_variantSelectCartDrawer_" + i];
        if (atomVariantSelectPublic) {
          atomVariantSelectPublic.addEventSelect();
        }
      }
    }

    function renderInSectionProductPreset1($discountItem, discountData, discountIndex) {
      renderDiscountValueInSectionProductPreset1($discountItem, discountData);
      renderDiscountQuantityInSectionProductPreset1($discountItem, discountData);
      listenChangeVariantInRenderSectionProduct($discountItem, discountData, discountIndex);
      renderContentInSectionProductPreset1($discountItem, discountData, discountIndex);
      renderAtomPriceInSectionProductDetails();
    }

    function renderDiscountValueInSectionProductPreset1($discountItem, discountData) {
      const $discountValue = $discountItem.find(".gt_upsell_discount_value");
      $discountValue.find(".gt_content-text-value").html(discountData.discount + "%");
    }

    function renderDiscountQuantityInSectionProductPreset1($discountItem, discountData) {
      const $buttonATC = $discountItem.find(".gt_upsell-add-to-cart");
      $buttonATC.find(".gt_button-content-text-value").html(discountData.quantity);
    }

    function listenChangeVariantInRenderSectionProduct($discountItem, discountData, discountIndex) {
      const currentVariant = window.SOLID.store.getState("variant" + productJson.id);
      if (!currentVariant) {
        
        return;
      }
    }

    function renderContentInSectionProductPreset1($discountItem, discountData, discountIndex) {
      renderPriceInSectionProductPreset1($discountItem, discountData);
      renderVariantSelectInSectionProductPreset1($discountItem, discountData);
      addEventAddToCartInSectionProductPreset1($discountItem, discountData, discountIndex);
      renderDiscountPriceWhenQuantityChange();
    }

    function renderPriceInSectionProductPreset1($discountItem, discountData) {
      const currentVariant = window.SOLID.store.getState("variant" + productJson.id) || {};
      const comparePrice = currentVariant.price * discountData.quantity;
      const price = comparePrice - parseInt((comparePrice * discountData.discount) / 100);
      $discountItem.find(".gt_upsell-current-price").html(formatMoney(price));
      $discountItem.find(".gt_upsell-current-price").attr("data-currentprice", price / 100);
      $discountItem.find(".gt_upsell-compare-price").html(formatMoney(comparePrice));
      $discountItem.find(".gt_upsell-compare-price").attr("data-currentprice", comparePrice / 100);
      $discountItem.attr("data-discount", discountData.discount);
    }

    function renderVariantSelectInSectionProductPreset1($discountItem, discountData) {
      let $variantSelect;
      if (showVariantSelector) {
        $variantSelect = $discountItem.find(".gt_upsell_container-item-variant-select");
        renderVariantSelect($variantSelect, discountData);
        $variantSelect.off("click.zIndex").on("click.zIndex", () => {
          $element.find(".gt_upsell_container-item").css("z-index", "0");
          $discountItem.attr("style", "z-index: 1 !important;");
        });
      }
    }

    function addEventAddToCartInSectionProductPreset1($discountItem, discountData, discountIndex) {
      let $variantSelect;
      if (showVariantSelector) {
        $variantSelect = $discountItem.find(".gt_upsell_container-item-variant-select");
      }
      const $buttonATC = $discountItem.find(".gt_upsell-add-to-cart");
      listenAddToCart(
        $buttonATC, {
          quantity: discountData.quantity,
          buttonIdx: discountIndex,
          code: discountData.code,
        },
        $variantSelect
      );
    }

    function renderDiscountPriceWhenQuantityChange() {
      window.SOLID.store.unsubscribe("quantity" + productJson.id + "@renderDiscountPriceUpsell" + indexEl);
      window.SOLID.store.subscribe("quantity" + productJson.id + "@renderDiscountPriceUpsell" + indexEl, () => {
        renderAtomPriceInSectionProductDetails();
      });
    }

    function renderTagSaleWhenSyncDiscount() {
      const quantity = window.SOLID.store.getState("quantity" + productJson.id);
      var applyDiscount = getActiveDiscountByQuantity(quantity);
      var {
        savePercent,
        saveNumber
      } = getValueofAtomTagSale(applyDiscount);
      updateValueTagSaleInSection(savePercent, saveNumber);
      updateValueTagSaleInStickyATC(savePercent, saveNumber);
    }

    function getValueofAtomTagSale(applyDiscount) {
      let savePercent = 0;
      let saveNumber = 0;
      const totalPrice = getPriceByQuantity();
      const totalComparePrice = getComparePriceByQuantity();
      if (applyDiscount) {
        const totalPriceAfterDiscount = totalPrice - parseInt(totalPrice * applyDiscount.discount) / 100;
        savePercent = getSavePercent(totalComparePrice, totalPriceAfterDiscount);
        saveNumber = getSaveNumber(totalComparePrice, totalPriceAfterDiscount);
      } else {
        savePercent = getSavePercent(totalComparePrice, totalPrice);
        saveNumber = getSaveNumber(totalComparePrice, totalPrice);
      }
      return {
        savePercent,
        saveNumber
      };
    }

    function updateValueTagSaleInSection(savePercent, saveNumber) {
      const $atomTagSales = getDomOfProductTagSale();
      const saveValue = {
        savePercent,
        saveNumber
      };
      updateValueTagSale($atomTagSales, saveValue);
    }

    function updateValueTagSaleInStickyATC(savePercent, saveNumber) {
      const $atomTagSales = getDomOfProductTagSaleInStickyATC();
      const saveValue = {
        savePercent,
        saveNumber
      };
      updateValueTagSale($atomTagSales, saveValue);
    }

    function updateValueTagSale($atomTagSales, saveValue) {
      const {
        savePercent,
        saveNumber
      } = saveValue;
      if (!savePercent || !saveNumber) {
        hideBoxTagSale($atomTagSales);
        return;
      }
      for (let i = 0; i < $atomTagSales.length; i++) {
        const $item = $($atomTagSales[i]);
        const {
          $tagSalePercent,
          $tagSaleNumber
        } = getDomValueOfTagSale($item);
        const dataType = $item.attr("data-type");
        var $roundPercent = $item.attr("data-roundpercent");
        if (dataType == "percent") {
          let $tagSaleContentChange = $item.attr("data-label").replace("[!Profit!]", savePercent.toFixed($roundPercent) + "%");
          $tagSalePercent.html($tagSaleContentChange);
        } else {
          let $tagSaleContentChange = $item.attr("data-label").replace("[!Profit!]", formatMoney(saveNumber));
          $tagSaleNumber.html($tagSaleContentChange);
        }
        showTagSale($item);
      }
    }

    function showTagSale($atomTagSale) {
      const $boxSale = $atomTagSale.parents(".gt_box-sale");
      $boxSale.addClass("gt_active");
      $atomTagSale.addClass("gt_active");
    }

    function hideBoxTagSale($atomTagSale) {
      const $boxSale = $atomTagSale.parents(".gt_box-sale");
      $boxSale.removeClass("gt_active");
    }

    function renderTagSaleWhenNotSyncDiscount() {
      var totalComparePrice = getComparePriceByQuantity();
      var totalPrice = getPriceByQuantity();
      var savePercent = getSavePercent(totalComparePrice, totalPrice);
      var saveNumber = getSaveNumber(totalComparePrice, totalPrice);
      updateValueTagSaleInSection(savePercent, saveNumber);
      updateValueTagSaleInStickyATC(savePercent, saveNumber);
    }

    function getSavePercent(comparePriceTotal, priceTotal) {
      return ((comparePriceTotal - priceTotal) / comparePriceTotal) * 100;
    }

    function getSaveNumber(comparePriceTotal, priceTotal) {
      return comparePriceTotal - priceTotal;
    }

    function getPriceByQuantity() {
      const quantity = window.SOLID.store.getState("quantity" + productJson.id) || 1;
      return getPriceOfCurrentVariant() * quantity;
    }

    function getComparePriceByQuantity() {
      const quantity = window.SOLID.store.getState("quantity" + productJson.id) || 1;
      return getComparePriceOfCurrentVariant() * quantity;
    }

    function getPriceOfCurrentVariant() {
      const currentVariant = window.SOLID.store.getState("variant" + productJson.id) || {};
      return currentVariant.price;
    }

    function getComparePriceOfCurrentVariant() {
      const currentVariant = window.SOLID.store.getState("variant" + productJson.id) || {};
      return currentVariant.compare_at_price || currentVariant.price;
    }

    function renderPriceWhenSyncDiscount(quantity) {
      const {
        $atomProductPrice,
        $atomProductComparePrice,
        $atomProductPriceSticky,
        $atomProductComparePriceSticky
      } =
      getPriceDomInSectionProductAndStickyATC();
      const {
        totalPriceUpSell,
        totalComparePriceUpSell
      } = getTotalPriceAndComparePriceUpSell();
      $atomProductPrice.attr("data-currentprice", totalPriceUpSell / quantity);
      $atomProductPrice.html(formatMoney(totalPriceUpSell));
      $atomProductComparePrice.attr("data-currentprice", totalComparePriceUpSell / quantity);
      $atomProductComparePrice.html(formatMoney(totalComparePriceUpSell));
      if (totalComparePriceUpSell > totalPriceUpSell) {
        $atomProductComparePrice.addClass("gt_active");
      } else {
        $atomProductComparePrice.removeClass("gt_active");
      }
      var productJsonSticky = getProductJsonFromAddOnSticky();
      if (productJsonSticky && productJsonSticky.id === productJson.id) {
        $atomProductPriceSticky.attr("data-currentprice", totalPriceUpSell / quantity);
        $atomProductPriceSticky.html(formatMoney(totalPriceUpSell));
        $atomProductComparePriceSticky.attr("data-currentprice", totalComparePriceUpSell / quantity);
        $atomProductComparePriceSticky.html(formatMoney(totalComparePriceUpSell));
      }
    }

    function getTotalPriceAndComparePriceUpSell() {
      const currentVariant = window.SOLID.store.getState("variant" + productJson.id) || {};
      const quantity = window.SOLID.store.getState("quantity" + productJson.id) || 1;
      const originalPrice = currentVariant.price * quantity;
      let totalPriceUpSell = 0;
      const totalComparePriceUpSell = getComparePriceByQuantity();
      var applyDiscount = getActiveDiscountByQuantity(quantity);
      if (!applyDiscount) {
        totalPriceUpSell = getPriceByQuantity();
      } else {
        totalPriceUpSell = originalPrice - parseInt((originalPrice * applyDiscount.discount) / 100);
      }
      return {
        totalPriceUpSell,
        totalComparePriceUpSell
      };
    }

    function getActiveDiscountByQuantity(quantity) {
      var applyDiscount = null;
      discounts.forEach((item) => {
        if (item.quantity <= quantity) {
          applyDiscount = item;
        }
      });
      return applyDiscount;
    }

    function renderPriceWhenNotSyncDiscount(quantity) {
      const {
        $atomProductPrice,
        $atomProductComparePrice,
        $atomProductPriceSticky,
        $atomProductComparePriceSticky
      } =
      getPriceDomInSectionProductAndStickyATC();
      const atomPriceSyncDiscount = $atomProductPrice.parent().attr("sync-quantity-and-price") === "true";
      const price = getPriceByQuantity();
      const comparePrice = getComparePriceByQuantity();
      $atomProductPrice.attr("data-currentprice", price / quantity);
      $atomProductPrice.html(formatMoney(atomPriceSyncDiscount ? price : getPriceOfCurrentVariant()));
      $atomProductComparePrice.attr("data-currentprice", comparePrice / quantity);
      $atomProductComparePrice.html(formatMoney(atomPriceSyncDiscount ? comparePrice : getComparePriceOfCurrentVariant()));
      if (comparePrice > price) {
        $atomProductComparePrice.addClass("gt_active");
      } else {
        $atomProductComparePrice.remove("gt_active");
      }
      var productJsonSticky = getProductJsonFromAddOnSticky();
      if (productJsonSticky && productJsonSticky.id === productJson.id) {
        $atomProductPriceSticky.attr("data-currentprice", price / quantity);
        $atomProductPriceSticky.html(formatMoney(atomPriceSyncDiscount ? price : getPriceOfCurrentVariant()));
        $atomProductComparePriceSticky.attr("data-currentprice", comparePrice / quantity);
        $atomProductComparePriceSticky.html(formatMoney(atomPriceSyncDiscount ? comparePrice : getComparePriceOfCurrentVariant()));
      }
    }

    function getPriceDomInSectionProductAndStickyATC() {
      const $sectionProductDetail = $element.closest("section[data-name^='Product Details'], section[data-name^='Feature Product']");
      const $atomProductPrice = $sectionProductDetail.find(".gt_product-price--number");
      const $atomProductComparePrice = $sectionProductDetail.find(".gt_product-price--compare");
      const $atomProductPriceSticky = $(".sticky-cart-bar-container_infor_title_price_original .gt_product-price--number");
      const $atomProductComparePriceSticky = $(".sticky-cart-bar-container_infor_title_price_compare .gt_product-price--compare");
      return {
        $atomProductPrice,
        $atomProductComparePrice,
        $atomProductPriceSticky,
        $atomProductComparePriceSticky
      };
    }

    function getDomOfProductTagSale() {
      const $sectionProductDetail = $element.closest("section[data-name^='Product Details'], section[data-name^='Feature Product']");
      return $sectionProductDetail.find(".gt_product-tag-sale");
    }

    function getDomOfProductTagSaleInStickyATC() {
      const $addonStickyATC = $(".sticky-cart-bar-container");
      return $addonStickyATC.find(".gt_product-tag-sale");
    }

    function getDomValueOfTagSale($atomTagSale) {
      const $tagSalePercent = $atomTagSale.find(".gt_product-tag-sale--value--percent");
      const $tagSaleNumber = $atomTagSale.find(".gt_product-tag-sale--value--number");
      return {
        $tagSalePercent,
        $tagSaleNumber
      };
    }

    function getProductJsonFromAddOnSticky() {
      var $productStickyEl = $("div[data-name^='Sticky Add To Cart']");
      if ($productStickyEl.length) {
        var $productJsonSticky = $productStickyEl.find(".ProductJson");
        var productJsonSticky;
        try {
          productJsonSticky = JSON.parse($productJsonSticky.text());
        } catch (e) {}
      }
      return productJsonSticky;
    }

    function renderAtomPriceInSectionProductDetails() {
      var quantity = window.SOLID.store.getState("quantity" + productJson.id) || 1;
      if (syncDiscountPrice) {
        renderPriceWhenSyncDiscount(quantity);
        setTimeout(function() {
          renderTagSaleWhenSyncDiscount();
        }, 0);
      } else {
        renderPriceWhenNotSyncDiscount(quantity);
        setTimeout(function() {
          renderTagSaleWhenNotSyncDiscount();
        }, 0);
      }
    }

    function renderInSectionProductPreset2($discountItem, discountData) {
      renderDiscountValueInSectionProductPreset2($discountItem, discountData);
      renderDiscountQuantityInSectionProductPreset2($discountItem, discountData);
      addTagInSectionProductPreset2($discountItem, discountData);
      activeDiscountBoxWhenChangePreset();
      addEventClickDiscountBox($discountItem, discountData);
      listenQuantityChangeToSyncDiscount();
      renderAtomPriceInSectionProductDetails();
    }

    function renderDiscountValueInSectionProductPreset2($discountItem, discountData) {
      const $discountValue = $discountItem.find(".gt_upsell_container-item-discount-val");
      $discountValue.find(".gt_content-text-value").html(discountData.discount + "%");
    }

    function renderDiscountQuantityInSectionProductPreset2($discountItem, discountData) {
      const $quantity = $discountItem.find(".gt_upsell_container-item-quantity-val");
      $quantity.find(".gt_content-text-value").html(discountData.quantity);
    }

    function addTagInSectionProductPreset2($discountItem, discountData) {
      if (discountData.tag) {
        const $tag = $discountItem.find(".gt_upsell_container-item-tag");
        $tag.addClass("active");
        $tag.find(".gt_upsell_container-item-tag-val").html(discountData.tag);
      }
    }

    function activeDiscountBoxWhenChangePreset() {
      const currentQuantity = window.SOLID.store.getState("quantity" + productJson.id);
      const $otherDiscountBoxes = $discountPlace.find(".gt_upsell_container-item");
      if ($otherDiscountBoxes && $otherDiscountBoxes.length) {
        $otherDiscountBoxes.removeClass("active");
      }
      const applyDiscount = getActiveDiscountByQuantity(currentQuantity);
      if (applyDiscount) {
        const discountQuantity = applyDiscount.quantity;
        setTimeout(function() {
          const $activeDiscount = $discountPlace.find(`.gt_upsell_container-item[data-quantity="${discountQuantity}"]`);
          $activeDiscount.addClass("active");
        });
      }
    }

    function addEventClickDiscountBox($discountItem, discountData) {
      const $discountBox = $discountItem.find(".gt_upsell_container-item");
      $discountBox.attr("data-quantity", discountData.quantity);
      $discountBox.off("click.quantity").on("click.quantity", () => {
        activeDiscountBoxWhenClickDiscountBox($discountBox);
        window.SOLID.store.dispatch("quantity" + productJson.id, discountData.quantity);
        if (syncDiscountPrice) {
          renderPriceWhenClickDiscountBox(discountData);
        }
      });
    }

    function activeDiscountBoxWhenClickDiscountBox($discountBox) {
      const $otherDiscountBoxes = $discountPlace.find(".gt_upsell_container-item");
      if ($otherDiscountBoxes && $otherDiscountBoxes.length) {
        $otherDiscountBoxes.removeClass("active");
      }
      $discountBox.addClass("active");
    }

    function renderPriceWhenClickDiscountBox(discountData) {
      const {
        $atomProductPrice,
        $atomProductComparePrice,
        $atomProductPriceSticky,
        $atomProductComparePriceSticky
      } =
      getPriceDomInSectionProductAndStickyATC();
      const currentVariant = window.SOLID.store.getState("variant" + productJson.id);
      var comparePriceUpSell = "";
      var priceUpSell = "";
      var originalPrice = currentVariant.price * discountData.quantity;
      if (!currentVariant.compare_at_price) {
        comparePriceUpSell = currentVariant.price * discountData.quantity;
      } else {
        comparePriceUpSell = currentVariant.compare_at_price * discountData.quantity;
      }
      priceUpSell = originalPrice - parseInt((originalPrice * discountData.discount) / 100);
      $atomProductPrice.html(formatMoney(priceUpSell));
      $atomProductComparePrice.html(formatMoney(comparePriceUpSell));
      var productJsonSticky = getProductJsonFromAddOnSticky();
      if (productJsonSticky && productJsonSticky.id === productJson.id) {
        $atomProductPriceSticky.attr("data-currentprice", priceUpSell / discountData.quantity);
        $atomProductPriceSticky.html(formatMoney(priceUpSell));
        $atomProductComparePriceSticky.attr("data-currentprice", comparePriceUpSell / discountData.quantity);
        $atomProductComparePriceSticky.html(formatMoney(comparePriceUpSell));
      }
    }

    function activeDiscountWhenQuantityChange(quantity) {
      const $otherDiscountBoxes = $discountPlace.find(".gt_upsell_container-item");
      if ($otherDiscountBoxes && $otherDiscountBoxes.length) {
        $otherDiscountBoxes.removeClass("active");
      }
      const applyDiscount = getActiveDiscountByQuantity(quantity);
      if (applyDiscount) {
        const discountQuantity = applyDiscount.quantity;
        const $activeDiscount = $discountPlace.find(`.gt_upsell_container-item[data-quantity="${discountQuantity}"]`);
        $activeDiscount.addClass("active");
      }
    }

    function listenQuantityChangeToSyncDiscount() {
      window.SOLID.store.unsubscribe("quantity" + productJson.id + "@changePriceSyncDiscount" + indexEl);
      window.SOLID.store.subscribe("quantity" + productJson.id + "@changePriceSyncDiscount" + indexEl, (quantity) => {
        activeDiscountWhenQuantityChange(quantity);
        if (syncDiscountPrice) {
          renderPriceWhenSyncDiscount(quantity);
          setTimeout(function() {
            renderTagSaleWhenSyncDiscount();
          }, 0);
        } else {
          
        }
      });
    }

    function renderInProductPage($discountItem, discountData, discountIndex) {
      renderDiscountValueInProductPage($discountItem, discountData);
      renderDiscountQuantityInProductPage($discountItem, discountData);
      renderDiscountPriceInProductPage($discountItem, discountData);
      renderVariantSelectInProductPage($discountItem, discountData, discountIndex);
      addEventAddToCartInProductPage($discountItem, discountData, discountIndex);
      resetOriginalPriceInProductPrice();
    }

    function renderDiscountValueInProductPage($discountItem, discountData) {
      const $discountValue = $discountItem.find(".gt_upsell--discounts-item-info-value-discount");
      $discountValue.find(".gt_content-text-value").html(discountData.discount + "%");
    }

    function renderDiscountQuantityInProductPage($discountItem, discountData) {
      const $discountQuantity = $discountItem.find(".gt_upsell--discounts-item-info-quantity-value");
      $discountQuantity.find(".gt_content-text-value").html(discountData.quantity);
    }

    function renderDiscountPriceInProductPage($discountItem, discountData) {
      let currentVariant = window.SOLID.store.getState("variant" + productJson.id);
      if (!currentVariant && productJson.variants && productJson.variants.length) {
        currentVariant = productJson.variants.find((variant) => variant.available);
      }
      if (currentVariant) {
        const comparePrice = currentVariant.price * discountData.quantity;
        const price = comparePrice - parseInt((comparePrice * discountData.discount) / 100);
        $discountItem.find(".gt_upsell--discounts-item-info-value-price").html(formatMoney(price));
        $discountItem.find(".gt_upsell--discounts-item-info-value-price").attr("data-currentprice", price / 100);
        $discountItem.find(".gt_upsell--discounts-item-info-value-compare-price").html(formatMoney(comparePrice));
        $discountItem.find(".gt_upsell--discounts-item-info-value-compare-price").attr("data-currentprice", comparePrice / 100);
      }
    }

    function renderVariantSelectInProductPage($discountItem, discountData, discountIndex) {
      let $variantSelect;
      if (showVariantSelector) {
        if (discountIndex % 2 === 0) {
          $variantSelect = $discountItem.find(".gt_upsell_product_page-even-variant-select");
          renderVariantSelect($variantSelect, discountData);
        } else {
          $variantSelect = $discountItem.find(".gt_upsell_product_page-odd-variant-select");
          renderVariantSelect($variantSelect, discountData);
        }
      }
    }

    function addEventAddToCartInProductPage($discountItem, discountData, discountIndex) {
      let $variantSelect;
      if (showVariantSelector) {
        if (discountIndex % 2 === 0) {
          $variantSelect = $discountItem.find(".gt_upsell_product_page-even-variant-select");
        } else {
          $variantSelect = $discountItem.find(".gt_upsell_product_page-odd-variant-select");
        }
      }
      const $buttonATC = $discountItem.find(".gt_upsell--discounts-item-button");
      listenAddToCart(
        $buttonATC, {
          quantity: discountData.quantity,
          buttonIdx: discountIndex,
          code: discountData.code,
        },
        $variantSelect
      );
    }

    function renderItemsInCartItems() {
      //getproductid
      const $cartItem = $element.closest(".gt_cart-item, .gt_items--content");
      const productId = $cartItem.attr("data-product-id");
      const variantId = $cartItem.attr("data-variant-id");
      const productHandle = $cartItem.attr("data-product-handle");
      if (!productId) {
        return;
      }
      //getdiscounts
      const discounts = [];
      //showemptyupselloneditor
      if (!campaignSettings.length) {
        showProductUpsell([]);
        return;
      }
      //sortcampaignsbycampaignTypepriority:all<entitled(forspecifyproducts)
      campaignSettings = campaignSettings.sort(function(c1, c2) {
        return c1.price_rule.target_selection > c2.price_rule.target_selection ? 1 : -1;
      });
      //getcart
      const cart = window.SOLID.store.getState("cart");
      if (!cart && elementType === "section_cart") {
        return;
      }
      campaignSettings.forEach(function(campaign) {
        if (!campaign.price_rule) {
          return;
        }
        //completebeforetodayorstartedaftertoday=>disabled
        if ((campaign.started_at && !isBeforeToday(campaign.started_at)) || isBeforeToday(campaign.completed_at)) {
          return;
        }
        if (campaign.price_rule.target_type === "shipping_line") {
          return;
        }
        let campaignIncludeProduct;
        if (campaign.price_rule && campaign.price_rule.products && campaign.price_rule.products.length) {
          campaignIncludeProduct = campaign.price_rule.products.some((product) => String(product.id) === String(productId));
        }

        if (!(campaign.price_rule.target_selection === "all" || (campaign.price_rule.target_selection === "entitled" && campaignIncludeProduct))) {
          return;
        }

        let productQuantity = parseInt(campaign.price_rule.prerequisite_quantity_range?.greater_than_or_equal_to);
        const productDiscount = -parseInt(campaign.price_rule.value);
        //checkquantityitemexist
        let prodQuantityExistInCart = 0;
        if (cart && cart.items && cart.items.length) {
          cart.items.forEach((cartItem) => {
            if (String(cartItem.product_id) === String(productId)) {
              prodQuantityExistInCart += cartItem.quantity;
            }
          });
        }
        productQuantity = productQuantity - prodQuantityExistInCart;
        if (productQuantity <= 0 || productDiscount <= 0) {
          return;
        }

        discounts.push({
          title: "",
          quantity: productQuantity,
          discount: productDiscount,
          tag: campaign.tag,
          code: campaign.code,
        });
      });
      //sortdiscounts
      discounts.sort(function(a, b) {
        return a.quantity - b.quantity;
      });
      //render
      renderUpsellItemCartPage(discounts, {
        variantId,
        productId,
        productHandle
      });
    }

    function renderUpsellItemCartPage(discounts, productData) {
      clearContainer();
      const $showLess = $element.find(".gt_upsell_container-show-less");
      const $collapseItem = $element.find(".gt_upsell_container_cart-collapse");
      if (!discounts.length) {
        $collapseItem.removeClass("active");
        $showLess.removeClass("active");
      }
      if (discounts.length > 1) {
        const firstDiscount = discounts[0];
        //replace data vàoitemcollapse
        const $discountValue = $collapseItem.find(".gt_uqd_cart-collapse-discount");
        $discountValue.find(".gt_content-text-value").html(firstDiscount.discount + "%");
        const $quantityValue = $collapseItem.find(".gt_uqd_cart-collapse-quantity");
        $quantityValue.find(".gt_content-text-value").html(firstDiscount.quantity);
        const $moreDealTxt = $collapseItem.find(".gt_uqd_cart-collapse-dropdown-txt");
        const $moreDealIcon = $collapseItem.find(".gt_uqd_cart-collapse-dropdown-icon");
        // init view
        $collapseItem.addClass("active");
        $discountPlace.removeClass("active");
        $showLess.removeClass("active");
        //event
        $moreDealTxt.off("click.extend").on("click.extend", () => {
          $collapseItem.removeClass("active");
          $discountPlace.addClass("active");
          $showLess.addClass("active");
        });
        $moreDealIcon.off("click.extend").on("click.extend", () => {
          $collapseItem.removeClass("active");
          $discountPlace.addClass("active");
          $showLess.addClass("active");
        });
        $showLess.off("click.collapse").on("click.collapse", () => {
          $collapseItem.addClass("active");
          $discountPlace.removeClass("active");
          $showLess.removeClass("active");
        });
      }
      discounts.forEach((item, index) => {
        const $discountItemTemplate = $element.find(".gt_upsell_item-template").children();
        const $discountItem = $discountItemTemplate.clone();
        renderInCart($discountItem, item, index, productData);
        //appenddiscountitem
        $discountPlace.append($discountItem);
      });
      if (discounts.length === 1) {
        $discountPlace.addClass("active");
        $showLess.removeClass("active");
        $collapseItem.removeClass("active");
      }
    }

    function renderInCart($discountItem, discountData, discountIndex, productData) {
      const $discountValue = $discountItem.find(".gt_udq_cart_discount");
      $discountValue.find(".gt_content-text-value").html(discountData.discount + "%");
      const $quantityValue = $discountItem.find(".gt_udq_cart_quantity");
      $quantityValue.find(".gt_content-text-value").html(discountData.quantity);
      const $variantSelect = $discountItem.find(".gt_upsell_cart_container-item-variant");
      if (showVariantSelector) {
        if (mode === "dev") {
          renderVariantSelect($variantSelect, discountData, true);
          //addeventopenvariantselect
          if (showVariantSelector) {
            callEventInVariantSelectAtom();
          }
        } else {
          const productHandle = productData.productHandle;
          const promiseGetProduct = new Promise((resolve, reject) => {
            window.gfTheme.getProduct(
              productHandle,
              function(product) {
                resolve(product);
              },
              function() {
                resolve();
              }
            );
          });
          promiseGetProduct.then((product) => {
            renderVariantSelect($variantSelect, discountData, false, product);
            //addeventopenvariantselect
            if (showVariantSelector) {
              callEventInVariantSelectAtom();
            }
          });
        }
        //changez-indexofdiscountitemdom:
        $variantSelect.off("click.zIndex").on("click.zIndex", () => {
          $element.find(".gt_upsell_cart_container-item").css("z-index", "0");
          $discountItem.attr("style", "z-index: 1 !important;");
        });
      }
      //addeventaddtocart
      const $buttonATC = $discountItem.find(".gt_upsell_cart_container-item-button");
      listenAddToCart(
        $buttonATC, {
          quantity: discountData.quantity,
          buttonIdx: discountIndex,
          code: discountData.code,
        },
        $variantSelect,
        productData
      );
    }

    function renderVariantSelect($variantSelect, discountData, isDemo, productCartItem) {
      let productJsonData = productJson;
      if (isDemo) {
        productJsonData = getDemoProductJsonData();
      } else if (productCartItem) {
        productJsonData = productCartItem;
      }
      if (!productJsonData.variants?.length) {
        return;
      }
      clearOptionsInVariantSelect($variantSelect);
      renderHtmlForVariantSelect($variantSelect, discountData, productJsonData);
    }

    function getDemoProductJsonData() {
      return {
        variants: [{
            id: 1,
            title: "S / BLUE",
            available: true,
          },
          {
            id: 2,
            title: "S / LIGHT BLUE",
            available: true,
          },
          {
            id: 3,
            title: "S / RED",
            available: true,
          },
        ],
      };
    }

    function clearOptionsInVariantSelect($variantSelect) {
      const $variantPlace = $variantSelect.find(".gt_variant-select");
      $variantPlace.empty();
    }

    function renderHtmlForVariantSelect($variantSelect, discountData, productJsonData) {
      for (let itemIdx = 0; itemIdx < discountData.quantity; itemIdx++) {
        const $variantPlace = $variantSelect.find(".gt_variant-select");
        //cloneitem
        const $variantSelectItemTemp = $variantSelect.find(".gt_variant-select-item--template");
        const $variantSelectItem = $variantSelectItemTemp.clone();
        $variantSelectItem.removeClass("gt_variant-select-item--template");
        //replaceindexitem
        $variantSelectItem.find(".gt_variant-select-item-title--value-content").html("#" + (itemIdx + 1));
        //replacevalueselect
        const firstVariant = productJsonData.variants[0];
        const $variantChecked = $variantSelectItem.find(".gt_variant-select-item-option--selected-text");
        $variantChecked.html(firstVariant.title);
        $variantChecked.attr("data-id", firstVariant.id);
        //replaceoptions
        const $options = $variantSelectItem.find(".gt_variant-select-item-options");
        const $option = $variantSelectItem.find(".gt_variant-select-item-option");
        for (let varIdx = 0; varIdx < productJsonData.variants.length; varIdx++) {
          const variant = productJsonData.variants[varIdx];
          let $newOption = $option;
          if (varIdx !== 0) {
            $newOption = $option.clone();
            $newOption.removeClass("active");
            $newOption.removeClass("gt_disabled");
          }
          if (firstVariant.id == variant.id) {
            $newOption.addClass("active");
          }
          if (!variant.available) {
            $newOption.addClass("gt_disabled");
          }
          $newOption.attr("data-id", variant.id);
          $newOption.attr("data-title", variant.title);
          const $optionText = $newOption.find(".gt_variant-select-item-option--txt");
          $optionText.html(variant.title);
          if (varIdx !== 0) {
            $options.append($newOption);
          }
        }
        $variantPlace.append($variantSelectItem);
      }
    }

    function listenChangeVariant(preset) {
      if (!showVariantSelector) {
        var currentVariant = window.SOLID.store.getState("variant" + productJson.id) || {};
        checkSoldoutVariant(currentVariant);
        window.SOLID.store.unsubscribe("variant" + productJson.id + "@changeVariantUpsell" + indexEl);
        window.SOLID.store.subscribe("variant" + productJson.id + "@changeVariantUpsell" + indexEl, (variant) => {
          getDiscountsAndRender();
          checkSoldoutVariant(variant);
        });
      } else {
        window.SOLID.store.unsubscribe("variantSelectChangeValue@addonUpsell" + indexEl);
        window.SOLID.store.subscribe("variantSelectChangeValue@addonUpsell" + indexEl, (e) => {
          const $target = $(e.target);
          //tìmlênparentdiscountitem
          const $discountItem = $target.closest(".gt_upsell_container-item");
          const $selectedOptions = $discountItem.find(".gt_variant-select-item-option--selected-text");
          const selectedVariants = [];
          $selectedOptions.each(function() {
            const variantId = $(this).attr("data-id");
            if (variantId) {
              selectedVariants.push(variantId);
            }
          });
          let listSelectedVariants = selectedVariants.map((variantId) => {
            return productJson.variants.find((variant) => Number(variant.id) === Number(variantId));
          });
          //filternhữngtrườnghợpnull
          listSelectedVariants = listSelectedVariants.filter((variant) => variant);
          //replacelạipricevàcompare_price
          let totalPrice = 0;
          listSelectedVariants.forEach((variant) => {
            totalPrice += variant.price;
          });
          const discount = $discountItem.attr("data-discount");
          const price = totalPrice - parseInt((totalPrice * Number(discount)) / 100);
          //updatepricetheotừngloạipreset
          switch (preset) {
            case "section_product_1": {
              $discountItem.find(".gt_upsell-current-price").html(formatMoney(price));
              $discountItem.find(".gt_upsell-current-price").attr("data-currentprice", price / 100);
              $discountItem.find(".gt_upsell-compare-price").html(formatMoney(totalPrice));
              $discountItem.find(".gt_upsell-compare-price").attr("data-currentprice", totalPrice / 100);
              break;
            }
          }
        });
        window.SOLID.store.unsubscribe("variant" + productJson.id + "@changeVariantUpsell" + indexEl);
        window.SOLID.store.subscribe("variant" + productJson.id + "@changeVariantUpsell" + indexEl, () => {
          renderAtomPriceInSectionProductDetails();
        });
      }
    }

    function listenAddToCart($button, data, $variantSelect, dataCartPage) {
      setTimeout(() => {
        if (mode !== "production") {
          return;
        }
        const buttonId = id + "_buttonAddToCart";
        const buttonIdx = data.buttonIdx;
        const discountCode = data.code;
        if (showVariantSelector && $variantSelect && $variantSelect.length) {
          $button.off("click").on("click", (e) => {
            e.preventDefault();
            e.stopImmediatePropagation();
            const {
              error,
              properties
            } = getPropertiesFromForm($(e.target));
            if (error) {
              return;
            }
            const $selectedOptions = $variantSelect.find(".gt_variant-select-item-option--selected-text");
            const selectedVariants = [];
            $selectedOptions.each(function() {
              const variantId = $(this).attr("data-id");
              if (variantId) {
                selectedVariants.push(variantId);
              }
            });
            const variantsQuantityMap = selectedVariants.reduce((last, curr) => {
              const foundVariant = last.find((i) => i.id == curr);
              if (!foundVariant) {
                return [
                  ...last,
                  {
                    id: curr,
                    quantity: 1,
                    properties,
                  },
                ];
              }
              foundVariant.quantity += 1;
              return last;
            }, []);
            window.SOLID.store.dispatch("loading-buy-now-" + buttonId + "_" + buttonIdx, true);
            window.gfTheme.addManyItems({
                items: variantsQuantityMap,
              },
              function(_, error) {
                if (error) {
                  console.log("Error UQD V2 Add To Cart: ", error);
                  if (error && error.responseJSON && error.responseJSON.description) {
                    alert(error.responseJSON.description);
                  }
                } else {
                  window.gfTheme.getCart(function(cart) {
                    if (cart) {
                      window.SOLID.store.dispatch("cart.item_count", cart.item_count);
                    }
                    if (actionBuyRedirect === "cart") {
                      const addons = window.SOLID.store.getState("addons");
                      if (addons && addons.cart_drawer && addons.cart_drawer.autoOpenCartDrawer && window.location.pathname !== "/cart") {
                        window.SOLID.store.dispatch("openCartPopup", "cart_drawer");
                      } else {
                        window.location.href = "/cart";
                      }
                    } else if (actionBuyRedirect === "checkout") {
                      const parser = document.createElement("a");
                      const url = window.location.href;
                      parser.href = url;
                      let checkoutURL = parser.protocol + "//" + parser.host + "/checkout";
                      const applyDiscount = window.SOLID.store.getState("discount");
                      if (applyDiscount && applyDiscount.title) {
                        checkoutURL += "?discount=" + applyDiscount.title;
                      } else if (discountCode) {
                        //trongtrườnghợpsửdụngvớithemekhác
                        checkoutURL += "?discount=" + discountCode;
                      }
                      window.location.href = checkoutURL;
                    } else {
                      //stayonpage&opencartdrawer
                      if (window.location.pathname === "/cart") {
                        window.location.href = "/cart";
                      } else {
                        window.SOLID.store.dispatch("openCartPopup", "cart_drawer");
                      }
                    }
                  });
                }
                window.SOLID.store.dispatch("loading-buy-now-" + buttonId + "_" + buttonIdx, false);
              }
            );
          });
        } else if (dataCartPage) {
          const variantId = dataCartPage.variantId;
          const actions = [{
            id: 1,
            event: "click",
            control: {
              id: "1",
              attribute: "1",
              type: "pickproduct",
              value: {
                variantId: variantId,
                quantity: data.quantity,
              },
            },
          }, ];
          if (actionBuyRedirect === "cart") {
            actions.push({
              id: 2,
              event: "click",
              control: {
                id: "2",
                attribute: "2",
                type: "picklink",
                value: "/cart",
              },
            });
          } else if (actionBuyRedirect === "checkout") {
            actions.push({
              id: 2,
              event: "click",
              control: {
                id: "2",
                attribute: "2",
                type: "picklink",
                value: "/checkout",
              },
            });
          }
          $button.customEvent(actions, buttonId + "_" + buttonIdx);
        } else {
          const currentVariant = window.SOLID.store.getState("variant" + productJson.id);
          const actions = [{
            id: 1,
            event: "click",
            control: {
              id: "1",
              attribute: "1",
              type: "pickproduct",
              value: {
                variantId: currentVariant.id,
                quantity: data.quantity,
              },
            },
          }, ];
          if (actionBuyRedirect === "cart") {
            actions.push({
              id: 2,
              event: "click",
              control: {
                id: "2",
                attribute: "2",
                type: "picklink",
                value: "/cart",
              },
            });
            $button.customEvent(actions, buttonId + "_" + buttonIdx);
          } else if (actionBuyRedirect === "checkout") {
            const applyDiscount = window.SOLID.store.getState("discount");
            if (applyDiscount && applyDiscount.title) {
              actions.push({
                id: 2,
                event: "click",
                control: {
                  id: "2",
                  attribute: "2",
                  type: "picklink",
                  value: "/checkout",
                },
              });
              $button.customEvent(actions, buttonId + "_" + buttonIdx);
            } else {
              //trongtrườnghợpsửdụngvớithemekhác
              $button.off("click").on("click", (e) => {
                e.preventDefault();
                e.stopImmediatePropagation();
                const {
                  error,
                  properties
                } = getPropertiesFromForm($(e.target));
                if (error) {
                  return;
                }
                const currentVariant = window.SOLID.store.getState("variant" + productJson.id);
                window.SOLID.store.dispatch("loading-buy-now-" + buttonId + "_" + buttonIdx, true);
                window.gfTheme.addItem(
                  currentVariant.id,
                  data.quantity,
                  function(_, error) {
                    if (error) {
                      window.SOLID.store.dispatch("loading-buy-now-" + buttonId + "_" + buttonIdx, false);
                      console.log("Error UQD V2 Add To Cart: ", error);
                      if (error && error.responseJSON && error.responseJSON.description) {
                        alert(error.responseJSON.description);
                      }
                    } else {
                      const parser = document.createElement("a");
                      const url = window.location.href;
                      parser.href = url;
                      let checkoutURL = parser.protocol + "//" + parser.host + "/checkout";
                      if (discountCode) {
                        //trongtrườnghợpsửdụngvớithemekhác
                        checkoutURL += "?discount=" + discountCode;
                      }
                      window.location.href = checkoutURL;
                    }
                  },
                  properties
                );
              });
            }
          } else {
            $button.customEvent(actions, buttonId + "_" + buttonIdx);
          }
        }
        /*Listenifisbuttonaddtocard*/
        window.SOLID.store.subscribe("loading-buy-now-" + buttonId + "_" + buttonIdx, function(isDisplay) {
          const $loadingEl = $button.find(".atom-button-loading-circle-loader");
          const $textEl = $button.find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              window.SOLID.store.dispatch("loading-buy-now-" + buttonId + "_" + buttonIdx, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                window.SOLID.store.dispatch("loading-buy-now-" + buttonId + "_" + buttonIdx, "");
              }, 3000);
            }
          }
        });
      }, 10);
    }

    function checkSoldoutVariant(variant) {
      $buttonATCs = $element.find(".gt_upsell-add-to-cart");
      if (!variant.available) {
        $buttonATCs.addClass("gt_sold_out");
      } else {
        $buttonATCs.removeClass("gt_sold_out");
      }
    }

    function formatMoney(price) {
      if (price) {
        var dataCurrency = window.SOLID.store.getState("dataCurrency");
        var formatPrice = 0;
        if (dataCurrency) {
          formatPrice = Shopify.gemFormatMoney(price, dataCurrency.currency, dataCurrency.data);
        } else {
          var _formatMoney = __GemSettings.money;
          formatPrice = Shopify.formatMoney(price, _formatMoney);
        }
        return formatPrice;
      }
      return "";
    }

    function getPropertiesFromForm($target) {
      const $form = $target.closest("form");
      if ($form && $form.length && !$form[0].checkValidity()) {
        $form[0].reportValidity && $form[0].reportValidity();
        return {
          error: true,
          properties: {},
        };
      }
      let properties = {};
      const $propertyInputs = $form.find("input[name^='properties[']");
      if ($propertyInputs && $propertyInputs.length) {
        for (let j = 0; j < $propertyInputs.length; j++) {
          const $propertyInput = $($propertyInputs[j]);
          const attributeName = $propertyInput.attr("name");
          const splits = attributeName.match(/\[(.+)\]/);
          if (splits && splits.length >= 2 && $propertyInput.val()) {
            const propertyName = splits[1];
            properties[propertyName] = $propertyInput.val();
          }
        }
      }
      return {
        error: false,
        properties,
      };
    }

    function resetOriginalPriceInProductPrice() {
      const quantity = window.SOLID.store.getState("quantity" + productJson.id) || 1;
      renderPriceWhenNotSyncDiscount(quantity);
      renderTagSaleWhenNotSyncDiscount();
    }
    /* init block script */
    initScript();
    /* store subscribe block script */
    store.subscribe("esDiscountsData", initScript);

    function destroy() {
      store.unsubscribe("esDiscountsData", initScript);
    }
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /* global block script */
  var timeoutClearReRender;
  var elementType = "section_product";

  function reRenderInCart() {
    clearTimeout(timeoutClearReRender);
    timeoutClearReRender = setTimeout(() => {
      $elements = document.querySelectorAll(elementClassName);
      main();
    }, 100);
  }
  if (elementType === "cart_drawer") {
    window.SOLID.store.subscribe("rerenderingAjaxShopifyCartDrawer", function(isRendering) {
      if (!isRendering) {
        reRenderInCart();
      }
    });
    window.SOLID.store.subscribe("gtCartInput", function() {
      reRenderInCart();
    });
  }
  if (elementType === "section_cart") {
    window.SOLID.store.subscribe("cart", function() {
      reRenderInCart();
    });
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESWidgetXB1E3G9gG01qJdU()
      } catch(e) {
        console.error("Error ESWidget Id: XB1E3G9gG01qJdU" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxContainer = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxContainer";
  var id = "XB1E3G9gG01qJdU_boxContainer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxContainer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxContainer()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxContainer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxDiscountItem = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxDiscountItem";
  var id = "XB1E3G9gG01qJdU_boxDiscountItem";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxDiscountItem",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxDiscountItem()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxDiscountItem" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxLeft = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxLeft";
  var id = "XB1E3G9gG01qJdU_boxLeft";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxLeft",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxLeft()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxLeft" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxContent = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxContent";
  var id = "XB1E3G9gG01qJdU_boxContent";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxContent",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxContent()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxContent" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_discountIcon = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_discountIcon";
  var id = "XB1E3G9gG01qJdU_discountIcon";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_discountIcon",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_discountIcon()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_discountIcon" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxContentValue = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxContentValue";
  var id = "XB1E3G9gG01qJdU_boxContentValue";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxContentValue",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxContentValue()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxContentValue" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxPrice = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxPrice";
  var id = "XB1E3G9gG01qJdU_boxPrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxPrice",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxPrice()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxPrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_valueText = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_valueText";
  var id = "XB1E3G9gG01qJdU_valueText";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_valueText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_valueText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_valueText()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_valueText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxPriceDetail = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxPriceDetail";
  var id = "XB1E3G9gG01qJdU_boxPriceDetail";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxPriceDetail",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxPriceDetail()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxPriceDetail" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_priceText = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_priceText";
  var id = "XB1E3G9gG01qJdU_priceText";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_priceText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_priceText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_priceText()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_priceText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_comparePrice = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_comparePrice";
  var id = "XB1E3G9gG01qJdU_comparePrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_comparePrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_comparePrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_comparePrice()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_comparePrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_variantSelect = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_variantSelect";
  var id = "XB1E3G9gG01qJdU_variantSelect";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var mode = "production";
    var animationActive = "false";
    var $variantItemTemp = $element.find(".gt_variant-select-item--template");
    var $variantsPlace = $element.find(".gt_variant-select");
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (animationActive === "true") {
        var interactionScrollIntoView = `""`;
        window.SOLID.library.animation({
          elementId: id,
          $doms: $elements,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function onOpenSelectDropdown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $selectedVariants = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      $selectedVariants
        .off("click.openSelect")
        .on("click.openSelect", function() {
          $variantSelected.removeClass("gt_active");
          var $options = $(this).siblings(".gt_variant-select-item-options");
          if ($options.hasClass("gt_active")) {
            $options.css("top", "");
            $options.removeClass("gt_active");
            $(this).removeClass("gt_active");
            $(document).off("mousedown.outsideClickVariantSelect");
          } else {
            $variantOptions.removeClass("gt_active");
            $options.addClass("gt_active");
            $(this).addClass("gt_active");
            var optionsOuterHeight = $options.outerHeight();
            var selectInputHeight = $variantSelected.outerHeight();
            var positionOptions =
              $options.offset().top -
              $(document).scrollTop() +
              optionsOuterHeight;
            var windowHeight = $(window).outerHeight();
            if (positionOptions > windowHeight) {
              const currentTopOptions = $options.css("top");
              const newTop =
                "calc( " +
                currentTopOptions +
                " - " +
                optionsOuterHeight +
                "px" +
                " - " +
                (Number(selectInputHeight) + 10) +
                "px" +
                " )";
              $options.css("top", newTop);
            }
            //addeventclickoutsidetoclose
            const $currentTargetOptions = $(this);
            $(document)
              .off("mousedown.outsideClickVariantSelect")
              .on("mousedown.outsideClickVariantSelect", function(event) {
                if (
                  $options &&
                  $options.length &&
                  $currentTargetOptions &&
                  $currentTargetOptions.length
                ) {
                  const $optionsPure = $options[0];
                  if (
                    $optionsPure &&
                    !$optionsPure.contains(event.target) &&
                    !$currentTargetOptions[0].contains(event.target)
                  ) {
                    $options.css("top", "");
                    $options.removeClass("gt_active");
                    $currentTargetOptions.removeClass("gt_active");
                    $(document).off("mousedown.outsideClickVariantSelect");
                  }
                }
              });
          }
        });
    }

    function onClickSelectDropDown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $elementOptions = $element.find(".gt_variant-select-item-option");
      $elementOptions
        .off("click.selectItem")
        .on("click.selectItem", function() {
          $variantSelected.removeClass("gt_active");
          $variantOptions.removeClass("gt_active");
          $(this)
            .siblings(".gt_variant-select-item-option")
            .removeClass("active");
          $(this).addClass("active");
          var title = $(this).attr("data-title");
          var id = $(this).attr("data-id");
          var $variantSelectedCurrent = $(this).closest(
            ".gt_variant-select-item--checked"
          );
          var $valueVariantSelected = $variantSelectedCurrent.find(
            ".gt_variant-select-item-option--selected-text"
          );
          $valueVariantSelected.html(title);
          $valueVariantSelected.attr("data-id", id);
          //triggereventchangevalue
          window.SOLID.store.dispatch("variantSelectChangeValue", {
            target: this,
            value: id,
          });
        });
    }

    function onToggleContentSelect() {
      const $title = $element.find(".gt_variant-select-title");
      $title.off("click.toggleContent").on("click.toggleContent", function() {
        const $contentSelect = $(this).siblings(".gt_variant-select");
        if ($contentSelect.hasClass("active")) {
          $contentSelect.removeClass("active");
          $(this).removeClass("active");
        } else {
          $contentSelect.addClass("active");
          $(this).addClass("active");
        }
      });
    }

    function addEventSelect() {
      onOpenSelectDropdown();
      onClickSelectDropDown();
      onToggleContentSelect();
    }

    function getVariantItem() {
      const $variantItem = $variantItemTemp.clone();
      $variantItem.removeClass("gt_variant-select-item--template");
      return $variantItem;
    }
    /* init block script */
    animation();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      addEventSelect,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_variantSelect()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_variantSelect" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_buttonAddToCart = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_buttonAddToCart";
  var id = "XB1E3G9gG01qJdU_buttonAddToCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var scrollIntoViewActive = 'false' == 'true';
    var animationActive = 'false' == 'true';
    var animationHoverActive = 'false' == 'true';
    var scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var mode = 'production';
    var previewSoldOut = 'false';
    var actions = '[{"control":{"attribute":"1","desc":"","id":"1","reference":"html","title":"Pick Product","type":"pickproduct","value":{"id":0,"quantity":0}},"event":"click","id":1}]';
    
    var activeButtonFixContent = "true" === "true";
    var buttonFixContent = "Buy [!quantity!] Items";
    var disableListenSoldOut = "true" === "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_buttonAddToCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        };
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover",
          };
        }
        window.SOLID.library.animation(settings);
      }
    }

    function eventChangeTextInIframe() {
      
    }

    function eventListenSoldOut() {
      if (mode !== "production") {
        if (previewSoldOut === "false") {
          window.SOLID.library.gtBuyProductListenSoldOut({
            $element: $($element)[0],
            options: {
              isButtonAddToCard: true,
              textAddToCard: "Buy 2 Items!",
              textSoldOut: "Sold out",
            },
            mode: "dev"
          });
        }
      } else {
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $($element)[0],
          options: {
            isButtonAddToCard: true,
            textAddToCard: "Buy 2 Items!",
            textSoldOut: "Sold out",
          },
        });
      }
    }

    function addActionEvent() {
      // function customEvent(actions,id,key)
      if (mode === "production") {
        $($element).customEvent(
          JSON.parse(actions),
          'XB1E3G9gG01qJdU_buttonAddToCart' + '_' + indexEl
        );
      }
      /*Listenifisbuttonaddtocard*/
      store.subscribe(
        "loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCart" + "_" + indexEl,
        function(isDisplay) {
          const $loadingEl = $($element).find(
            ".atom-button-loading-circle-loader"
          );
          const $textEl = $($element).find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCart", "");
              store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCart" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl
                .find(".atom-button-loading-check-mark")
                .css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl
                  .find(".atom-button-loading-check-mark")
                  .removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCart", "");
                store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCart" + "_" + indexEl, "");
              }, 3000);
            }
          }
        }
      );
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    if (activeButtonFixContent) {
      initFixContent();
    }
    addInteraction();
    addActionEvent();
    if (!disableListenSoldOut) {
      eventListenSoldOut();
    }
    eventChangeTextInIframe();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      eventListenSoldOut,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_buttonAddToCart()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_buttonAddToCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxContainerSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxContainerSectionProduct2";
  var id = "XB1E3G9gG01qJdU_boxContainerSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxContainerSectionProduct2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxContainerSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxContainerSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxColumnSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxColumnSectionProduct2";
  var id = "XB1E3G9gG01qJdU_boxColumnSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxColumnSectionProduct2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxColumnSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxColumnSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxDiscountItemSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxDiscountItemSectionProduct2";
  var id = "XB1E3G9gG01qJdU_boxDiscountItemSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxDiscountItemSectionProduct2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxDiscountItemSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxDiscountItemSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxTagSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxTagSectionProduct2";
  var id = "XB1E3G9gG01qJdU_boxTagSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxTagSectionProduct2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxTagSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxTagSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_tagTextSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_tagTextSectionProduct2";
  var id = "XB1E3G9gG01qJdU_tagTextSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_tagTextSectionProduct2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_tagTextSectionProduct2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_tagTextSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_tagTextSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxQuantityValueSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxQuantityValueSectionProduct2";
  var id = "XB1E3G9gG01qJdU_boxQuantityValueSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxQuantityValueSectionProduct2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxQuantityValueSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxQuantityValueSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_quantityTextSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_quantityTextSectionProduct2";
  var id = "XB1E3G9gG01qJdU_quantityTextSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "Buy [!quantity!] items"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_quantityTextSectionProduct2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_quantityTextSectionProduct2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_quantityTextSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_quantityTextSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxValueSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxValueSectionProduct2";
  var id = "XB1E3G9gG01qJdU_boxValueSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxValueSectionProduct2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxValueSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxValueSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_discountValueTextSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_discountValueTextSectionProduct2";
  var id = "XB1E3G9gG01qJdU_discountValueTextSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "More [!discount!] Off"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_discountValueTextSectionProduct2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_discountValueTextSectionProduct2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_discountValueTextSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_discountValueTextSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxContainerCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxContainerCartDrawer";
  var id = "XB1E3G9gG01qJdU_boxContainerCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxContainerCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxContainerCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxContainerCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxCollapseCart = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxCollapseCart";
  var id = "XB1E3G9gG01qJdU_boxCollapseCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxCollapseCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxCollapseCart()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxCollapseCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxContentValueCollapseCart = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxContentValueCollapseCart";
  var id = "XB1E3G9gG01qJdU_boxContentValueCollapseCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxContentValueCollapseCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxContentValueCollapseCart()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxContentValueCollapseCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_discountIconCollapseCart = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_discountIconCollapseCart";
  var id = "XB1E3G9gG01qJdU_discountIconCollapseCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_discountIconCollapseCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_discountIconCollapseCart()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_discountIconCollapseCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_quantityTextCollapseCart = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_quantityTextCollapseCart";
  var id = "XB1E3G9gG01qJdU_quantityTextCollapseCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "[!quantity!] items"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_quantityTextCollapseCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_quantityTextCollapseCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_quantityTextCollapseCart()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_quantityTextCollapseCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_discountTextCollapseCart = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_discountTextCollapseCart";
  var id = "XB1E3G9gG01qJdU_discountTextCollapseCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "get [!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_discountTextCollapseCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_discountTextCollapseCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_discountTextCollapseCart()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_discountTextCollapseCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_showMoreCart = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_showMoreCart";
  var id = "XB1E3G9gG01qJdU_showMoreCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_showMoreCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_showMoreCart()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_showMoreCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_dropdownTextCollapseCart = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_dropdownTextCollapseCart";
  var id = "XB1E3G9gG01qJdU_dropdownTextCollapseCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_dropdownTextCollapseCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_dropdownTextCollapseCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_dropdownTextCollapseCart()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_dropdownTextCollapseCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_iconDropdownCollapseCart = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_iconDropdownCollapseCart";
  var id = "XB1E3G9gG01qJdU_iconDropdownCollapseCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_iconDropdownCollapseCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_iconDropdownCollapseCart()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_iconDropdownCollapseCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxListDiscount = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxListDiscount";
  var id = "XB1E3G9gG01qJdU_boxListDiscount";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxListDiscount",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxListDiscount()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxListDiscount" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxDiscountItemCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxDiscountItemCartDrawer";
  var id = "XB1E3G9gG01qJdU_boxDiscountItemCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxDiscountItemCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxDiscountItemCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxDiscountItemCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxLeftCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxLeftCartDrawer";
  var id = "XB1E3G9gG01qJdU_boxLeftCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxLeftCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxLeftCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxLeftCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxContentCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxContentCartDrawer";
  var id = "XB1E3G9gG01qJdU_boxContentCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxContentCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxContentCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxContentCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_discountIconCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_discountIconCartDrawer";
  var id = "XB1E3G9gG01qJdU_discountIconCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_discountIconCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_discountIconCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_discountIconCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxContentValueCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxContentValueCartDrawer";
  var id = "XB1E3G9gG01qJdU_boxContentValueCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxContentValueCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxContentValueCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxContentValueCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxQuantityCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxQuantityCartDrawer";
  var id = "XB1E3G9gG01qJdU_boxQuantityCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxQuantityCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxQuantityCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxQuantityCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_quantityTextCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_quantityTextCartDrawer";
  var id = "XB1E3G9gG01qJdU_quantityTextCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "[!quantity!] items"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_quantityTextCartDrawer",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_quantityTextCartDrawer",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_quantityTextCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_quantityTextCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_discountTextCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_discountTextCartDrawer";
  var id = "XB1E3G9gG01qJdU_discountTextCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "get [!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_discountTextCartDrawer",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_discountTextCartDrawer",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_discountTextCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_discountTextCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_variantSelectCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_variantSelectCartDrawer";
  var id = "XB1E3G9gG01qJdU_variantSelectCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var mode = "production";
    var animationActive = "false";
    var $variantItemTemp = $element.find(".gt_variant-select-item--template");
    var $variantsPlace = $element.find(".gt_variant-select");
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (animationActive === "true") {
        var interactionScrollIntoView = `""`;
        window.SOLID.library.animation({
          elementId: id,
          $doms: $elements,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function onOpenSelectDropdown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $selectedVariants = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      $selectedVariants
        .off("click.openSelect")
        .on("click.openSelect", function() {
          $variantSelected.removeClass("gt_active");
          var $options = $(this).siblings(".gt_variant-select-item-options");
          if ($options.hasClass("gt_active")) {
            $options.css("top", "");
            $options.removeClass("gt_active");
            $(this).removeClass("gt_active");
            $(document).off("mousedown.outsideClickVariantSelect");
          } else {
            $variantOptions.removeClass("gt_active");
            $options.addClass("gt_active");
            $(this).addClass("gt_active");
            var optionsOuterHeight = $options.outerHeight();
            var selectInputHeight = $variantSelected.outerHeight();
            var positionOptions =
              $options.offset().top -
              $(document).scrollTop() +
              optionsOuterHeight;
            var windowHeight = $(window).outerHeight();
            if (positionOptions > windowHeight) {
              const currentTopOptions = $options.css("top");
              const newTop =
                "calc( " +
                currentTopOptions +
                " - " +
                optionsOuterHeight +
                "px" +
                " - " +
                (Number(selectInputHeight) + 10) +
                "px" +
                " )";
              $options.css("top", newTop);
            }
            //addeventclickoutsidetoclose
            const $currentTargetOptions = $(this);
            $(document)
              .off("mousedown.outsideClickVariantSelect")
              .on("mousedown.outsideClickVariantSelect", function(event) {
                if (
                  $options &&
                  $options.length &&
                  $currentTargetOptions &&
                  $currentTargetOptions.length
                ) {
                  const $optionsPure = $options[0];
                  if (
                    $optionsPure &&
                    !$optionsPure.contains(event.target) &&
                    !$currentTargetOptions[0].contains(event.target)
                  ) {
                    $options.css("top", "");
                    $options.removeClass("gt_active");
                    $currentTargetOptions.removeClass("gt_active");
                    $(document).off("mousedown.outsideClickVariantSelect");
                  }
                }
              });
          }
        });
    }

    function onClickSelectDropDown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $elementOptions = $element.find(".gt_variant-select-item-option");
      $elementOptions
        .off("click.selectItem")
        .on("click.selectItem", function() {
          $variantSelected.removeClass("gt_active");
          $variantOptions.removeClass("gt_active");
          $(this)
            .siblings(".gt_variant-select-item-option")
            .removeClass("active");
          $(this).addClass("active");
          var title = $(this).attr("data-title");
          var id = $(this).attr("data-id");
          var $variantSelectedCurrent = $(this).closest(
            ".gt_variant-select-item--checked"
          );
          var $valueVariantSelected = $variantSelectedCurrent.find(
            ".gt_variant-select-item-option--selected-text"
          );
          $valueVariantSelected.html(title);
          $valueVariantSelected.attr("data-id", id);
          //triggereventchangevalue
          window.SOLID.store.dispatch("variantSelectChangeValue", {
            target: this,
            value: id,
          });
        });
    }

    function onToggleContentSelect() {
      const $title = $element.find(".gt_variant-select-title");
      $title.off("click.toggleContent").on("click.toggleContent", function() {
        const $contentSelect = $(this).siblings(".gt_variant-select");
        if ($contentSelect.hasClass("active")) {
          $contentSelect.removeClass("active");
          $(this).removeClass("active");
        } else {
          $contentSelect.addClass("active");
          $(this).addClass("active");
        }
      });
    }

    function addEventSelect() {
      onOpenSelectDropdown();
      onClickSelectDropDown();
      onToggleContentSelect();
    }

    function getVariantItem() {
      const $variantItem = $variantItemTemp.clone();
      $variantItem.removeClass("gt_variant-select-item--template");
      return $variantItem;
    }
    /* init block script */
    animation();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      addEventSelect,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_variantSelectCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_variantSelectCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_buttonAddToCartCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_buttonAddToCartCartDrawer";
  var id = "XB1E3G9gG01qJdU_buttonAddToCartCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var scrollIntoViewActive = 'false' == 'true';
    var animationActive = 'false' == 'true';
    var animationHoverActive = 'false' == 'true';
    var scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var mode = 'production';
    var previewSoldOut = 'false';
    var actions = '[{"control":{"attribute":"1","desc":"","id":"1","reference":"html","title":"Pick Product","type":"pickproduct","value":{"id":0,"quantity":0}},"event":"click","id":1}]';
    
    var activeButtonFixContent = "false" === "true";
    var buttonFixContent = "Buy [!quantity!] items";
    var disableListenSoldOut = "true" === "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_buttonAddToCartCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        };
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover",
          };
        }
        window.SOLID.library.animation(settings);
      }
    }

    function eventChangeTextInIframe() {
      
    }

    function eventListenSoldOut() {
      if (mode !== "production") {
        if (previewSoldOut === "false") {
          window.SOLID.library.gtBuyProductListenSoldOut({
            $element: $($element)[0],
            options: {
              isButtonAddToCard: true,
              textAddToCard: "Add",
              textSoldOut: "Sold out",
            },
            mode: "dev"
          });
        }
      } else {
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $($element)[0],
          options: {
            isButtonAddToCard: true,
            textAddToCard: "Add",
            textSoldOut: "Sold out",
          },
        });
      }
    }

    function addActionEvent() {
      // function customEvent(actions,id,key)
      if (mode === "production") {
        $($element).customEvent(
          JSON.parse(actions),
          'XB1E3G9gG01qJdU_buttonAddToCartCartDrawer' + '_' + indexEl
        );
      }
      /*Listenifisbuttonaddtocard*/
      store.subscribe(
        "loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCartCartDrawer" + "_" + indexEl,
        function(isDisplay) {
          const $loadingEl = $($element).find(
            ".atom-button-loading-circle-loader"
          );
          const $textEl = $($element).find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCartCartDrawer", "");
              store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCartCartDrawer" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl
                .find(".atom-button-loading-check-mark")
                .css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl
                  .find(".atom-button-loading-check-mark")
                  .removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCartCartDrawer", "");
                store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCartCartDrawer" + "_" + indexEl, "");
              }, 3000);
            }
          }
        }
      );
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    if (activeButtonFixContent) {
      initFixContent();
    }
    addInteraction();
    addActionEvent();
    if (!disableListenSoldOut) {
      eventListenSoldOut();
    }
    eventChangeTextInIframe();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      eventListenSoldOut,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_buttonAddToCartCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_buttonAddToCartCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_showLessCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_showLessCartDrawer";
  var id = "XB1E3G9gG01qJdU_showLessCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_showLessCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_showLessCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_showLessCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_lessDealTextCart = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_lessDealTextCart";
  var id = "XB1E3G9gG01qJdU_lessDealTextCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_lessDealTextCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_lessDealTextCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_lessDealTextCart()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_lessDealTextCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_iconLessDealTextCart = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_iconLessDealTextCart";
  var id = "XB1E3G9gG01qJdU_iconLessDealTextCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_iconLessDealTextCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_iconLessDealTextCart()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_iconLessDealTextCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxContainerProductPage = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxContainerProductPage";
  var id = "XB1E3G9gG01qJdU_boxContainerProductPage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxContainerProductPage",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxContainerProductPage()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxContainerProductPage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxHeadingProductPage = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxHeadingProductPage";
  var id = "XB1E3G9gG01qJdU_boxHeadingProductPage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxHeadingProductPage",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxHeadingProductPage()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxHeadingProductPage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_buyMoreProductPage = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_buyMoreProductPage";
  var id = "XB1E3G9gG01qJdU_buyMoreProductPage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_buyMoreProductPage",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_buyMoreProductPage",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_buyMoreProductPage()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_buyMoreProductPage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_saveMoreProductPage = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_saveMoreProductPage";
  var id = "XB1E3G9gG01qJdU_saveMoreProductPage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_saveMoreProductPage",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_saveMoreProductPage",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_saveMoreProductPage()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_saveMoreProductPage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxDiscountsProductPage = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxDiscountsProductPage";
  var id = "XB1E3G9gG01qJdU_boxDiscountsProductPage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxDiscountsProductPage",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxDiscountsProductPage()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxDiscountsProductPage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxDiscountItemProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxDiscountItemProductPageEven";
  var id = "XB1E3G9gG01qJdU_boxDiscountItemProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxDiscountItemProductPageEven",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxDiscountItemProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxDiscountItemProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxDiscountProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxDiscountProductPageEven";
  var id = "XB1E3G9gG01qJdU_boxDiscountProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxDiscountProductPageEven",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxDiscountProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxDiscountProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxQuantityValueProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxQuantityValueProductPageEven";
  var id = "XB1E3G9gG01qJdU_boxQuantityValueProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxQuantityValueProductPageEven",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxQuantityValueProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxQuantityValueProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_quantityTextProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_quantityTextProductPageEven";
  var id = "XB1E3G9gG01qJdU_quantityTextProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "+[!quantity!]"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_quantityTextProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_quantityTextProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_quantityTextProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_quantityTextProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxValueProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxValueProductPageEven";
  var id = "XB1E3G9gG01qJdU_boxValueProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxValueProductPageEven",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxValueProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxValueProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_discountValueTextProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_discountValueTextProductPageEven";
  var id = "XB1E3G9gG01qJdU_discountValueTextProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "Get [!discount!] Off"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_discountValueTextProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_discountValueTextProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_discountValueTextProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_discountValueTextProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxPriceDetailEven = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxPriceDetailEven";
  var id = "XB1E3G9gG01qJdU_boxPriceDetailEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxPriceDetailEven",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxPriceDetailEven()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxPriceDetailEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_priceProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_priceProductPageEven";
  var id = "XB1E3G9gG01qJdU_priceProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_priceProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_priceProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_priceProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_priceProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_comparePriceProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_comparePriceProductPageEven";
  var id = "XB1E3G9gG01qJdU_comparePriceProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_comparePriceProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_comparePriceProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_comparePriceProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_comparePriceProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_variantSelectProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_variantSelectProductPageEven";
  var id = "XB1E3G9gG01qJdU_variantSelectProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var mode = "production";
    var animationActive = "false";
    var $variantItemTemp = $element.find(".gt_variant-select-item--template");
    var $variantsPlace = $element.find(".gt_variant-select");
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (animationActive === "true") {
        var interactionScrollIntoView = `""`;
        window.SOLID.library.animation({
          elementId: id,
          $doms: $elements,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function onOpenSelectDropdown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $selectedVariants = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      $selectedVariants
        .off("click.openSelect")
        .on("click.openSelect", function() {
          $variantSelected.removeClass("gt_active");
          var $options = $(this).siblings(".gt_variant-select-item-options");
          if ($options.hasClass("gt_active")) {
            $options.css("top", "");
            $options.removeClass("gt_active");
            $(this).removeClass("gt_active");
            $(document).off("mousedown.outsideClickVariantSelect");
          } else {
            $variantOptions.removeClass("gt_active");
            $options.addClass("gt_active");
            $(this).addClass("gt_active");
            var optionsOuterHeight = $options.outerHeight();
            var selectInputHeight = $variantSelected.outerHeight();
            var positionOptions =
              $options.offset().top -
              $(document).scrollTop() +
              optionsOuterHeight;
            var windowHeight = $(window).outerHeight();
            if (positionOptions > windowHeight) {
              const currentTopOptions = $options.css("top");
              const newTop =
                "calc( " +
                currentTopOptions +
                " - " +
                optionsOuterHeight +
                "px" +
                " - " +
                (Number(selectInputHeight) + 10) +
                "px" +
                " )";
              $options.css("top", newTop);
            }
            //addeventclickoutsidetoclose
            const $currentTargetOptions = $(this);
            $(document)
              .off("mousedown.outsideClickVariantSelect")
              .on("mousedown.outsideClickVariantSelect", function(event) {
                if (
                  $options &&
                  $options.length &&
                  $currentTargetOptions &&
                  $currentTargetOptions.length
                ) {
                  const $optionsPure = $options[0];
                  if (
                    $optionsPure &&
                    !$optionsPure.contains(event.target) &&
                    !$currentTargetOptions[0].contains(event.target)
                  ) {
                    $options.css("top", "");
                    $options.removeClass("gt_active");
                    $currentTargetOptions.removeClass("gt_active");
                    $(document).off("mousedown.outsideClickVariantSelect");
                  }
                }
              });
          }
        });
    }

    function onClickSelectDropDown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $elementOptions = $element.find(".gt_variant-select-item-option");
      $elementOptions
        .off("click.selectItem")
        .on("click.selectItem", function() {
          $variantSelected.removeClass("gt_active");
          $variantOptions.removeClass("gt_active");
          $(this)
            .siblings(".gt_variant-select-item-option")
            .removeClass("active");
          $(this).addClass("active");
          var title = $(this).attr("data-title");
          var id = $(this).attr("data-id");
          var $variantSelectedCurrent = $(this).closest(
            ".gt_variant-select-item--checked"
          );
          var $valueVariantSelected = $variantSelectedCurrent.find(
            ".gt_variant-select-item-option--selected-text"
          );
          $valueVariantSelected.html(title);
          $valueVariantSelected.attr("data-id", id);
          //triggereventchangevalue
          window.SOLID.store.dispatch("variantSelectChangeValue", {
            target: this,
            value: id,
          });
        });
    }

    function onToggleContentSelect() {
      const $title = $element.find(".gt_variant-select-title");
      $title.off("click.toggleContent").on("click.toggleContent", function() {
        const $contentSelect = $(this).siblings(".gt_variant-select");
        if ($contentSelect.hasClass("active")) {
          $contentSelect.removeClass("active");
          $(this).removeClass("active");
        } else {
          $contentSelect.addClass("active");
          $(this).addClass("active");
        }
      });
    }

    function addEventSelect() {
      onOpenSelectDropdown();
      onClickSelectDropDown();
      onToggleContentSelect();
    }

    function getVariantItem() {
      const $variantItem = $variantItemTemp.clone();
      $variantItem.removeClass("gt_variant-select-item--template");
      return $variantItem;
    }
    /* init block script */
    animation();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      addEventSelect,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_variantSelectProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_variantSelectProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_buttonAddToCartProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_buttonAddToCartProductPageEven";
  var id = "XB1E3G9gG01qJdU_buttonAddToCartProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var scrollIntoViewActive = 'false' == 'true';
    var animationActive = 'false' == 'true';
    var animationHoverActive = 'false' == 'true';
    var scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var mode = 'production';
    var previewSoldOut = 'false';
    var actions = '[{"control":{"attribute":"1","desc":"","id":"1","reference":"html","title":"Pick Product","type":"pickproduct","value":{"id":0,"quantity":0}},"event":"click","id":1}]';
    
    var activeButtonFixContent = "false" === "true";
    var buttonFixContent = "Buy [!quantity!] items";
    var disableListenSoldOut = "true" === "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_buttonAddToCartProductPageEven",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        };
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover",
          };
        }
        window.SOLID.library.animation(settings);
      }
    }

    function eventChangeTextInIframe() {
      
    }

    function eventListenSoldOut() {
      if (mode !== "production") {
        if (previewSoldOut === "false") {
          window.SOLID.library.gtBuyProductListenSoldOut({
            $element: $($element)[0],
            options: {
              isButtonAddToCard: true,
              textAddToCard: "ADD TO CART",
              textSoldOut: "Sold out",
            },
            mode: "dev"
          });
        }
      } else {
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $($element)[0],
          options: {
            isButtonAddToCard: true,
            textAddToCard: "ADD TO CART",
            textSoldOut: "Sold out",
          },
        });
      }
    }

    function addActionEvent() {
      // function customEvent(actions,id,key)
      if (mode === "production") {
        $($element).customEvent(
          JSON.parse(actions),
          'XB1E3G9gG01qJdU_buttonAddToCartProductPageEven' + '_' + indexEl
        );
      }
      /*Listenifisbuttonaddtocard*/
      store.subscribe(
        "loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCartProductPageEven" + "_" + indexEl,
        function(isDisplay) {
          const $loadingEl = $($element).find(
            ".atom-button-loading-circle-loader"
          );
          const $textEl = $($element).find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCartProductPageEven", "");
              store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCartProductPageEven" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl
                .find(".atom-button-loading-check-mark")
                .css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl
                  .find(".atom-button-loading-check-mark")
                  .removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCartProductPageEven", "");
                store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCartProductPageEven" + "_" + indexEl, "");
              }, 3000);
            }
          }
        }
      );
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    if (activeButtonFixContent) {
      initFixContent();
    }
    addInteraction();
    addActionEvent();
    if (!disableListenSoldOut) {
      eventListenSoldOut();
    }
    eventChangeTextInIframe();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      eventListenSoldOut,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_buttonAddToCartProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_buttonAddToCartProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxDiscountItemProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxDiscountItemProductPageOdd";
  var id = "XB1E3G9gG01qJdU_boxDiscountItemProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxDiscountItemProductPageOdd",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxDiscountItemProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxDiscountItemProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxDiscountProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxDiscountProductPageOdd";
  var id = "XB1E3G9gG01qJdU_boxDiscountProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxDiscountProductPageOdd",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxDiscountProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxDiscountProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxQuantityValueProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxQuantityValueProductPageOdd";
  var id = "XB1E3G9gG01qJdU_boxQuantityValueProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxQuantityValueProductPageOdd",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxQuantityValueProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxQuantityValueProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_quantityTextProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_quantityTextProductPageOdd";
  var id = "XB1E3G9gG01qJdU_quantityTextProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "+[!quantity!]"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_quantityTextProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_quantityTextProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_quantityTextProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_quantityTextProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxValueProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxValueProductPageOdd";
  var id = "XB1E3G9gG01qJdU_boxValueProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxValueProductPageOdd",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxValueProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxValueProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_discountValueTextProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_discountValueTextProductPageOdd";
  var id = "XB1E3G9gG01qJdU_discountValueTextProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "Get [!discount!] Off"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_discountValueTextProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_discountValueTextProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_discountValueTextProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_discountValueTextProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_boxPriceDetailOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_boxPriceDetailOdd";
  var id = "XB1E3G9gG01qJdU_boxPriceDetailOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_boxPriceDetailOdd",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_boxPriceDetailOdd()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_boxPriceDetailOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_priceProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_priceProductPageOdd";
  var id = "XB1E3G9gG01qJdU_priceProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_priceProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_priceProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_priceProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_priceProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_comparePriceProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_comparePriceProductPageOdd";
  var id = "XB1E3G9gG01qJdU_comparePriceProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "XB1E3G9gG01qJdU_comparePriceProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "XB1E3G9gG01qJdU_comparePriceProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_comparePriceProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_comparePriceProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_variantSelectProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_variantSelectProductPageOdd";
  var id = "XB1E3G9gG01qJdU_variantSelectProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var mode = "production";
    var animationActive = "false";
    var $variantItemTemp = $element.find(".gt_variant-select-item--template");
    var $variantsPlace = $element.find(".gt_variant-select");
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (animationActive === "true") {
        var interactionScrollIntoView = `""`;
        window.SOLID.library.animation({
          elementId: id,
          $doms: $elements,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function onOpenSelectDropdown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $selectedVariants = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      $selectedVariants
        .off("click.openSelect")
        .on("click.openSelect", function() {
          $variantSelected.removeClass("gt_active");
          var $options = $(this).siblings(".gt_variant-select-item-options");
          if ($options.hasClass("gt_active")) {
            $options.css("top", "");
            $options.removeClass("gt_active");
            $(this).removeClass("gt_active");
            $(document).off("mousedown.outsideClickVariantSelect");
          } else {
            $variantOptions.removeClass("gt_active");
            $options.addClass("gt_active");
            $(this).addClass("gt_active");
            var optionsOuterHeight = $options.outerHeight();
            var selectInputHeight = $variantSelected.outerHeight();
            var positionOptions =
              $options.offset().top -
              $(document).scrollTop() +
              optionsOuterHeight;
            var windowHeight = $(window).outerHeight();
            if (positionOptions > windowHeight) {
              const currentTopOptions = $options.css("top");
              const newTop =
                "calc( " +
                currentTopOptions +
                " - " +
                optionsOuterHeight +
                "px" +
                " - " +
                (Number(selectInputHeight) + 10) +
                "px" +
                " )";
              $options.css("top", newTop);
            }
            //addeventclickoutsidetoclose
            const $currentTargetOptions = $(this);
            $(document)
              .off("mousedown.outsideClickVariantSelect")
              .on("mousedown.outsideClickVariantSelect", function(event) {
                if (
                  $options &&
                  $options.length &&
                  $currentTargetOptions &&
                  $currentTargetOptions.length
                ) {
                  const $optionsPure = $options[0];
                  if (
                    $optionsPure &&
                    !$optionsPure.contains(event.target) &&
                    !$currentTargetOptions[0].contains(event.target)
                  ) {
                    $options.css("top", "");
                    $options.removeClass("gt_active");
                    $currentTargetOptions.removeClass("gt_active");
                    $(document).off("mousedown.outsideClickVariantSelect");
                  }
                }
              });
          }
        });
    }

    function onClickSelectDropDown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $elementOptions = $element.find(".gt_variant-select-item-option");
      $elementOptions
        .off("click.selectItem")
        .on("click.selectItem", function() {
          $variantSelected.removeClass("gt_active");
          $variantOptions.removeClass("gt_active");
          $(this)
            .siblings(".gt_variant-select-item-option")
            .removeClass("active");
          $(this).addClass("active");
          var title = $(this).attr("data-title");
          var id = $(this).attr("data-id");
          var $variantSelectedCurrent = $(this).closest(
            ".gt_variant-select-item--checked"
          );
          var $valueVariantSelected = $variantSelectedCurrent.find(
            ".gt_variant-select-item-option--selected-text"
          );
          $valueVariantSelected.html(title);
          $valueVariantSelected.attr("data-id", id);
          //triggereventchangevalue
          window.SOLID.store.dispatch("variantSelectChangeValue", {
            target: this,
            value: id,
          });
        });
    }

    function onToggleContentSelect() {
      const $title = $element.find(".gt_variant-select-title");
      $title.off("click.toggleContent").on("click.toggleContent", function() {
        const $contentSelect = $(this).siblings(".gt_variant-select");
        if ($contentSelect.hasClass("active")) {
          $contentSelect.removeClass("active");
          $(this).removeClass("active");
        } else {
          $contentSelect.addClass("active");
          $(this).addClass("active");
        }
      });
    }

    function addEventSelect() {
      onOpenSelectDropdown();
      onClickSelectDropDown();
      onToggleContentSelect();
    }

    function getVariantItem() {
      const $variantItem = $variantItemTemp.clone();
      $variantItem.removeClass("gt_variant-select-item--template");
      return $variantItem;
    }
    /* init block script */
    animation();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      addEventSelect,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_variantSelectProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_variantSelectProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXB1E3G9gG01qJdU_buttonAddToCartProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-XB1E3G9gG01qJdU_buttonAddToCartProductPageOdd";
  var id = "XB1E3G9gG01qJdU_buttonAddToCartProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var scrollIntoViewActive = 'false' == 'true';
    var animationActive = 'false' == 'true';
    var animationHoverActive = 'false' == 'true';
    var scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var mode = 'production';
    var previewSoldOut = 'false';
    var actions = '[{"control":{"attribute":"1","desc":"","id":"1","reference":"html","title":"Pick Product","type":"pickproduct","value":{"id":0,"quantity":0}},"event":"click","id":1}]';
    
    var activeButtonFixContent = "false" === "true";
    var buttonFixContent = "Buy [!quantity!] items";
    var disableListenSoldOut = "true" === "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "XB1E3G9gG01qJdU_buttonAddToCartProductPageOdd",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        };
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover",
          };
        }
        window.SOLID.library.animation(settings);
      }
    }

    function eventChangeTextInIframe() {
      
    }

    function eventListenSoldOut() {
      if (mode !== "production") {
        if (previewSoldOut === "false") {
          window.SOLID.library.gtBuyProductListenSoldOut({
            $element: $($element)[0],
            options: {
              isButtonAddToCard: true,
              textAddToCard: "BUY IT NOW",
              textSoldOut: "Sold out",
            },
            mode: "dev"
          });
        }
      } else {
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $($element)[0],
          options: {
            isButtonAddToCard: true,
            textAddToCard: "BUY IT NOW",
            textSoldOut: "Sold out",
          },
        });
      }
    }

    function addActionEvent() {
      // function customEvent(actions,id,key)
      if (mode === "production") {
        $($element).customEvent(
          JSON.parse(actions),
          'XB1E3G9gG01qJdU_buttonAddToCartProductPageOdd' + '_' + indexEl
        );
      }
      /*Listenifisbuttonaddtocard*/
      store.subscribe(
        "loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCartProductPageOdd" + "_" + indexEl,
        function(isDisplay) {
          const $loadingEl = $($element).find(
            ".atom-button-loading-circle-loader"
          );
          const $textEl = $($element).find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCartProductPageOdd", "");
              store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCartProductPageOdd" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl
                .find(".atom-button-loading-check-mark")
                .css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl
                  .find(".atom-button-loading-check-mark")
                  .removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCartProductPageOdd", "");
                store.dispatch("loading-buy-now-XB1E3G9gG01qJdU_buttonAddToCartProductPageOdd" + "_" + indexEl, "");
              }, 3000);
            }
          }
        }
      );
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    if (activeButtonFixContent) {
      initFixContent();
    }
    addInteraction();
    addActionEvent();
    if (!disableListenSoldOut) {
      eventListenSoldOut();
    }
    eventChangeTextInIframe();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      eventListenSoldOut,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXB1E3G9gG01qJdU_buttonAddToCartProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: XB1E3G9gG01qJdU_buttonAddToCartProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESWidgetGTr2AQzUFuFOL42 = function() {
          (function() {
  var elementClassName = ".gt_widget-GTr2AQzUFuFOL42";
  var id = "GTr2AQzUFuFOL42";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var addons = window.SOLID.store.getState("addons");
    var displayAfterProductPage = "scroll80%OfPage";
    var displayAfterAllPage = "passAddToCartButton";
    var timeoutPreview = undefined;
    var enableOnPage = "productPage";
    var enableOnMobile = "true";
    var enableOnTablet = "true";
    var enableOnDesktop = "true";
    var positionOnDesktop = "bottom";
    var positionOnTablet = "bottom";
    var positionOnMobile = "bottom";
    var mode = "production";
    var totalHeightSectionWillSticky = 0;
    var listSelectorButtonATC = [
      "button[name='add']",
      "button[name='Add']",
      "button[name='ADD']",
      "button[attribute='addToCart']",
      "button[attribute='buyItNow']",
      "button.gt_button-add-to-cart",
      "[data-attribute=productSoldOutForm]"
    ];
    var selectorButtonATC = listSelectorButtonATC.join(",");
    var selectorNotButtonATC = listSelectorButtonATC.map((selector) => "[class^='gt_widget-'] " + selector).join(",");
    /* store get state block script */
    /* methods block script */
    function checkPageBuilder() {
      const $ecomsolidDom = $element.closest(".ecomsolid");
      if ($ecomsolidDom && $ecomsolidDom.length) {
        enableOnPage = "allPage";
        //settingtheoenableoneproductpage do giátrịmặcđịnhlàproductpage
        displayAfterAllPage = displayAfterProductPage;
      }
    }

    function initAddon() {
      //neutontaistickycartbarthiemitcho store co1stickycartbar
      if (addons) {
        addons.sticky_cart_bar = {};
      } else {
        addons = {};
        addons.sticky_cart_bar = {};
      }
      window.SOLID.store.dispatch("addons", addons);
    }

    function getDeviceType() {
      var userAgent = navigator.userAgent;
      if (/(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(userAgent)) {
        return "tablet";
      }
      if (/Mobile|iP(hone|od)|Android|BlackBerry|IEMobile|Kindle|Silk-Accelerated|(hpw|web)OS|OperaM(obi|ini)/.test(userAgent)) {
        return "mobile";
      }
      return "desktop";
    }

    function checkDevice(callback) {
      var device = getDeviceType();
      switch (device) {
        case "mobile": {
          if (enableOnMobile === "true") {
            callback();
          }
          break;
        }
        case "tablet": {
          if (enableOnTablet === "true") {
            callback();
          }
          break;
        }
        default: {
          if (enableOnDesktop === "true") {
            callback();
          }
        }
      }
    }

    function checkPageToShow(callback) {
      if (enableOnPage === "productPage") {
        var $productJson = $element.find(".ProductJson");
        if ($productJson && $productJson.length) {
          var isProductPage = $productJson.attr("data-product-page");
          if (isProductPage !== "false") {
            checkDevice(callback);
          }
        }
      } else {
        checkDevice(callback);
      }
    }

    function openStickyCartBar() {
      $element.addClass("gt_active");
    }

    function closeStickyCartBar() {
      $element.removeClass("gt_active");
    }

    function addPaddingMain() {
      if (mode === "dev") {
        return;
      }
      setTimeout(() => {
        var elementHeight = $element.outerHeight();
        if (isElementPositionOnTop()) {
          $("#MainContent").css("padding-top", elementHeight);
        } else {
          $("body").css("padding-bottom", elementHeight);
        }
      }, 0);
    }

    function getTotalHeightSectionWillSticky() {
      if (isElementPositionOnTop()) {
        var headerHeight = $("section[data-name^='Header']").outerHeight() || 0;
        var countDownHeight = $("[data-name^='Sticky Countdown'].gt_position--top").outerHeight() || 0;
        var topBarHeight = $("[data-name^='Top Bar']").outerHeight() || 0;
        return headerHeight + countDownHeight + topBarHeight;
      }
      return 0;
    }

    function setTotalHeightSectionWillSticky() {
      totalHeightSectionWillSticky = getTotalHeightSectionWillSticky();
    }

    function checkPositionTopIfDisplayOnTop() {
      if (isElementPositionOnTop()) {
        setPositionTopWhenHaveSectionSticky();
        addEventAnimationEndForSectionSticky();
      }
    }

    function setPositionTopWhenHaveSectionSticky() {
      var maxValueOffset = getMaxPositionBottomOfSectionsSticky();
      $element.css("top", maxValueOffset);
      $element.css("transition", "all 0.3s");
    }

    function getMaxPositionBottomOfSectionsSticky() {
      var $headerSectionNormal = document.querySelector("section[data-name^='Header']");
      var $topbarNormal = document.querySelector("[data-name^='Top Bar']");
      var $countdownSectionSticky = document.querySelector("[data-name^='Sticky Countdown'].gt_position--top");
      var $headerSectionSticky = document.querySelector("section[data-name^='Header'] .gt_parent-sticky");
      var $topbarSticky = document.querySelector("[data-name^='Top Bar'].gt_sticky--top");
      var headerSectionNormalPositionBottom = getPositionBottomInViewOfDom($headerSectionNormal);
      var topBarSectionNormalPositionBottom = getPositionBottomInViewOfDom($topbarNormal);
      var countdownPositionBottom = getPositionBottomInViewOfDom($countdownSectionSticky);
      var topBarStickyPositionBottom = getPositionBottomInViewOfDom($topbarSticky);
      var headerStickyPositionBottom = getPositionBottomInViewOfDom($headerSectionSticky);
      return Math.max(
        countdownPositionBottom,
        topBarStickyPositionBottom,
        headerStickyPositionBottom,
        headerSectionNormalPositionBottom,
        topBarSectionNormalPositionBottom
      );
    }

    function getPositionBottomInViewOfDom($dom) {
      var positionBottom = 0;
      if ($dom) {
        var boundingBox = $dom.getBoundingClientRect();
        positionBottom = boundingBox.bottom;
      }
      return positionBottom;
    }

    function isElementPositionOnTop() {
      var device = getDeviceType();
      return (
        (device === "desktop" && positionOnDesktop === "top") ||
        (device === "tablet" && positionOnTablet === "top") ||
        (device === "mobile" && positionOnMobile === "top")
      );
    }

    function addEventAnimationEndForSectionSticky() {
      checkAnimationTransitionCountDown();
      checkAnimationTransitionHeader();
      checkAnimationTransitionTopbar();
    }

    function checkAnimationTransitionCountDown() {
      var $countDownSticky = $("[data-name^='Sticky Countdown'].gt_position--top");
      $countDownSticky.off("transitionend.showStickyATC").on("transitionend.showStickyATC", () => {
        setPositionTopWhenHaveSectionSticky();
      });
      $countDownSticky.off("animationend.showStickyATC").on("animationend.showStickyATC", () => {
        setPositionTopWhenHaveSectionSticky();
      });
    }

    function checkAnimationTransitionTopbar() {
      var $topBarSticky = $("[data-name^='Top Bar'].gt_sticky--top");
      $topBarSticky.off("transitionend.showStickyATC").on("transitionend.showStickyATC", () => {
        setPositionTopWhenHaveSectionSticky();
      });
      $topBarSticky.off("animationend.showStickyATC").on("animationend.showStickyATC", () => {
        setPositionTopWhenHaveSectionSticky();
      });
    }

    function checkAnimationTransitionHeader() {
      var $headerSticky = $("section[data-name^='Header'] .gt_parent-sticky");
      $headerSticky.off("animationend.showStickyATC").on("animationend.showStickyATC", () => {
        setPositionTopWhenHaveSectionSticky();
      });
      $headerSticky.off("transitionend.showStickyATC").on("transitionend.showStickyATC", () => {
        setPositionTopWhenHaveSectionSticky();
      });
    }

    function ready(fn) {
      if (document.readyState != "loading") {
        fn();
      } else {
        document.addEventListener("DOMContentLoaded", fn);
      }
    }

    function openOptionsChangeVariant() {
      //openoptionschangevariant
      var dataName = jQuery(this).attr("data-name");
      var $variantOptions = $element.find(`.gt_product-variant-options[data-name=${dataName}]`);
      $variantOptions.toggleClass("gt_active");
      //daumuiten
      $element.find(`.sticky-cart-bar-form-group__item[data-name=${dataName}]`).toggleClass("gt_open_select");
    }

    function positionRelativeBody(el) {
      var rect = el.getBoundingClientRect(),
        scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,
        scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      return {
        top: rect.top + scrollTop,
        left: rect.left + scrollLeft
      };
    }

    function eventShowCartSticky(displayAfter) {
      if (displayAfter === "passAddToCartButton") {
        renderForPassATCButton();
      } else if (displayAfter === "pageLoad") {
        renderForPageLoad();
      } else {
        var percentScroll = displayAfter.match(/scroll(\d+)%/)[1];
        renderForScrollTo(percentScroll);
      }
    }

    function renderForPassATCButton() {
      checkPositionTopIfDisplayOnTop();
      addEventScrollForPassATCButton();
    }

    function addEventScrollForPassATCButton() {
      jQuery(document)
        .off("scroll.gt_widget-GTr2AQzUFuFOL42")
        .on("scroll.gt_widget-GTr2AQzUFuFOL42", function() {
          var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
          var $buttonAddToCarts = $(selectorButtonATC).not(selectorNotButtonATC);
          let isScrollAcrossButtonATC = false;
          for (var i = 0; i < $buttonAddToCarts.length; i++) {
            var $buttonAddToCart = $buttonAddToCarts[i];
            var positionButton = positionRelativeBody($buttonAddToCart).top;
            if (positionButton < scrollTop) {
              isScrollAcrossButtonATC = true;
              break;
            }
          }
          checkPositionTopIfDisplayOnTop();
          if (isScrollAcrossButtonATC) {
            openStickyCartBar();
          } else {
            closeStickyCartBar();
          }
        });
    }

    function renderForPageLoad() {
      ready(function() {
        openStickyCartBar();
        addPaddingMain();
        calculatePositionIfDisplayOnTop();
        timeoutCheckSectionSticky();
        addEventAnimationEndForSectionSticky();
      });
      addEventScrollForPageLoad();
    }

    function timeoutCheckSectionSticky() {
      var scrollTop = document.documentElement.scrollTop;
      if (scrollTop > totalHeightSectionWillSticky) {
        setTimeout(() => {
          calculatePositionIfDisplayOnTop();
        }, 200);
      }
    }

    function addEventScrollForPageLoad() {
      jQuery(document)
        .off("scroll.gt_widget-GTr2AQzUFuFOL42")
        .on("scroll.gt_widget-GTr2AQzUFuFOL42", function() {
          calculatePositionIfDisplayOnTop();
        });
    }

    function renderForScrollTo(percentScroll) {
      jQuery(document)
        .off("scroll.gt_widget-GTr2AQzUFuFOL42")
        .on("scroll.gt_widget-GTr2AQzUFuFOL42", function() {
          var scrollTop = document.documentElement.scrollTop;
          var offsetHeight = document.documentElement.offsetHeight;
          var clientHeight = document.documentElement.clientHeight;
          if (scrollTop > ((offsetHeight - clientHeight) * Number(percentScroll)) / 100) {
            openStickyCartBar();
          } else {
            closeStickyCartBar();
          }
          checkPositionTopIfDisplayOnTop();
        });
    }

    function calculatePositionIfDisplayOnTop() {
      var scrollTop = document.documentElement.scrollTop;
      if (scrollTop > totalHeightSectionWillSticky) {
        checkPositionTopIfDisplayOnTop();
      } else {
        setTimeout(() => {
          checkPositionTopIfDisplayOnTop();
        }, 100);
      }
    }

    function convertAnimationName(name) {
      
    }

    function animationStickyCartBar(value) {
      
    }
    /* init block script */
    checkPageBuilder();
    setTotalHeightSectionWillSticky();
    checkPageToShow(function() {
      initAddon();
      if (enableOnPage === "productPage") {
        eventShowCartSticky(displayAfterProductPage);
      } else {
        eventShowCartSticky(displayAfterAllPage);
      }
    });
    /* store subscribe block script */
    store.subscribe("preview-GTr2AQzUFuFOL42-effectShowStickyCartBar", animationStickyCartBar);

    function destroy() {
      store.unsubscribe("preview-GTr2AQzUFuFOL42-effectShowStickyCartBar", animationStickyCartBar);
    }
    /* events block script */
    var $elements_1 = $element.find(".gt_product-variant-options--select");
    $elements_1.off("click").on("click", openOptionsChangeVariant);
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESWidgetGTr2AQzUFuFOL42()
      } catch(e) {
        console.error("Error ESWidget Id: GTr2AQzUFuFOL42" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomGTr2AQzUFuFOL42_boxSticky = function() {
          (function() {
  var elementClassName = ".gt_atom-GTr2AQzUFuFOL42_boxSticky";
  var id = "GTr2AQzUFuFOL42_boxSticky";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "GTr2AQzUFuFOL42_boxSticky",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomGTr2AQzUFuFOL42_boxSticky()
      } catch(e) {
        console.error("Error ESAtom Id: GTr2AQzUFuFOL42_boxSticky" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomGTr2AQzUFuFOL42_boxInfor = function() {
          (function() {
  var elementClassName = ".gt_atom-GTr2AQzUFuFOL42_boxInfor";
  var id = "GTr2AQzUFuFOL42_boxInfor";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "GTr2AQzUFuFOL42_boxInfor",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomGTr2AQzUFuFOL42_boxInfor()
      } catch(e) {
        console.error("Error ESAtom Id: GTr2AQzUFuFOL42_boxInfor" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomGTr2AQzUFuFOL42_productImage = function() {
          (function() {
  var elementClassName = ".gt_atom-GTr2AQzUFuFOL42_productImage";
  var id = "GTr2AQzUFuFOL42_productImage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    /* store get state block script */
    /* methods block script */
    function initLibFeatureImage() {
      $element.gtProductFeatureImage({
        classFeatureImage: ".gt_product-image--feature",
        classImages: null,
        carousel: null,
        owlCarousel: null,
      });
    }

    function initLibProductZoom() {
      $element.find(".gt_product-image--feature").gfProductZoomImage({
        classHoverItem: ".gt_product-img-box",
        scale: "1",
        classSection: ".gt_atom-GTr2AQzUFuFOL42_productImage",
      });
    }

    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }
    /* init block script */
    initLibFeatureImage();
    initLibProductZoom();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /* global block script */
  window.SOLID.store.subscribe("runjs" + "_atom_" + id, () => {
    $elements = document.querySelectorAll(elementClassName);
    main();
  });
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomGTr2AQzUFuFOL42_productImage()
      } catch(e) {
        console.error("Error ESAtom Id: GTr2AQzUFuFOL42_productImage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomGTr2AQzUFuFOL42_boxTitle = function() {
          (function() {
  var elementClassName = ".gt_atom-GTr2AQzUFuFOL42_boxTitle";
  var id = "GTr2AQzUFuFOL42_boxTitle";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "GTr2AQzUFuFOL42_boxTitle",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomGTr2AQzUFuFOL42_boxTitle()
      } catch(e) {
        console.error("Error ESAtom Id: GTr2AQzUFuFOL42_boxTitle" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomGTr2AQzUFuFOL42_productTitle = function() {
          (function() {
  var elementClassName = ".gt_atom-GTr2AQzUFuFOL42_productTitle";
  var id = "GTr2AQzUFuFOL42_productTitle";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "GTr2AQzUFuFOL42_productTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "GTr2AQzUFuFOL42_productTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomGTr2AQzUFuFOL42_productTitle()
      } catch(e) {
        console.error("Error ESAtom Id: GTr2AQzUFuFOL42_productTitle" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomGTr2AQzUFuFOL42_boxPrice = function() {
          (function() {
  var elementClassName = ".gt_atom-GTr2AQzUFuFOL42_boxPrice";
  var id = "GTr2AQzUFuFOL42_boxPrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "GTr2AQzUFuFOL42_boxPrice",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomGTr2AQzUFuFOL42_boxPrice()
      } catch(e) {
        console.error("Error ESAtom Id: GTr2AQzUFuFOL42_boxPrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomGTr2AQzUFuFOL42_productPrice = function() {
          (function() {
  var elementClassName = ".gt_atom-GTr2AQzUFuFOL42_productPrice";
  var id = "GTr2AQzUFuFOL42_productPrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const syncQuantityandPrice = "true" == "true";
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!price!]"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "GTr2AQzUFuFOL42_productPrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "GTr2AQzUFuFOL42_productPrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-price-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-price-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    };
    $element.gtProductPrice({
      classCurrentPrice: ".gt_product-price--number",
      syncQuantityPrice: syncQuantityandPrice,
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomGTr2AQzUFuFOL42_productPrice()
      } catch(e) {
        console.error("Error ESAtom Id: GTr2AQzUFuFOL42_productPrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomGTr2AQzUFuFOL42_productComparePrice = function() {
          (function() {
  var elementClassName = ".gt_atom-GTr2AQzUFuFOL42_productComparePrice";
  var id = "GTr2AQzUFuFOL42_productComparePrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const syncQuantityandPrice = "true" == "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "GTr2AQzUFuFOL42_productComparePrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "GTr2AQzUFuFOL42_productComparePrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    $element.gtProductPrice({
      classComparePrice: ".gt_product-price--compare",
      classCurrentPrice: ".gt_product-price--number",
      syncQuantityComparePrice: syncQuantityandPrice,
      replacePriceForCurrentPrice: false,
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomGTr2AQzUFuFOL42_productComparePrice()
      } catch(e) {
        console.error("Error ESAtom Id: GTr2AQzUFuFOL42_productComparePrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomGTr2AQzUFuFOL42_linePrice = function() {
          
        }
        funcESAtomGTr2AQzUFuFOL42_linePrice()
      } catch(e) {
        console.error("Error ESAtom Id: GTr2AQzUFuFOL42_linePrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomGTr2AQzUFuFOL42_productTagSale = function() {
          (function() {
  var elementClassName = ".gt_atom-GTr2AQzUFuFOL42_productTagSale";
  var id = "GTr2AQzUFuFOL42_productTagSale";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const roundPercent = Number("0");
    const removeZeros = "true" === "true";
    /* store get state block script */
    /* methods block script */
    /* init block script */
    window.SOLID.library.gtProductSaveV2({
      $element: $element,
      settings: {
        classTextPercent: ".gt_product-tag-sale--value--percent",
        classTextNumber: ".gt_product-tag-sale--value--number",
        dataFormat: "-[!Profit!] OFF",
        dataFormatKey: "[!Profit!]",
        customCurrencyFormating: "shortPrefix",
        roundPercent: roundPercent,
        roundNoZeroes: removeZeros
      }
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomGTr2AQzUFuFOL42_productTagSale()
      } catch(e) {
        console.error("Error ESAtom Id: GTr2AQzUFuFOL42_productTagSale" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomGTr2AQzUFuFOL42_boxOptions = function() {
          (function() {
  var elementClassName = ".gt_atom-GTr2AQzUFuFOL42_boxOptions";
  var id = "GTr2AQzUFuFOL42_boxOptions";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "GTr2AQzUFuFOL42_boxOptions",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomGTr2AQzUFuFOL42_boxOptions()
      } catch(e) {
        console.error("Error ESAtom Id: GTr2AQzUFuFOL42_boxOptions" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomGTr2AQzUFuFOL42_productVariant = function() {
          (function() {
  var elementClassName = ".gt_atom-GTr2AQzUFuFOL42_productVariant";
  var id = "GTr2AQzUFuFOL42_productVariant";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var $variantChecked = $element.find(".gt_product-variant--checked");
    var $variantOptions = $element.find(".gt_product-variant-options");
    var mode = "production";
    var animationActive = 'false';
    var timeoutTooltip = null;
    var valueInTitleActive = "false" === "true";
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (animationActive === "true") {
        var interactionScrollIntoView =
          '""';
        window.SOLID.library.animation({
          elementId: id,
          $doms: $elements,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function initSwatches() {
      window.SOLID.library.gtProductSwatchesV2({
        $element: $element,
        settings: {
          classCurrentValue: ".gt_product-variant-option--selected .gt_product-variant-option--selected-text",
          classItem: ".gt_variant--select-item",
          classInputIdHidden: ".gt_variant--input",
          classBtnSelect: ".gt_product-variant--btn-select",
          classVariantValueInTitle: ".gt_title_value",
        }
      });
    }

    function openSelectDropdown() {
      $variantChecked.removeClass("gt_active");
      var $options = $(this).siblings(".gt_product-variant-options");
      if ($options.hasClass("gt_active")) {
        $options.css("top", "");
        $options.removeClass("gt_active");
        $(this).removeClass("gt_active");
        clearEventShowTooltip();
        $(document).off("mousedown.outsideClickVariantSelect");
      } else {
        $variantOptions.removeClass("gt_active");
        $options.addClass("gt_active");
        $(this).addClass("gt_active");
        var optionsOuterHeight = $options.outerHeight();
        var selectInputHeight = $variantChecked.outerHeight();
        var positionOptions = $options.offset().top - $(document).scrollTop() + optionsOuterHeight;
        var windowHeight = $(window).outerHeight();
        if (positionOptions > windowHeight) {
          const currentTopOptions = $options.css("top");
          const newTop = "calc( " + currentTopOptions + " - " + optionsOuterHeight + "px" + " - " + (Number(selectInputHeight) + 10) + "px" + " )";
          $options.css("top", newTop);
        }
        clearTimeout(timeoutTooltip);
        timeoutTooltip = setTimeout(() => {
          eventShowTooltipSelectType();
        }, 300)
        //addeventclickoutsidetoclose
        const $currentTargetOptions = $(this);
        $(document).off("mousedown.outsideClickVariantSelect").on("mousedown.outsideClickVariantSelect", function(event) {
          if ($options && $options.length && $currentTargetOptions && $currentTargetOptions.length) {
            const $optionsPure = $options[0];
            if ($optionsPure && !$optionsPure.contains(event.target) && !$currentTargetOptions[0].contains(event.target)) {
              $options.css("top", "");
              $options.removeClass("gt_active");
              $currentTargetOptions.removeClass("gt_active");
              clearEventShowTooltip();
              $(document).off("mousedown.outsideClickVariantSelect");
            }
          }
        });
      }
    }

    function onClickSelectDropDown() {
      $variantChecked.removeClass("gt_active");
      $variantOptions.removeClass("gt_active");
      var value = $(this).attr("data-value");
      var $variantCheckedCurrent = $(this).closest(
        ".gt_product-variant--select-box"
      );
      var $valueVariantChecked = $variantCheckedCurrent.find(
        ".gt_product-variant-option--selected .gt_product-variant-option--selected-text"
      );
      var $contentOptionSelect = $(this).html();
      $valueVariantChecked.attr("data-value", value);
      $valueVariantChecked.html($contentOptionSelect);
      //closetooltip
      const $tooltip = $element.find(".gt_product-variant-tooltip");
      $tooltip.css("display", "none");
      clearEventShowTooltip();
    }

    function hideAtomWhenNoVariant() {
      $element.css("display", "");
      var isHide = true;
      var $variantItems = $element.find(".gt_product-variant--item")
      for (var i = 0; i < $variantItems.length; i++) {
        var $item = $($variantItems[i]);
        var display = $item.css("display");
        if (display !== "none") {
          isHide = false;
          break;
        }
      }
      if (isHide) {
        $element.css("display", "none");
      }
    }

    function eventShowTooltipSelectType() {
      const $selectItems = $element.find(".gt_variant--select-item");
      for (var i = 0; i < $selectItems.length; i++) {
        const $selectItem = $($selectItems[i]);
        const $selectOptions = $selectItem.find(".gt_product-variant-option");
        const $tooltip = $selectItem.find(".gt_product-variant-tooltip");
        $selectOptions.off("mouseenter").on("mouseenter", function() {
          //checkoverflow
          const $contentValue = $(this).find(".gt_product-variant-option--txt");
          const cachedDisplayContentValue = $contentValue.css("display");
          $contentValue.css({
            display: "inline",
            overflow: "unset",
            whiteSpace: "nowrap"
          });
          const realWidth = $contentValue.outerWidth();
          $contentValue.css({
            display: cachedDisplayContentValue,
            overflow: "",
            whiteSpace: ""
          });
          //
          const selectOptionTop = this.getBoundingClientRect().top;
          const selectItemTop = $selectItem[0].getBoundingClientRect().top;
          const selectOptionHeight = $(this).outerHeight();
          const selectOptionWidth = $(this).outerWidth();
          const contentSelect = $contentValue.html();
          if (realWidth > selectOptionWidth) {
            $tooltip.find(".gt_product-variant-tooltip-name").html(contentSelect);
            $tooltip.css({
              display: "block",
              top: selectOptionTop - selectItemTop - selectOptionHeight,
              zIndex: 10
            });
            $tooltip.find(".gt_product-variant-tooltip-arrow").css({
              left: selectOptionWidth / 2 + "px",
            })
          }
        });
        $selectOptions.off("mouseleave").on("mouseleave", function() {
          $tooltip.css({
            display: "none"
          })
        });
      }
    }

    function clearEventShowTooltip() {
      const $selectitems = $element.find(".gt_variant--select-item");
      for (var i = 0; i < $selectitems.length; i++) {
        const $selectitem = $($selectitems[i]);
        const $selectoptions = $selectitem.find(".gt_product-variant-option");
        $selectoptions.off("mouseenter");
        $selectoptions.off("mouseleave");
      }
    }
    /* init block script */
    hideAtomWhenNoVariant();
    initSwatches();
    animation();
    /*global blockscript*/
    window.SOLID.store.subscribe("run-script-" + id, () => {
      $elements = document.querySelectorAll(elementClassName);
      main();
    });
    /* store subscribe block script */
    /* events block script */
    var $elements_1 = $element.find(".gt_product-variant--checked");
    $elements_1.off("click.openSelect").on("click.openSelect", openSelectDropdown);
    var $elements_2 = $element.find(".gt_product-variant-option");
    $elements_2.off("click.selectItem").on("click.selectItem", onClickSelectDropDown);
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomGTr2AQzUFuFOL42_productVariant()
      } catch(e) {
        console.error("Error ESAtom Id: GTr2AQzUFuFOL42_productVariant" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomGTr2AQzUFuFOL42_boxSubmit = function() {
          (function() {
  var elementClassName = ".gt_atom-GTr2AQzUFuFOL42_boxSubmit";
  var id = "GTr2AQzUFuFOL42_boxSubmit";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "GTr2AQzUFuFOL42_boxSubmit",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomGTr2AQzUFuFOL42_boxSubmit()
      } catch(e) {
        console.error("Error ESAtom Id: GTr2AQzUFuFOL42_boxSubmit" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomGTr2AQzUFuFOL42_productQuantity = function() {
          (function() {
  var elementClassName = ".gt_atom-GTr2AQzUFuFOL42_productQuantity";
  var id = "GTr2AQzUFuFOL42_productQuantity";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var style = "horizontal";
    var mode = "production";
    var interactionScrollIntoViewActive = "false";
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (interactionScrollIntoViewActive === "true") {
        var interactionScrollIntoView =
          '""';
        var $container = $element.find(".gt_product-quantity");
        window.SOLID.library.animation({
          elementId: id,
          $doms: $container,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function initLibrary() {
      var params = {
        $element: $element,
        settings: {
          classInput: "input[name='quantity']",
          classPlus: ".gt_quantity_plus",
          classMinus: ".gt_quantity_minus",
          mode: mode,
        }
      };
      if (style === "horizontal") {
        params = {
          $element: $element,
          settings: {
            classInput: "input[name='quantity']",
            classPlus: ".gt_product-quantity--plus",
            classMinus: ".gt_product-quantity--minus",
            mode: mode,
          }
        };
      }
      window.SOLID.library.gtProductQuantityV2(params);
    }

    function validateInput() {
      var inputQuantity = $element.find("input[name='quantity']");
      inputQuantity.keyup(function() {
        var value = parseInt(this.value);
        if (isNaN(value)) {
          value = 1;
        }
        inputQuantity.attr("value", value).val(value);
      })
    }
    /* init block script */
    initLibrary();
    animation();
    validateInput();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomGTr2AQzUFuFOL42_productQuantity()
      } catch(e) {
        console.error("Error ESAtom Id: GTr2AQzUFuFOL42_productQuantity" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomGTr2AQzUFuFOL42_productButtonAddToCart = function() {
          (function() {
  var elementClassName = ".gt_atom-GTr2AQzUFuFOL42_productButtonAddToCart";
  var id = "GTr2AQzUFuFOL42_productButtonAddToCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var scrollIntoViewActive = 'false' == 'true';
    var animationActive = 'false' == 'true';
    var animationHoverActive = 'false' == 'true';
    var scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var mode = 'production';
    var previewSoldOut = 'false';
    var actions = '[{"control":{"attribute":"pickProductButton","id":"pickProductButton","isButtonAddToCard":true,"type":"pickproduct"},"event":"click","id":1},{"control":{"attribute":"pickLinkButton","id":"pickLinkButton","newTab":false,"reference":"html","title":"Pick Link","type":"picklink","value":"/cart"},"event":"click","id":2}]';
    
    var activeButtonFixContent = "false" === "true";
    var buttonFixContent = "Buy [!quantity!] items";
    var disableListenSoldOut = "false" === "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "GTr2AQzUFuFOL42_productButtonAddToCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        };
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover",
          };
        }
        window.SOLID.library.animation(settings);
      }
    }

    function eventChangeTextInIframe() {
      
    }

    function eventListenSoldOut() {
      if (mode !== "production") {
        if (previewSoldOut === "false") {
          window.SOLID.library.gtBuyProductListenSoldOut({
            $element: $($element)[0],
            options: {
              isButtonAddToCard: true,
              textAddToCard: "Add To Cart",
              textSoldOut: "Sold out",
            },
            mode: "dev"
          });
        }
      } else {
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $($element)[0],
          options: {
            isButtonAddToCard: true,
            textAddToCard: "Add To Cart",
            textSoldOut: "Sold out",
          },
        });
      }
    }

    function addActionEvent() {
      // function customEvent(actions,id,key)
      if (mode === "production") {
        $($element).customEvent(
          JSON.parse(actions),
          'GTr2AQzUFuFOL42_productButtonAddToCart' + '_' + indexEl
        );
      }
      /*Listenifisbuttonaddtocard*/
      store.subscribe(
        "loading-buy-now-GTr2AQzUFuFOL42_productButtonAddToCart" + "_" + indexEl,
        function(isDisplay) {
          const $loadingEl = $($element).find(
            ".atom-button-loading-circle-loader"
          );
          const $textEl = $($element).find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              store.dispatch("loading-buy-now-GTr2AQzUFuFOL42_productButtonAddToCart", "");
              store.dispatch("loading-buy-now-GTr2AQzUFuFOL42_productButtonAddToCart" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl
                .find(".atom-button-loading-check-mark")
                .css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl
                  .find(".atom-button-loading-check-mark")
                  .removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                store.dispatch("loading-buy-now-GTr2AQzUFuFOL42_productButtonAddToCart", "");
                store.dispatch("loading-buy-now-GTr2AQzUFuFOL42_productButtonAddToCart" + "_" + indexEl, "");
              }, 3000);
            }
          }
        }
      );
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    if (activeButtonFixContent) {
      initFixContent();
    }
    addInteraction();
    addActionEvent();
    if (!disableListenSoldOut) {
      eventListenSoldOut();
    }
    eventChangeTextInIframe();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      eventListenSoldOut,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomGTr2AQzUFuFOL42_productButtonAddToCart()
      } catch(e) {
        console.error("Error ESAtom Id: GTr2AQzUFuFOL42_productButtonAddToCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESWidgetqGDJdYKeSdU1UgC = function() {
          (function (jQuery) {
  jQuery.gtAddonCurency = function (element, options, $) {
    var defaults = {
      id: null,
      mode: null,
      dataCurrencySettings: null,
    };
    this.settings = {};
    var $element = jQuery(element);
    var _this = this;
    var _currencyShopify = null;
    var _dataCurrencySettings = null;
    var _listCurrency = null;

    this.init = function () {
      this.settings = jQuery.extend({}, defaults, options);
      _currencyShopify = __GemSettings.currency;
      if (_this.settings.dataCurrencySettings) {
        _dataCurrencySettings = _this.settings.dataCurrencySettings;
      }
      if (_dataCurrencySettings.length === 0) {
        return false;
      }
      //Lấy currency customer
      _this.getLocal(function () {
        _this.formatAndCacheData();
        _this.getCurrency(function () {
          _this.setCurrency();
          _this.renderCurrentCurrency();
          _this.renderListCurrency();
          _this.bindEvent();
        });
      });

      // format wild money
      this.formatWildMoney();
      this.listen();
    };

    //Get info customer
    this.getLocal = function (callback) {
      var gtDataLocation = localStorage.getItem("gtDataLocation");
      if (gtDataLocation) {
        if (callback) {
          callback();
        }
      } else {
        jQuery.ajax({
          type: "GET",
          url: "/browsing_context_suggestions.json?source=geolocation_recommendation&currency[enabled]=true",
          success: function (data) {
            try {
              var currentCurrency = _currencyShopify;
              if (
                data.suggestions &&
                data.suggestions.length &&
                data.suggestions[0] &&
                data.suggestions[0].parts &&
                data.suggestions[0].parts.currency &&
                data.suggestions[0].parts.currency.handle
              ) {
                currentCurrency = data.suggestions[0].parts.currency.handle;
              } else if (data.detected_values && data.detected_values.country) {
                var getCurrency = _this.getCurrencyByCountry(data.detected_values.country.handle);
                if (getCurrency) {
                  currentCurrency = getCurrency;
                }
              }
              
              var respons = {
                currency: currentCurrency,
              };
              respons = JSON.stringify(respons);
              localStorage.setItem("gtDataLocation", respons);
              if (callback) {
                callback();
              }
            } catch (error) {
              var responsShop = {
                currency: _currencyShopify,
              };
              responsShop = JSON.stringify(responsShop);
              localStorage.setItem("gtDataLocation", responsShop);
              if (callback) {
                callback();
              }
            }
          },
          error: function () {
            var responsShop = {
              currency: _currencyShopify,
            };
            responsShop = JSON.stringify(responsShop);
            localStorage.setItem("gtDataLocation", responsShop);
            if (callback) {
              callback();
            }
          },
        });
      }
    };

    this.getCurrency = function (callback) {
      jQuery.ajax({
        type: "GET",
        url: "https://cdn.shopify.com/s/javascripts/currencies.js",
        success: function (Currency) {
          try {
            eval(Currency);
          } catch (error) {
            console.log("ES: Error get currencies from Shopify: ", error);
            var Currency = {
              rates: {"USD":1.0,"EUR":1.21396,"GBP":1.4129,"CAD":0.826753,"ARS":0.0106558,"AUD":0.783837,"BRL":0.191396,"CLP":0.00143482,"CNY":0.155755,"CYP":0.397899,"CZK":0.0474874,"DKK":0.16326,"EEK":0.0706676,"HKD":0.128774,"HUF":0.00339269,"ISK":0.00804498,"INR":0.013607,"JMD":0.00660164,"JPY":0.00918791,"LVL":1.57329,"LTL":0.320236,"MTL":0.293496,"MXN":0.0502129,"NZD":0.726887,"NOK":0.120981,"PLN":0.26613,"SGD":0.754136,"SKK":21.5517,"SIT":175.439,"ZAR":0.0712105,"KRW":0.000895504,"SEK":0.119988,"CHF":1.11031,"TWD":0.0360556,"UYU":0.0227938,"MYR":0.243477,"BSD":1.0,"CRC":0.00162098,"RON":0.246381,"PHP":0.0208994,"AED":0.272294,"VEB":3.51935e-15,"IDR":7.04229e-05,"TRY":0.120707,"THB":0.0321469,"TTD":0.147362,"ILS":0.306942,"SYP":0.000795,"XCD":0.370016,"COP":0.000269732,"RUB":0.0134572,"HRK":0.161025,"KZT":0.00234372,"TZS":0.000431193,"XPT":1258.94,"SAR":0.266667,"NIO":0.0284355,"LAK":0.0001064,"OMR":2.60078,"AMD":0.0019365,"CDF":0.000502199,"KPW":0.00111112,"SPL":6.0,"KES":0.00938265,"ZWD":0.00276319,"KHR":0.000246568,"MVR":0.0649732,"GTQ":0.129801,"BZD":0.496191,"BYR":3.9436e-05,"LYD":0.22305,"DZD":0.00748164,"BIF":0.000510575,"GIP":1.4129,"BOB":0.144903,"XOF":0.00185067,"STD":4.91669e-05,"NGN":0.0026282,"PGK":0.285687,"ERN":0.0666667,"MWK":0.00125997,"CUP":0.0414759,"GMD":0.0195334,"CVE":0.011009,"BTN":0.013607,"XAF":0.00185067,"UGX":0.000281563,"MAD":0.113064,"MNT":0.000351352,"LSL":0.0712105,"XAG":27.3301,"TOP":0.445393,"SHP":1.4129,"RSD":0.0103226,"HTG":0.0115382,"MGA":0.000264721,"MZN":0.0171338,"FKP":1.4129,"BWP":0.0920966,"HNL":0.0416537,"PYG":0.000150717,"JEP":1.4129,"EGP":0.0638425,"LBP":0.00066335,"ANG":0.558818,"WST":0.39624,"TVD":0.783837,"GYD":0.00478623,"GGP":1.4129,"NPR":0.00846467,"KMF":0.00246756,"IRR":2.37964e-05,"XPD":2962.5,"SRD":0.0707017,"TMM":5.708e-05,"SZL":0.0712105,"MOP":0.125023,"BMD":1.0,"XPF":0.010173,"ETB":0.0236914,"JOD":1.41044,"MDL":0.0563608,"MRO":0.00277836,"YER":0.00399997,"BAM":0.620687,"AWG":0.558659,"PEN":0.267657,"VEF":3.51935e-12,"SLL":9.75869e-05,"KYD":1.21948,"AOA":0.00152862,"TND":0.368636,"TJS":0.0878275,"SCR":0.065115,"LKR":0.0050759,"DJF":0.0056238,"GNF":0.000100998,"VUV":0.00931091,"SDG":0.00249823,"IMP":1.4129,"GEL":0.292518,"FJD":0.494316,"DOP":0.0175514,"XDR":1.4412,"MUR":0.0247869,"MMK":0.000642221,"LRD":0.00581993,"BBD":0.5,"ZMK":4.46477e-05,"XAU":1836.04,"VND":4.33831e-05,"UAH":0.0360142,"TMT":0.2854,"IQD":0.000685281,"BGN":0.620687,"KGS":0.0117959,"RWF":0.0010092,"BHD":2.65957,"UZS":9.50145e-05,"PKR":0.00656255,"MKD":0.0197155,"AFN":0.0129238,"NAD":0.0712105,"BDT":0.0117926,"AZN":0.588588,"SOS":0.00173513,"QAR":0.274725,"PAB":1.0,"CUC":1.0,"SVC":0.114286,"SBD":0.125049,"ALL":0.00988305,"BND":0.754136,"KWD":3.32298,"GHS":0.17355,"ZMW":0.0446477,"XBT":55892.7,"NTD":0.0337206,"BYN":0.39436,"CNH":0.15571,"MRU":0.0277836,"STN":0.0491669,"VES":3.51935e-07,"MXV":0.333992},
              convert: function(amount, from, to) {
                return (amount * this.rates[from]) / this.rates[to];
              }
            };
          }
          // 'Currency' object return from request
          // eslint-disable-next-line no-undef
          window.GemCurrency.convert = Currency.convert;
          // eslint-disable-next-line no-undef
          window.GemCurrency.rates = Currency.rates;
          callback();
        },
        error: function (error) {
          console.log("error ", error);
          callback();
        },
      });
    };

    this.formatAndCacheData = function () {
      var dataLocation = localStorage.getItem("gtDataLocation");
      try {
        dataLocation = JSON.parse(dataLocation);
        if (_dataCurrencySettings) {
          var itemActive = [];
          var itemsNotActive = [];
          for (var i = 0; i < _dataCurrencySettings.length; i++) {
            var item = _dataCurrencySettings[i];
            if (dataLocation.currency.includes(item.value)) {
              item.active = true;
              itemActive.push(item);
            } else {
              item.active = false;
              itemsNotActive.push(item);
            }
          }
          var listItemCurrency = [];
          listItemCurrency = itemActive.concat(itemsNotActive);

          if (itemActive.length == 0) {
            var flag = true;
            for (var j = 0; j < _dataCurrencySettings.length; j++) {
              var item1 = _dataCurrencySettings[j];
              if (item1.value == _currencyShopify) {
                flag = false;
                listItemCurrency[j].active = true;
              }
            }
            if (flag) {
              listItemCurrency[0].active = true;
            }
          }

          try {
            _listCurrency = listItemCurrency;
            for (let i = 0; i < _listCurrency.length; i++) {
              var currency = _listCurrency[i];
              if (currency.active === true) {
                var responsShop = {
                  currency: currency.value,
                };
                responsShop = JSON.stringify(responsShop);
                localStorage.setItem("gtDataLocation", responsShop);
              }
            }
          } catch (error) {
            console.log("error ", error);
          }
        }
      } catch (error) {
        console.log("error ", error);
      }
    };

    this.renderCurrentCurrency = function () {
      var currentCurrency = _listCurrency.filter((currency) => {
        return currency.active === true;
      });
      if (currentCurrency && currentCurrency.length > 0) {
        currentCurrency = currentCurrency[0];
        if (_this.settings.classNameCurrentCurrency) {
          var $nameCurrentCurrency = $element.find(_this.settings.classNameCurrentCurrency);
          if ($nameCurrentCurrency && $nameCurrentCurrency.length) {
            $nameCurrentCurrency.html(currentCurrency.value);
          }
        }
        var $flagsCurrentCurrency = $element.find(_this.settings.classFlagsCurrent);
        if ($flagsCurrentCurrency && $flagsCurrentCurrency.length) {
          $flagsCurrentCurrency.addClass("show");
          $flagsCurrentCurrency.attr("data-flag", currentCurrency.dataCountry);
        }
      }
    };

    this.renderListCurrency = function () {
      if (_listCurrency && _listCurrency.length) {
        if (_this.settings.classContainerListCurrency) {
          var $container = $element.find(_this.settings.classContainerListCurrency);
          if ($container && $container.length) {
            $container.html("");
            for (let i = 0; i < _listCurrency.length; i++) {
              var currency = _listCurrency[i];
              if (_this.settings.htmlItemCurrency) {
                var $htmlItemCurrency = jQuery(_this.settings.htmlItemCurrency);
                if (currency.active === true) {
                  $htmlItemCurrency.addClass("gt_active");
                }
                $htmlItemCurrency.attr({
                  "data-currency": currency.value,
                });

                if (_this.settings.classFlagsItemCurrency) {
                  var $flagsItem = $htmlItemCurrency.find(_this.settings.classFlagsItemCurrency);
                  if ($flagsItem && $flagsItem.length) {
                    $flagsItem.addClass("show");
                    $flagsItem.attr("data-flag", currency.dataCountry);
                  }
                }
                if (_this.settings.classNameItemCurrency) {
                  var $nameItemCurrency = $htmlItemCurrency.find(_this.settings.classNameItemCurrency);
                  if ($nameItemCurrency && $nameItemCurrency.length) {
                    $nameItemCurrency.html(currency.name);
                  }
                }
                $container.append($htmlItemCurrency);
              }
            }
          }
        }
      }
    };

    this.bindEvent = function () {
      $element.off("click.showModalListCurrency").on("click.showModalListCurrency", function (event) {
        if (_this.settings.classContainerListCurrency) {
          var $containerModal = jQuery(event.target).closest(_this.settings.classContainerListCurrency);
          if ($containerModal.length === 0) {
            if (jQuery(this).hasClass("gt_active")) {
              jQuery(this).removeClass("gt_active");
            } else {
              jQuery(this).addClass("gt_active");

              var currentAutoPosition = getCurrentAutoPosition();
              if (currentAutoPosition) {
                let $modal = $element.find(".list-currency-modal");
                let topPopup = $element.offset().top - $(window).scrollTop();
                let leftPopup = $element.offset().left;
                let heightPopup = $element.outerHeight();
                let widthPopup = $element.outerWidth();
                let heightModel = $modal.outerHeight();
                let widthModel = $modal.outerHeight();
                let heightWindow = jQuery(window).outerHeight();

                // set default
                let positions = {
                  top: "calc(100% + 5px)",
                  left: "auto",
                  bottom: "auto",
                  right: "0",
                };
                if (topPopup + heightPopup + heightModel + 50 >= heightWindow) {
                  positions.top = "auto";
                  positions.bottom = "calc(100% + 5px)";
                }
                if (leftPopup + widthPopup - widthModel - 50 <= 0) {
                  positions.left = "0";
                  positions.right = "auto";
                }
                $modal.css(positions);
              }
            }
          }
        }
      });

      $(window)
        .off("click.clickCloseModal")
        .on("click.clickCloseModal", function (event) {
          if (_this.settings.id) {
            var $container = jQuery(event.target).closest(".gt_widget-" + _this.settings.id);
            if ($container.length === 0) {
              if ($element.hasClass("gt_active")) {
                $element.removeClass("gt_active");
              }
            }
          }
        });

      if (_this.settings.classItemCurrency && _this.settings.classContainerListCurrency) {
        var $containerModalEvent = $element.find(_this.settings.classContainerListCurrency);

        if ($containerModalEvent && $containerModalEvent.length) {
          var $itemCurrency = $containerModalEvent.find(_this.settings.classItemCurrency);
          if ($itemCurrency && $itemCurrency.length) {
            $itemCurrency.off("click.selectedCurrency").on("click.selectedCurrency", function () {
              $itemCurrency.removeClass("gt_active");
              jQuery(this).addClass("gt_active");
              var currencyName = jQuery(this).attr("data-currency");
              _listCurrency = _listCurrency.map((currency) => {
                if (currency.value === currencyName) {
                  currency.active = true;
                } else {
                  currency.active = false;
                }
                return currency;
              });
              _this.renderCurrentCurrency();
              _this.bindEvent();
              try {
                for (let i = 0; i < _listCurrency.length; i++) {
                  var currency = _listCurrency[i];
                  if (currency.active === true) {
                    var responsShop = {
                      currency: currency.value,
                    };
                    responsShop = JSON.stringify(responsShop);
                    localStorage.setItem("gtDataLocation", responsShop);
                  }
                }
              } catch (error) {
                console.log("error ", error);
              }
              _this.setCurrency();
              if ($element.hasClass("gt_active")) {
                $element.removeClass("gt_active");
              }
            });
          }
        }
      }
    };

    this.setCurrency = function () {
      try {
        var dataStore = {};
        var data = {};
        var currencyActive;
        for (let i = 0; i < _listCurrency.length; i++) {
          const currency = _listCurrency[i];
          if (currency.active === true) {
            currencyActive = currency;
          }
        }
        data.name = currencyActive.value;
        dataStore.currency = data;
        window.GemCurrency.currentCurrency = data.name;
        window.store.update("dataCurrency", dataStore);
      } catch (error) {
        console.log("error ", error);
      }
    };

    this.formatWildMoney = function() {
      var $money = $(".gt_currency[class*=gt_currency--][data-currentprice]");
      if (!$money || !$money.length) {
        return;
      }

      $money.each(function (_, el) {
        var moneyCurrentPrice = $(el).attr("data-currentprice");
        if (!moneyCurrentPrice) {
          return;
        }
        var moneyValue = parseFloat(moneyCurrentPrice.toString().replace(/[^0-9\s,.]/g, "").trim());
        if (Number.isNaN(moneyValue)) {
          return;
        }
        // gt_currency--2nd: for user-friendly price e.g. $50.00, $20... mostly in editor
        // gt_currency--3rd: for shopify price (x100) format: 5000 = 50, 2000 = 20,... mostly for 3rd party app
        if ($(el).hasClass("gt_currency--2nd")) {
          moneyValue *= 100;
        }
        if ($(el).children().length) {
          el = $(el).children().first();
        }
        $(el).html(Shopify.gemFormatMoney(moneyValue));
      });
    };

    this.listen = function () {
      window.store.change("dataCurrency", _this.formatWildMoney);
    };

    this.getCurrencyByCountry = function (countryCode) {
      var listCurrencyByCountry = [
        {
          countryCode: "AD",
          countryName: "Andorra",
          currencyCode: "EUR",
        },
        {
          countryCode: "AE",
          countryName: "United Arab Emirates",
          currencyCode: "AED",
        },
        {
          countryCode: "AF",
          countryName: "Afghanistan",
          currencyCode: "AFN",
        },
        {
          countryCode: "AG",
          countryName: "Antigua and Barbuda",
          currencyCode: "XCD",
        },
        {
          countryCode: "AI",
          countryName: "Anguilla",
          currencyCode: "XCD",
        },
        {
          countryCode: "AL",
          countryName: "Albania",
          currencyCode: "ALL",
        },
        {
          countryCode: "AM",
          countryName: "Armenia",
          currencyCode: "AMD",
        },
        {
          countryCode: "AO",
          countryName: "Angola",
          currencyCode: "AOA",
        },
        {
          countryCode: "AQ",
          countryName: "Antarctica",
          currencyCode: "",
        },
        {
          countryCode: "AR",
          countryName: "Argentina",
          currencyCode: "ARS",
        },
        {
          countryCode: "AS",
          countryName: "American Samoa",
          currencyCode: "USD",
        },
        {
          countryCode: "AT",
          countryName: "Austria",
          currencyCode: "EUR",
        },
        {
          countryCode: "AU",
          countryName: "Australia",
          currencyCode: "AUD",
        },
        {
          countryCode: "AW",
          countryName: "Aruba",
          currencyCode: "AWG",
        },
        {
          countryCode: "AX",
          countryName: "Åland",
          currencyCode: "EUR",
        },
        {
          countryCode: "AZ",
          countryName: "Azerbaijan",
          currencyCode: "AZN",
        },
        {
          countryCode: "BA",
          countryName: "Bosnia and Herzegovina",
          currencyCode: "BAM",
        },
        {
          countryCode: "BB",
          countryName: "Barbados",
          currencyCode: "BBD",
        },
        {
          countryCode: "BD",
          countryName: "Bangladesh",
          currencyCode: "BDT",
        },
        {
          countryCode: "BE",
          countryName: "Belgium",
          currencyCode: "EUR",
        },
        {
          countryCode: "BF",
          countryName: "Burkina Faso",
          currencyCode: "XOF",
        },
        {
          countryCode: "BG",
          countryName: "Bulgaria",
          currencyCode: "BGN",
        },
        {
          countryCode: "BH",
          countryName: "Bahrain",
          currencyCode: "BHD",
        },
        {
          countryCode: "BI",
          countryName: "Burundi",
          currencyCode: "BIF",
        },
        {
          countryCode: "BJ",
          countryName: "Benin",
          currencyCode: "XOF",
        },
        {
          countryCode: "BL",
          countryName: "Saint Barthélemy",
          currencyCode: "EUR",
        },
        {
          countryCode: "BM",
          countryName: "Bermuda",
          currencyCode: "BMD",
        },
        {
          countryCode: "BN",
          countryName: "Brunei",
          currencyCode: "BND",
        },
        {
          countryCode: "BO",
          countryName: "Bolivia",
          currencyCode: "BOB",
        },
        {
          countryCode: "BQ",
          countryName: "Bonaire",
          currencyCode: "USD",
        },
        {
          countryCode: "BR",
          countryName: "Brazil",
          currencyCode: "BRL",
        },
        {
          countryCode: "BS",
          countryName: "Bahamas",
          currencyCode: "BSD",
        },
        {
          countryCode: "BT",
          countryName: "Bhutan",
          currencyCode: "BTN",
        },
        {
          countryCode: "BV",
          countryName: "Bouvet Island",
          currencyCode: "NOK",
        },
        {
          countryCode: "BW",
          countryName: "Botswana",
          currencyCode: "BWP",
        },
        {
          countryCode: "BY",
          countryName: "Belarus",
          currencyCode: "BYR",
        },
        {
          countryCode: "BZ",
          countryName: "Belize",
          currencyCode: "BZD",
        },
        {
          countryCode: "CA",
          countryName: "Canada",
          currencyCode: "CAD",
        },
        {
          countryCode: "CC",
          countryName: "Cocos [Keeling] Islands",
          currencyCode: "AUD",
        },
        {
          countryCode: "CD",
          countryName: "Democratic Republic of the Congo",
          currencyCode: "CDF",
        },
        {
          countryCode: "CF",
          countryName: "Central African Republic",
          currencyCode: "XAF",
        },
        {
          countryCode: "CG",
          countryName: "Republic of the Congo",
          currencyCode: "XAF",
        },
        {
          countryCode: "CH",
          countryName: "Switzerland",
          currencyCode: "CHF",
        },
        {
          countryCode: "CI",
          countryName: "Ivory Coast",
          currencyCode: "XOF",
        },
        {
          countryCode: "CK",
          countryName: "Cook Islands",
          currencyCode: "NZD",
        },
        {
          countryCode: "CL",
          countryName: "Chile",
          currencyCode: "CLP",
        },
        {
          countryCode: "CM",
          countryName: "Cameroon",
          currencyCode: "XAF",
        },
        {
          countryCode: "CN",
          countryName: "China",
          currencyCode: "CNY",
        },
        {
          countryCode: "CO",
          countryName: "Colombia",
          currencyCode: "COP",
        },
        {
          countryCode: "CR",
          countryName: "Costa Rica",
          currencyCode: "CRC",
        },
        {
          countryCode: "CU",
          countryName: "Cuba",
          currencyCode: "CUP",
        },
        {
          countryCode: "CV",
          countryName: "Cape Verde",
          currencyCode: "CVE",
        },
        {
          countryCode: "CW",
          countryName: "Curacao",
          currencyCode: "ANG",
        },
        {
          countryCode: "CX",
          countryName: "Christmas Island",
          currencyCode: "AUD",
        },
        {
          countryCode: "CY",
          countryName: "Cyprus",
          currencyCode: "EUR",
        },
        {
          countryCode: "CZ",
          countryName: "Czechia",
          currencyCode: "CZK",
        },
        {
          countryCode: "DE",
          countryName: "Germany",
          currencyCode: "EUR",
        },
        {
          countryCode: "DJ",
          countryName: "Djibouti",
          currencyCode: "DJF",
        },
        {
          countryCode: "DK",
          countryName: "Denmark",
          currencyCode: "DKK",
        },
        {
          countryCode: "DM",
          countryName: "Dominica",
          currencyCode: "XCD",
        },
        {
          countryCode: "DO",
          countryName: "Dominican Republic",
          currencyCode: "DOP",
        },
        {
          countryCode: "DZ",
          countryName: "Algeria",
          currencyCode: "DZD",
        },
        {
          countryCode: "EC",
          countryName: "Ecuador",
          currencyCode: "USD",
        },
        {
          countryCode: "EE",
          countryName: "Estonia",
          currencyCode: "EUR",
        },
        {
          countryCode: "EG",
          countryName: "Egypt",
          currencyCode: "EGP",
        },
        {
          countryCode: "EH",
          countryName: "Western Sahara",
          currencyCode: "MAD",
        },
        {
          countryCode: "ER",
          countryName: "Eritrea",
          currencyCode: "ERN",
        },
        {
          countryCode: "ES",
          countryName: "Spain",
          currencyCode: "EUR",
        },
        {
          countryCode: "ET",
          countryName: "Ethiopia",
          currencyCode: "ETB",
        },
        {
          countryCode: "FI",
          countryName: "Finland",
          currencyCode: "EUR",
        },
        {
          countryCode: "FJ",
          countryName: "Fiji",
          currencyCode: "FJD",
        },
        {
          countryCode: "FK",
          countryName: "Falkland Islands",
          currencyCode: "FKP",
        },
        {
          countryCode: "FM",
          countryName: "Micronesia",
          currencyCode: "USD",
        },
        {
          countryCode: "FO",
          countryName: "Faroe Islands",
          currencyCode: "DKK",
        },
        {
          countryCode: "FR",
          countryName: "France",
          currencyCode: "EUR",
        },
        {
          countryCode: "GA",
          countryName: "Gabon",
          currencyCode: "XAF",
        },
        {
          countryCode: "GB",
          countryName: "United Kingdom",
          currencyCode: "GBP",
        },
        {
          countryCode: "GD",
          countryName: "Grenada",
          currencyCode: "XCD",
        },
        {
          countryCode: "GE",
          countryName: "Georgia",
          currencyCode: "GEL",
        },
        {
          countryCode: "GF",
          countryName: "French Guiana",
          currencyCode: "EUR",
        },
        {
          countryCode: "GG",
          countryName: "Guernsey",
          currencyCode: "GBP",
        },
        {
          countryCode: "GH",
          countryName: "Ghana",
          currencyCode: "GHS",
        },
        {
          countryCode: "GI",
          countryName: "Gibraltar",
          currencyCode: "GIP",
        },
        {
          countryCode: "GL",
          countryName: "Greenland",
          currencyCode: "DKK",
        },
        {
          countryCode: "GM",
          countryName: "Gambia",
          currencyCode: "GMD",
        },
        {
          countryCode: "GN",
          countryName: "Guinea",
          currencyCode: "GNF",
        },
        {
          countryCode: "GP",
          countryName: "Guadeloupe",
          currencyCode: "EUR",
        },
        {
          countryCode: "GQ",
          countryName: "Equatorial Guinea",
          currencyCode: "XAF",
        },
        {
          countryCode: "GR",
          countryName: "Greece",
          currencyCode: "EUR",
        },
        {
          countryCode: "GS",
          countryName: "South Georgia and the South Sandwich Islands",
          currencyCode: "GBP",
        },
        {
          countryCode: "GT",
          countryName: "Guatemala",
          currencyCode: "GTQ",
        },
        {
          countryCode: "GU",
          countryName: "Guam",
          currencyCode: "USD",
        },
        {
          countryCode: "GW",
          countryName: "Guinea-Bissau",
          currencyCode: "XOF",
        },
        {
          countryCode: "GY",
          countryName: "Guyana",
          currencyCode: "GYD",
        },
        {
          countryCode: "HK",
          countryName: "Hong Kong",
          currencyCode: "HKD",
        },
        {
          countryCode: "HM",
          countryName: "Heard Island and McDonald Islands",
          currencyCode: "AUD",
        },
        {
          countryCode: "HN",
          countryName: "Honduras",
          currencyCode: "HNL",
        },
        {
          countryCode: "HR",
          countryName: "Croatia",
          currencyCode: "HRK",
        },
        {
          countryCode: "HT",
          countryName: "Haiti",
          currencyCode: "HTG",
        },
        {
          countryCode: "HU",
          countryName: "Hungary",
          currencyCode: "HUF",
        },
        {
          countryCode: "ID",
          countryName: "Indonesia",
          currencyCode: "IDR",
        },
        {
          countryCode: "IE",
          countryName: "Ireland",
          currencyCode: "EUR",
        },
        {
          countryCode: "IL",
          countryName: "Israel",
          currencyCode: "ILS",
        },
        {
          countryCode: "IM",
          countryName: "Isle of Man",
          currencyCode: "GBP",
        },
        {
          countryCode: "IN",
          countryName: "India",
          currencyCode: "INR",
        },
        {
          countryCode: "IO",
          countryName: "British Indian Ocean Territory",
          currencyCode: "USD",
        },
        {
          countryCode: "IQ",
          countryName: "Iraq",
          currencyCode: "IQD",
        },
        {
          countryCode: "IR",
          countryName: "Iran",
          currencyCode: "IRR",
        },
        {
          countryCode: "IS",
          countryName: "Iceland",
          currencyCode: "ISK",
        },
        {
          countryCode: "IT",
          countryName: "Italy",
          currencyCode: "EUR",
        },
        {
          countryCode: "JE",
          countryName: "Jersey",
          currencyCode: "GBP",
        },
        {
          countryCode: "JM",
          countryName: "Jamaica",
          currencyCode: "JMD",
        },
        {
          countryCode: "JO",
          countryName: "Jordan",
          currencyCode: "JOD",
        },
        {
          countryCode: "JP",
          countryName: "Japan",
          currencyCode: "JPY",
        },
        {
          countryCode: "KE",
          countryName: "Kenya",
          currencyCode: "KES",
        },
        {
          countryCode: "KG",
          countryName: "Kyrgyzstan",
          currencyCode: "KGS",
        },
        {
          countryCode: "KH",
          countryName: "Cambodia",
          currencyCode: "KHR",
        },
        {
          countryCode: "KI",
          countryName: "Kiribati",
          currencyCode: "AUD",
        },
        {
          countryCode: "KM",
          countryName: "Comoros",
          currencyCode: "KMF",
        },
        {
          countryCode: "KN",
          countryName: "Saint Kitts and Nevis",
          currencyCode: "XCD",
        },
        {
          countryCode: "KP",
          countryName: "North Korea",
          currencyCode: "KPW",
        },
        {
          countryCode: "KR",
          countryName: "South Korea",
          currencyCode: "KRW",
        },
        {
          countryCode: "KW",
          countryName: "Kuwait",
          currencyCode: "KWD",
        },
        {
          countryCode: "KY",
          countryName: "Cayman Islands",
          currencyCode: "KYD",
        },
        {
          countryCode: "KZ",
          countryName: "Kazakhstan",
          currencyCode: "KZT",
        },
        {
          countryCode: "LA",
          countryName: "Laos",
          currencyCode: "LAK",
        },
        {
          countryCode: "LB",
          countryName: "Lebanon",
          currencyCode: "LBP",
        },
        {
          countryCode: "LC",
          countryName: "Saint Lucia",
          currencyCode: "XCD",
        },
        {
          countryCode: "LI",
          countryName: "Liechtenstein",
          currencyCode: "CHF",
        },
        {
          countryCode: "LK",
          countryName: "Sri Lanka",
          currencyCode: "LKR",
        },
        {
          countryCode: "LR",
          countryName: "Liberia",
          currencyCode: "LRD",
        },
        {
          countryCode: "LS",
          countryName: "Lesotho",
          currencyCode: "LSL",
        },
        {
          countryCode: "LT",
          countryName: "Lithuania",
          currencyCode: "EUR",
        },
        {
          countryCode: "LU",
          countryName: "Luxembourg",
          currencyCode: "EUR",
        },
        {
          countryCode: "LV",
          countryName: "Latvia",
          currencyCode: "EUR",
        },
        {
          countryCode: "LY",
          countryName: "Libya",
          currencyCode: "LYD",
        },
        {
          countryCode: "MA",
          countryName: "Morocco",
          currencyCode: "MAD",
        },
        {
          countryCode: "MC",
          countryName: "Monaco",
          currencyCode: "EUR",
        },
        {
          countryCode: "MD",
          countryName: "Moldova",
          currencyCode: "MDL",
        },
        {
          countryCode: "ME",
          countryName: "Montenegro",
          currencyCode: "EUR",
        },
        {
          countryCode: "MF",
          countryName: "Saint Martin",
          currencyCode: "EUR",
        },
        {
          countryCode: "MG",
          countryName: "Madagascar",
          currencyCode: "MGA",
        },
        {
          countryCode: "MH",
          countryName: "Marshall Islands",
          currencyCode: "USD",
        },
        {
          countryCode: "MK",
          countryName: "Macedonia",
          currencyCode: "MKD",
        },
        {
          countryCode: "ML",
          countryName: "Mali",
          currencyCode: "XOF",
        },
        {
          countryCode: "MM",
          countryName: "Myanmar [Burma]",
          currencyCode: "MMK",
        },
        {
          countryCode: "MN",
          countryName: "Mongolia",
          currencyCode: "MNT",
        },
        {
          countryCode: "MO",
          countryName: "Macao",
          currencyCode: "MOP",
        },
        {
          countryCode: "MP",
          countryName: "Northern Mariana Islands",
          currencyCode: "USD",
        },
        {
          countryCode: "MQ",
          countryName: "Martinique",
          currencyCode: "EUR",
        },
        {
          countryCode: "MR",
          countryName: "Mauritania",
          currencyCode: "MRO",
        },
        {
          countryCode: "MS",
          countryName: "Montserrat",
          currencyCode: "XCD",
        },
        {
          countryCode: "MT",
          countryName: "Malta",
          currencyCode: "EUR",
        },
        {
          countryCode: "MU",
          countryName: "Mauritius",
          currencyCode: "MUR",
        },
        {
          countryCode: "MV",
          countryName: "Maldives",
          currencyCode: "MVR",
        },
        {
          countryCode: "MW",
          countryName: "Malawi",
          currencyCode: "MWK",
        },
        {
          countryCode: "MX",
          countryName: "Mexico",
          currencyCode: "MXN",
        },
        {
          countryCode: "MY",
          countryName: "Malaysia",
          currencyCode: "MYR",
        },
        {
          countryCode: "MZ",
          countryName: "Mozambique",
          currencyCode: "MZN",
        },
        {
          countryCode: "NA",
          countryName: "Namibia",
          currencyCode: "NAD",
        },
        {
          countryCode: "NC",
          countryName: "New Caledonia",
          currencyCode: "XPF",
        },
        {
          countryCode: "NE",
          countryName: "Niger",
          currencyCode: "XOF",
        },
        {
          countryCode: "NF",
          countryName: "Norfolk Island",
          currencyCode: "AUD",
        },
        {
          countryCode: "NG",
          countryName: "Nigeria",
          currencyCode: "NGN",
        },
        {
          countryCode: "NI",
          countryName: "Nicaragua",
          currencyCode: "NIO",
        },
        {
          countryCode: "NL",
          countryName: "Netherlands",
          currencyCode: "EUR",
        },
        {
          countryCode: "NO",
          countryName: "Norway",
          currencyCode: "NOK",
        },
        {
          countryCode: "NP",
          countryName: "Nepal",
          currencyCode: "NPR",
        },
        {
          countryCode: "NR",
          countryName: "Nauru",
          currencyCode: "AUD",
        },
        {
          countryCode: "NU",
          countryName: "Niue",
          currencyCode: "NZD",
        },
        {
          countryCode: "NZ",
          countryName: "New Zealand",
          currencyCode: "NZD",
        },
        {
          countryCode: "OM",
          countryName: "Oman",
          currencyCode: "OMR",
        },
        {
          countryCode: "PA",
          countryName: "Panama",
          currencyCode: "PAB",
        },
        {
          countryCode: "PE",
          countryName: "Peru",
          currencyCode: "PEN",
        },
        {
          countryCode: "PF",
          countryName: "French Polynesia",
          currencyCode: "XPF",
        },
        {
          countryCode: "PG",
          countryName: "Papua New Guinea",
          currencyCode: "PGK",
        },
        {
          countryCode: "PH",
          countryName: "Philippines",
          currencyCode: "PHP",
        },
        {
          countryCode: "PK",
          countryName: "Pakistan",
          currencyCode: "PKR",
        },
        {
          countryCode: "PL",
          countryName: "Poland",
          currencyCode: "PLN",
        },
        {
          countryCode: "PM",
          countryName: "Saint Pierre and Miquelon",
          currencyCode: "EUR",
        },
        {
          countryCode: "PN",
          countryName: "Pitcairn Islands",
          currencyCode: "NZD",
        },
        {
          countryCode: "PR",
          countryName: "Puerto Rico",
          currencyCode: "USD",
        },
        {
          countryCode: "PS",
          countryName: "Palestine",
          currencyCode: "ILS",
        },
        {
          countryCode: "PT",
          countryName: "Portugal",
          currencyCode: "EUR",
        },
        {
          countryCode: "PW",
          countryName: "Palau",
          currencyCode: "USD",
        },
        {
          countryCode: "PY",
          countryName: "Paraguay",
          currencyCode: "PYG",
        },
        {
          countryCode: "QA",
          countryName: "Qatar",
          currencyCode: "QAR",
        },
        {
          countryCode: "RE",
          countryName: "Réunion",
          currencyCode: "EUR",
        },
        {
          countryCode: "RO",
          countryName: "Romania",
          currencyCode: "RON",
        },
        {
          countryCode: "RS",
          countryName: "Serbia",
          currencyCode: "RSD",
        },
        {
          countryCode: "RU",
          countryName: "Russia",
          currencyCode: "RUB",
        },
        {
          countryCode: "RW",
          countryName: "Rwanda",
          currencyCode: "RWF",
        },
        {
          countryCode: "SA",
          countryName: "Saudi Arabia",
          currencyCode: "SAR",
        },
        {
          countryCode: "SB",
          countryName: "Solomon Islands",
          currencyCode: "SBD",
        },
        {
          countryCode: "SC",
          countryName: "Seychelles",
          currencyCode: "SCR",
        },
        {
          countryCode: "SD",
          countryName: "Sudan",
          currencyCode: "SDG",
        },
        {
          countryCode: "SE",
          countryName: "Sweden",
          currencyCode: "SEK",
        },
        {
          countryCode: "SG",
          countryName: "Singapore",
          currencyCode: "SGD",
        },
        {
          countryCode: "SH",
          countryName: "Saint Helena",
          currencyCode: "SHP",
        },
        {
          countryCode: "SI",
          countryName: "Slovenia",
          currencyCode: "EUR",
        },
        {
          countryCode: "SJ",
          countryName: "Svalbard and Jan Mayen",
          currencyCode: "NOK",
        },
        {
          countryCode: "SK",
          countryName: "Slovakia",
          currencyCode: "EUR",
        },
        {
          countryCode: "SL",
          countryName: "Sierra Leone",
          currencyCode: "SLL",
        },
        {
          countryCode: "SM",
          countryName: "San Marino",
          currencyCode: "EUR",
        },
        {
          countryCode: "SN",
          countryName: "Senegal",
          currencyCode: "XOF",
        },
        {
          countryCode: "SO",
          countryName: "Somalia",
          currencyCode: "SOS",
        },
        {
          countryCode: "SR",
          countryName: "Suriname",
          currencyCode: "SRD",
        },
        {
          countryCode: "SS",
          countryName: "South Sudan",
          currencyCode: "SSP",
        },
        {
          countryCode: "ST",
          countryName: "São Tomé and Príncipe",
          currencyCode: "STD",
        },
        {
          countryCode: "SV",
          countryName: "El Salvador",
          currencyCode: "USD",
        },
        {
          countryCode: "SX",
          countryName: "Sint Maarten",
          currencyCode: "ANG",
        },
        {
          countryCode: "SY",
          countryName: "Syria",
          currencyCode: "SYP",
        },
        {
          countryCode: "SZ",
          countryName: "Swaziland",
          currencyCode: "SZL",
        },
        {
          countryCode: "TC",
          countryName: "Turks and Caicos Islands",
          currencyCode: "USD",
        },
        {
          countryCode: "TD",
          countryName: "Chad",
          currencyCode: "XAF",
        },
        {
          countryCode: "TF",
          countryName: "French Southern Territories",
          currencyCode: "EUR",
        },
        {
          countryCode: "TG",
          countryName: "Togo",
          currencyCode: "XOF",
        },
        {
          countryCode: "TH",
          countryName: "Thailand",
          currencyCode: "THB",
        },
        {
          countryCode: "TJ",
          countryName: "Tajikistan",
          currencyCode: "TJS",
        },
        {
          countryCode: "TK",
          countryName: "Tokelau",
          currencyCode: "NZD",
        },
        {
          countryCode: "TL",
          countryName: "East Timor",
          currencyCode: "USD",
        },
        {
          countryCode: "TM",
          countryName: "Turkmenistan",
          currencyCode: "TMT",
        },
        {
          countryCode: "TN",
          countryName: "Tunisia",
          currencyCode: "TND",
        },
        {
          countryCode: "TO",
          countryName: "Tonga",
          currencyCode: "TOP",
        },
        {
          countryCode: "TR",
          countryName: "Turkey",
          currencyCode: "TRY",
        },
        {
          countryCode: "TT",
          countryName: "Trinidad and Tobago",
          currencyCode: "TTD",
        },
        {
          countryCode: "TV",
          countryName: "Tuvalu",
          currencyCode: "AUD",
        },
        {
          countryCode: "TW",
          countryName: "Taiwan",
          currencyCode: "TWD",
        },
        {
          countryCode: "TZ",
          countryName: "Tanzania",
          currencyCode: "TZS",
        },
        {
          countryCode: "UA",
          countryName: "Ukraine",
          currencyCode: "UAH",
        },
        {
          countryCode: "UG",
          countryName: "Uganda",
          currencyCode: "UGX",
        },
        {
          countryCode: "UM",
          countryName: "U.S. Minor Outlying Islands",
          currencyCode: "USD",
        },
        {
          countryCode: "US",
          countryName: "United States",
          currencyCode: "USD",
        },
        {
          countryCode: "UY",
          countryName: "Uruguay",
          currencyCode: "UYU",
        },
        {
          countryCode: "UZ",
          countryName: "Uzbekistan",
          currencyCode: "UZS",
        },
        {
          countryCode: "VA",
          countryName: "Vatican City",
          currencyCode: "EUR",
        },
        {
          countryCode: "VC",
          countryName: "Saint Vincent and the Grenadines",
          currencyCode: "XCD",
        },
        {
          countryCode: "VE",
          countryName: "Venezuela",
          currencyCode: "VEF",
        },
        {
          countryCode: "VG",
          countryName: "British Virgin Islands",
          currencyCode: "USD",
        },
        {
          countryCode: "VI",
          countryName: "U.S. Virgin Islands",
          currencyCode: "USD",
        },
        {
          countryCode: "VN",
          countryName: "Vietnam",
          currencyCode: "VND",
        },
        {
          countryCode: "VU",
          countryName: "Vanuatu",
          currencyCode: "VUV",
        },
        {
          countryCode: "WF",
          countryName: "Wallis and Futuna",
          currencyCode: "XPF",
        },
        {
          countryCode: "WS",
          countryName: "Samoa",
          currencyCode: "WST",
        },
        {
          countryCode: "XK",
          countryName: "Kosovo",
          currencyCode: "EUR",
        },
        {
          countryCode: "YE",
          countryName: "Yemen",
          currencyCode: "YER",
        },
        {
          countryCode: "YT",
          countryName: "Mayotte",
          currencyCode: "EUR",
        },
        {
          countryCode: "ZA",
          countryName: "South Africa",
          currencyCode: "ZAR",
        },
        {
          countryCode: "ZM",
          countryName: "Zambia",
          currencyCode: "ZMW",
        },
        {
          countryCode: "ZW",
          countryName: "Zimbabwe",
          currencyCode: "ZWL",
        },
      ];
      var currentCurrency = listCurrencyByCountry.find((item) => item.countryCode === countryCode);
      return currentCurrency.currencyCode;
    }

    this.init();
  };
  jQuery.fn.gtAddonCurency = function (options) {
    return this.each(function () {
      var plugin = new jQuery.gtAddonCurency(this, options, jQuery);
      jQuery(this).data("gtaddoncurency", plugin);
    });
  };
})(jQuery);

function initAddonsCurrency() {
  var $widget = $(".gt_widget-qGDJdYKeSdU1UgC");
  var currencyFormating = "shortPrefix";
  var decimalsOnOff = true;
  var decimalSeparator = "auto";
  var roundDecimals = "auto";

  if(roundDecimals == "") {
    roundDecimals = "auto";
  }

  if ($widget && $widget.length) {
    window.OriginalGemCurrency = {
      moneyFormats: {
        USD: {
          money_format: "${{amount}}",
          money_with_currency_format: "${{amount}} USD",
        },
        EUR: {
          money_format: "&#8364;{{amount}}",
          money_with_currency_format: "&#8364;{{amount}} EUR",
        },
        GBP: {
          money_format: "&#163;{{amount}}",
          money_with_currency_format: "&#163;{{amount}} GBP",
        },
        CAD: {
          money_format: "&#36;{{amount}}",
          money_with_currency_format: "&#36;{{amount}} CAD",
        },
        ALL: {
          money_format: "&#76;&#101;&#107; {{amount}}",
          money_with_currency_format: "&#76;&#101;&#107; {{amount}}",
        },
        DZD: {
          money_format: "&#1583;&#1580; {{amount}}",
          money_with_currency_format: "&#1583;&#1580; {{amount}}",
        },
        AOA: {
          money_format: "&#75;&#122;{{amount}}",
          money_with_currency_format: "&#75;&#122;{{amount}}",
        },
        ARS: {
          money_format: "&#36;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#36;{{amount_with_comma_separator}}",
        },
        AMD: {
          money_format: "&#x534;{{amount}}",
          money_with_currency_format: "&#x534;{{amount}} AMD",
        },
        AWG: {
          money_format: "&#402;{{amount}}",
          money_with_currency_format: "&#402;{{amount}}",
        },
        AUD: {
          money_format: "${{amount}}",
          money_with_currency_format: "${{amount}} AUD",
        },
        BBD: {
          money_format: "&#36;{{amount}}",
          money_with_currency_format: "&#36;{{amount}}",
        },
        AZN: {
          money_format: "&#8380;{{amount}}",
          money_with_currency_format: "&#8380;{{amount}}",
        },
        BDT: {
          money_format: "&#2547;{{amount}}",
          money_with_currency_format: "&#2547;{{amount}}",
        },
        BSD: {
          money_format: "&#36;{{amount}}",
          money_with_currency_format: "&#36;{{amount}}",
        },
        BHD: {
          money_format: ".&#1583;.&#1576;{{amount}}",
          money_with_currency_format: ".&#1583;.&#1576;{{amount}}",
        },
        BYN: {
          money_format: "&#112;&#46;{{amount}}",
          money_with_currency_format: "&#112;&#46;{{amount}}",
        },
        BZD: {
          money_format: "&#66;&#90;&#36;{{amount}}",
          money_with_currency_format: "&#66;&#90;&#36;{{amount}}",
        },
        BTN: {
          money_format: "&#78;&#117;&#46;{{amount}}",
          money_with_currency_format: "&#78;&#117;&#46;{{amount}}",
        },
        BAM: {
          money_format: "&#75;&#77;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#75;&#77;{{amount_with_comma_separator}}",
        },
        BRL: {
          money_format: "&#82;&#36;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#82;&#36;{{amount_with_comma_separator}}",
        },
        BOB: {
          money_format: "&#36;&#98;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#36;&#98;{{amount_with_comma_separator}}",
        },
        BWP: {
          money_format: "&#80;{{amount}}",
          money_with_currency_format: "&#80;{{amount}}",
        },
        BND: {
          money_format: "&#36;{{amount}}",
          money_with_currency_format: "&#36;{{amount}}",
        },
        BGN: {
          money_format: "&#1083;&#1074;{{amount}}",
          money_with_currency_format: "&#1083;&#1074;{{amount}}",
        },
        MMK: {
          money_format: "&#75;{{amount}}",
          money_with_currency_format: "&#75;{{amount}}",
        },
        KHR: {
          money_format: "&#6107;{{amount}}",
          money_with_currency_format: "&#6107;{{amount}}",
        },
        KYD: {
          money_format: "&#36;{{amount}}",
          money_with_currency_format: "&#36;{{amount}}",
        },
        XAF: {
          money_format: "&#70;&#67;&#70;&#65;{{amount}}",
          money_with_currency_format: "&#70;&#67;&#70;&#65;{{amount}}",
        },
        CLP: {
          money_format: "&#36;{{amount_no_decimals}}",
          money_with_currency_format: "&#36;{{amount_no_decimals}}",
        },
        CNY: {
          money_format: "&#165;{{amount}}",
          money_with_currency_format: "&#165;{{amount}} CNY",
        },
        COP: {
          money_format: "&#36;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#36;{{amount_with_comma_separator}} COP",
        },
        CRC: {
          money_format: "&#8353; {{amount_with_comma_separator}}",
          money_with_currency_format: "&#8353; {{amount_with_comma_separator}} CRC",
        },
        HRK: {
          money_format: "&#107;&#110;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#107;&#110;{{amount_with_comma_separator}}",
        },
        CZK: {
          money_format: "&#75;&#269;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#75;&#269;{{amount_with_comma_separator}}",
        },
        DKK: {
          money_format: "&#107;&#114;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#107;&#114;{{amount_with_comma_separator}}",
        },
        DOP: {
          money_format: "&#82;&#68;&#36;{{amount}}",
          money_with_currency_format: "&#82;&#68;&#36;{{amount}}",
        },
        XCD: {
          money_format: "${{amount}}",
          money_with_currency_format: "${{amount}}",
        },
        EGP: {
          money_format: "&#163;{{amount}}",
          money_with_currency_format: "&#163;{{amount}}",
        },
        ETB: {
          money_format: "&#66;&#114;{{amount}}",
          money_with_currency_format: "&#66;&#114;{{amount}}",
        },
        XPF: {
          money_format: "&#70;{{amount_no_decimals_with_comma_separator}}",
          money_with_currency_format: "&#70;{{amount_no_decimals_with_comma_separator}}",
        },
        FJD: {
          money_format: "&#36{{amount}}",
          money_with_currency_format: "&#36{{amount}}",
        },
        GMD: {
          money_format: "&#68;{{amount}}",
          money_with_currency_format: "&#68;{{amount}}",
        },
        GHS: {
          money_format: "&#162;{{amount}}",
          money_with_currency_format: "&#162;{{amount}}",
        },
        GTQ: {
          money_format: "&#81;{{amount}}",
          money_with_currency_format: "&#81;{{amount}}",
        },
        GYD: {
          money_format: "&#36;{{amount}}",
          money_with_currency_format: "&#36;{{amount}}",
        },
        GEL: {
          money_format: "&#4314;{{amount}}",
          money_with_currency_format: "&#4314;{{amount}}",
        },
        HNL: {
          money_format: "&#76;{{amount}}",
          money_with_currency_format: "&#76;{{amount}}",
        },
        HKD: {
          money_format: "&#36;{{amount}}",
          money_with_currency_format: "&#36;{{amount}}",
        },
        HUF: {
          money_format: "&#70;&#116;{{amount_no_decimals_with_comma_separator}}",
          money_with_currency_format: "&#70;&#116;{{amount_no_decimals_with_comma_separator}}",
        },
        ISK: {
          money_format: "&#107;&#114;{{amount_no_decimals}}",
          money_with_currency_format: "&#107;&#114;{{amount_no_decimals}}",
        },
        INR: {
          money_format: "&#8377; {{amount}}",
          money_with_currency_format: "&#8377; {{amount}}",
        },
        IDR: {
          money_format: "&#82;&#112;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#82;&#112; {{amount_with_comma_separator}}",
        },
        ILS: {
          money_format: "&#8362;{{amount}}",
          money_with_currency_format: "&#8362;{{amount}}",
        },
        JMD: {
          money_format: "&#74;&#36;{{amount}}",
          money_with_currency_format: "&#74;&#36;{{amount}}",
        },
        JPY: {
          money_format: "&#165;{{amount_no_decimals}}",
          money_with_currency_format: "&#165;{{amount_no_decimals}} JPY",
        },
        JEP: {
          money_format: "&#163;{{amount}}",
          money_with_currency_format: "&#163;{{amount}}",
        },
        JOD: {
          money_format: "&#74;&#68;{{amount}}",
          money_with_currency_format: "&#74;&#68;{{amount}} JOD",
        },
        KZT: {
          money_format: "&#1083;&#1074;{{amount}}",
          money_with_currency_format: "&#1083;&#1074;{{amount}} KZT",
        },
        KES: {
          money_format: "&#75;&#83;&#104;{{amount}}",
          money_with_currency_format: "&#75;&#83;&#104;{{amount}}",
        },
        KWD: {
          money_format: "&#1583;.&#1603;{{amount}}",
          money_with_currency_format: "&#1583;.&#1603;{{amount}}",
        },
        KGS: {
          money_format: "&#1083;&#1074;{{amount}}",
          money_with_currency_format: "&#1083;&#1074;{{amount}}",
        },
        LVL: {
          money_format: "&#76;&#115;{{amount}}",
          money_with_currency_format: "&#76;&#115;{{amount}} LVL",
        },
        LBP: {
          money_format: "&#163;{{amount}}",
          money_with_currency_format: "&#163;{{amount}} LBP",
        },
        LTL: {
          money_format: "&#76;&#116;{{amount}}",
          money_with_currency_format: "&#76;&#116;{{amount}}",
        },
        MGA: {
          money_format: "&#65;&#114;{{amount}}",
          money_with_currency_format: "&#65;&#114;{{amount}} MGA",
        },
        MKD: {
          money_format: "&#1076;&#1077;&#1085;{{amount}}",
          money_with_currency_format: "&#1076;&#1077;&#1085;{{amount}}",
        },
        MOP: {
          money_format: "&#77;&#79;&#80;&#36;{{amount}}",
          money_with_currency_format: "&#77;&#79;&#80;&#36;{{amount}}",
        },
        MVR: {
          money_format: ".&#1923;{{amount}}",
          money_with_currency_format: ".&#1923;{{amount}} MVR",
        },
        MXN: {
          money_format: "&#36;{{amount}}",
          money_with_currency_format: "&#36;{{amount}} ",
        },
        MYR: {
          money_format: "&#82;&#77;{{amount}}",
          money_with_currency_format: "&#82;&#77;{{amount}} MYR",
        },
        MUR: {
          money_format: "&#8360;{{amount}}",
          money_with_currency_format: "&#8360;{{amount}} MUR",
        },
        MDL: {
          money_format: "&#76;{{amount}}",
          money_with_currency_format: "&#76;{{amount}} MDL",
        },
        MAD: {
          money_format: "&#1583;.&#1605;.{{amount}}",
          money_with_currency_format: "&#1583;.&#1605;.{{amount}} MAD",
        },
        MNT: {
          money_format: "&#8366;{{amount_no_decimals}}",
          money_with_currency_format: "&#8366;{{amount_no_decimals}} MNT",
        },
        MZN: {
          money_format: "&#77;&#84;{{amount}}",
          money_with_currency_format: "&#77;&#84;{{amount}} MZN",
        },
        NAD: {
          money_format: "&#36;{{amount}}",
          money_with_currency_format: "&#36;{{amount}} NAD",
        },
        NPR: {
          money_format: "&#8360;{{amount}}",
          money_with_currency_format: "&#8360;{{amount}} NPR",
        },
        ANG: {
          money_format: "&#402;{{amount}}",
          money_with_currency_format: "&#402;{{amount}}",
        },
        NZD: {
          money_format: "${{amount}}",
          money_with_currency_format: "${{amount}} NZD",
        },
        NIO: {
          money_format: "&#67;&#36;{{amount}}",
          money_with_currency_format: "&#67;&#36;{{amount}} NIO",
        },
        NGN: {
          money_format: "&#8358;{{amount}}",
          money_with_currency_format: "&#8358;{{amount}} NGN",
        },
        NOK: {
          money_format: "&#107;&#114;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#107;&#114;{{amount_with_comma_separator}} NOK",
        },
        OMR: {
          money_format: "&#65020;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#65020;{{amount_with_comma_separator}} OMR",
        },
        PKR: {
          money_format: "&#8360;{{amount}}",
          money_with_currency_format: "&#8360;{{amount}} PKR",
        },
        PGK: {
          money_format: "&#75;{{amount}}",
          money_with_currency_format: "&#75;{{amount}} PGK",
        },
        PYG: {
          money_format: "&#71;&#115;{{amount_no_decimals_with_comma_separator}}",
          money_with_currency_format: "&#71;&#115;{{amount_no_decimals_with_comma_separator}} PYG",
        },
        PEN: {
          money_format: "&#83;&#47;&#46;{{amount}}",
          money_with_currency_format: "&#83;&#47;&#46;{{amount}} PEN",
        },
        PHP: {
          money_format: "&#8369;{{amount}}",
          money_with_currency_format: "&#8369;{{amount}} PHP",
        },
        PLN: {
          money_format: "&#122;&#322;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#122;&#322;{{amount_with_comma_separator}} zl PLN",
        },
        QAR: {
          money_format: "&#65020;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#65020;{{amount_with_comma_separator}}",
        },
        RON: {
          money_format: "&#108;&#101;&#105;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#108;&#101;&#105;{{amount_with_comma_separator}} lei RON",
        },
        RUB: {
          money_format: "&#8381;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#8381;{{amount_with_comma_separator}} RUB",
        },
        RWF: {
          money_format: "FRw{{amount_no_decimals}}",
          money_with_currency_format: "FRw{{amount_no_decimals}} RWF",
        },
        WST: {
          money_format: "&#87;&#83;&#36;{{amount}}",
          money_with_currency_format: "&#87;&#83;&#36;{{amount}} WST",
        },
        SAR: {
          money_format: "&#65020;{{amount}}",
          money_with_currency_format: "&#65020;{{amount}} SAR",
        },
        STD: {
          money_format: "&#68;&#98;{{amount}}",
          money_with_currency_format: "&#68;&#98;{{amount}} STD",
        },
        RSD: {
          money_format: "&#1044;&#1080;&#1085;&#46;{{amount}}",
          money_with_currency_format: "&#1044;&#1080;&#1085;&#46;{{amount}} RSD",
        },
        SCR: {
          money_format: "&#8360;{{amount}}",
          money_with_currency_format: "&#8360;{{amount}} SCR",
        },
        SGD: {
          money_format: "&#36;{{amount}}",
          money_with_currency_format: "&#36;{{amount}} SGD",
        },
        SYP: {
          money_format: "&#163;{{amount}}",
          money_with_currency_format: "&#163;{{amount}} SYP",
        },
        ZAR: {
          money_format: "&#82;{{amount}}",
          money_with_currency_format: "&#82;{{amount}} ZAR",
        },
        KRW: {
          money_format: "&#8361;{{amount_no_decimals}}",
          money_with_currency_format: "&#8361;{{amount_no_decimals}} KRW",
        },
        LKR: {
          money_format: "&#8360;{{amount}}",
          money_with_currency_format: "&#8360;{{amount}} LKR",
        },
        SEK: {
          money_format: "&#107;&#114;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#107;&#114;{{amount_with_comma_separator}} SEK",
        },
        CHF: {
          money_format: "Fr.{{amount}}",
          money_with_currency_format: "Fr.{{amount}} CHF",
        },
        TWD: {
          money_format: "&#78;&#84;&#36;{{amount}}",
          money_with_currency_format: "&#78;&#84;&#36;{{amount}} TWD",
        },
        THB: {
          money_format: "&#3647;{{amount}};",
          money_with_currency_format: "&#3647;{{amount}} THB",
        },
        TZS: {
          money_format: "Sh {{amount}}",
          money_with_currency_format: "Sh {{amount}} TZS",
        },
        TTD: {
          money_format: "&#36;{{amount}}",
          money_with_currency_format: "&#36;{{amount}} TTD",
        },
        TND: {
          money_format: "&#1583;.&#1578;{{amount}}",
          money_with_currency_format: "&#1583;.&#1578;{{amount}} DT",
        },
        TRY: {
          money_format: "&#8378;{{amount}}",
          money_with_currency_format: "&#8378;{{amount}} TL",
        },
        UGX: {
          money_format: "&#85;&#83;&#104;{{amount_no_decimals}}",
          money_with_currency_format: "&#85;&#83;&#104;{{amount_no_decimals}} UGX",
        },
        UAH: {
          money_format: "&#8372;{{amount}}",
          money_with_currency_format: "&#8372;{{amount}} UAH",
        },
        AED: {
          money_format: "&#1583;.&#1573;{{amount}}",
          money_with_currency_format: "&#1583;.&#1573;{{amount}} AED",
        },
        UYU: {
          money_format: "&#36;&#85;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#36;&#85;{{amount_with_comma_separator}} UYU",
        },
        VUV: {
          money_format: "&#86;&#84;{{amount}}",
          money_with_currency_format: "&#86;&#84;{{amount}}VT",
        },
        VEF: {
          money_format: "&#66;&#115;{{amount_with_comma_separator}}",
          money_with_currency_format: "&#66;&#115;{{amount_with_comma_separator}} VEF",
        },
        VND: {
          money_format: "&#8363;{{amount_no_decimals_with_comma_separator}}",
          money_with_currency_format: "&#8363; {{amount_no_decimals_with_comma_separator}} VND",
        },
        BTC: {
          money_format: "&#8383; {{amount_no_decimals}} BTC",
          money_with_currency_format: "&#8383; {{amount_no_decimals}} BTC",
        },
        XOF: {
          money_format: "CFA{{amount}}",
          money_with_currency_format: "CFA{{amount}} XOF",
        },
        ZMW: {
          money_format: "K{{amount_no_decimals_with_comma_separator}}",
          money_with_currency_format: "ZMW{{amount_no_decimals_with_comma_separator}}",
        },
        AFN: {
          money_format: "&#65;&#102; {{amount}}",
          money_with_currency_format: "&#65;&#102; {{amount}} AFN",
        },
        BMD: {
          money_format: "&#36; {{amount}}",
          money_with_currency_format: "&#36; {{amount}} BMD",
        },
        BIF: {
          money_format: "&#70;&#66;&#117; {{amount}}",
          money_with_currency_format: "&#70;&#66;&#117; {{amount}} BIF",
        },
        CVE: {
          money_format: "&#36; {{amount}}",
          money_with_currency_format: "&#36; {{amount}} CVE",
        },
        KMF: {
          money_format: "&#67;&#70; {{amount}}",
          money_with_currency_format: "&#67;&#70; {{amount}} KMF",
        },
        CDF: {
          money_format: "&#70;&#67; {{amount}}",
          money_with_currency_format: "&#70;&#67; {{amount}} CDF",
        },
        CUC: {
          money_format: "$ {{amount}}",
          money_with_currency_format: "${{amount}} CUC",
        },
        CUP: {
          money_format: "&#8369;{{amount}}",
          money_with_currency_format: "&#8369;{{amount}} CUP",
        },
        DJF: {
          money_format: "&#70;&#100;&#106; {{amount}}",
          money_with_currency_format: "&#70;&#100;&#106; {{amount}} DJF",
        },
        ERN: {
          money_format: "Nkf {{amount}}",
          money_with_currency_format: "Nkf {{amount}} ERN",
        },
        EEK: {
          money_format: "{{amount}}",
          money_with_currency_format: "{{amount}} EEK",
        },
        FKP: {
          money_format: "&#163; {{amount}}",
          money_with_currency_format: "&#163; {{amount}} FKP",
        },
        GIP: {
          money_format: "&#163; {{amount}}",
          money_with_currency_format: "&#163; {{amount}} GIP",
        },
        XAU: {
          money_format: "{{amount}}",
          money_with_currency_format: "{{amount}} XAU",
        },
        GGP: {
          money_format: "{{amount}}",
          money_with_currency_format: "{{amount}} GGP",
        },
        GNF: {
          money_format: "&#70;&#71; {{amount}}",
          money_with_currency_format: "&#70;&#71; {{amount}} GNF",
        },
        HTG: {
          money_format: "&#71; {{amount}}",
          money_with_currency_format: "&#71; {{amount}} HTG",
        },
        XDR: {
          money_format: "{{amount}}",
          money_with_currency_format: "{{amount}} XDR",
        },
        IRR: {
          money_format: "&#65020; {{amount}}",
          money_with_currency_format: "&#65020; {{amount}} IRR",
        },
        IQD: {
          money_format: "&#1593;.&#1583; {{amount}}",
          money_with_currency_format: "&#1593;.&#1583; {{amount}} IQD",
        },
        IMP: {
          money_format: "{{amount}}",
          money_with_currency_format: "{{amount}} IMP",
        },
        LAK: {
          money_format: "&#8365; {{amount}}",
          money_with_currency_format: "&#8365; {{amount}} LAK",
        },
        LSL: {
          money_format: "&#76; {{amount}}",
          money_with_currency_format: "&#76; {{amount}} LSL",
        },
        LRD: {
          money_format: "&#36; {{amount}}",
          money_with_currency_format: "&#36; {{amount}} LRD",
        },
        LYD: {
          money_format: "&#1604;.&#1583; {{amount}}",
          money_with_currency_format: "&#1604;.&#1583; {{amount}} LYD",
        },
        MWK: {
          money_format: "&#77;&#75; {{amount}}",
          money_with_currency_format: "&#77;&#75; {{amount}} MWK",
        },
        MRO: {
          money_format: "&#85;&#77; {{amount}}",
          money_with_currency_format: "&#85;&#77; {{amount}} MRO",
        },
        KPW: {
          money_format: "&#8361; {{amount}}",
          money_with_currency_format: "&#8361; {{amount}} KPW",
        },
        XPD: {
          money_format: "{{amount}}",
          money_with_currency_format: "{{amount}} XPD",
        },
        PAB: {
          money_format: "&#66;&#47;&#46; {{amount}}",
          money_with_currency_format: "&#66;&#47;&#46; {{amount}} PAB",
        },
        XPT: {
          money_format: "{{amount}}",
          money_with_currency_format: "{{amount}} XPT",
        },
        SHP: {
          money_format: "&#163; {{amount}}",
          money_with_currency_format: "&#163; {{amount}} SHP",
        },
        SVC: {
          money_format: "&#36; {{amount}}",
          money_with_currency_format: "&#36; {{amount}} SVC",
        },
        SPL: {
          money_format: "{{amount}}",
          money_with_currency_format: "{{amount}} SPL",
        },
        SLL: {
          money_format: "&#76;&#101; {{amount}}",
          money_with_currency_format: "&#76;&#101; {{amount}} SLL",
        },
        XAG: {
          money_format: "{{amount}}",
          money_with_currency_format: "{{amount}} XAG",
        },
        SKK: {
          money_format: "{{amount}}",
          money_with_currency_format: "{{amount}} SKK",
        },
        SBD: {
          money_format: "&#36; {{amount}}",
          money_with_currency_format: "&#36; {{amount}} SBD",
        },
        SOS: {
          money_format: "&#83; {{amount}}",
          money_with_currency_format: "&#83; {{amount}} SOS",
        },
        SDG: {
          money_format: "&#163; {{amount}}",
          money_with_currency_format: "&#163; {{amount}} SDG",
        },
        SRD: {
          money_format: "&#36; {{amount}}",
          money_with_currency_format: "&#36; {{amount}} SRD",
        },
        SZL: {
          money_format: "&#76; {{amount}}",
          money_with_currency_format: "&#76; {{amount}} SZL",
        },
        TJS: {
          money_format: "&#84;&#74;&#83; {{amount}}",
          money_with_currency_format: "&#84;&#74;&#83; {{amount}} TJS",
        },
        TOP: {
          money_format: "&#84;&#36; {{amount}}",
          money_with_currency_format: "&#84;&#36; {{amount}} TOP",
        },
        TMT: {
          money_format: "&#109; {{amount}}",
          money_with_currency_format: "&#109; {{amount}} TMT",
        },
        TVD: {
          money_format: "{{amount}}",
          money_with_currency_format: "{{amount}} TVD",
        },
        UZS: {
          money_format: "&#1083;&#1074; {{amount}}",
          money_with_currency_format: "&#1083;&#1074; {{amount}} UZS",
        },
        YER: {
          money_format: "&#65020; {{amount}}",
          money_with_currency_format: "&#65020; {{amount}} YER",
        },
        ZWD: {
          money_format: "{{amount}}",
          money_with_currency_format: "{{amount}} ZWD",
        },
      },
      currentCurrency: "USD",
    };
    window.GemCurrency = {
      moneyFormats: {},
      currentCurrency: "USD"
    };
    // re-format all currency
    Object.keys(window.OriginalGemCurrency.moneyFormats).forEach(currency => {
      const moneyFormat = generateCurrencyFormating({
        formatSetting: "shortPrefix",
        currencyCode: currency,
        decimalsOnOff,
        decimalSeparator,
      });
      const moneyWithCurrencyFormat = generateCurrencyFormating({
        formatSetting: "explicitPrefix",
        currencyCode: currency,
        decimalsOnOff,
        decimalSeparator,
      });
      window.OriginalGemCurrency.moneyFormats[currency] = {
        money_format: moneyFormat,
        money_with_currency_format: moneyWithCurrencyFormat,
      };
      
      const currentFormat = generateCurrencyFormating({
        formatSetting: currencyFormating,
        currencyCode: currency,
        decimalsOnOff,
        decimalSeparator,
      });
      window.GemCurrency.moneyFormats[currency] = {
        money_format: currentFormat,
        money_with_currency_format: currentFormat
      };
    });

    // Shopify
    if (typeof Shopify === "undefined") {
      Shopify = {};
    }
    /**
     * overwrite function in editor - global script: gemFormatMoney
     * @param cents cents
     * @param currency currency
     * @param dataCurrency dataCurrency
     * @param customCurrencyFormating custom format that not use setting from addon
     * @returns any
     */
    Shopify.gemFormatMoney = function (cents, currency, dataCurrency, customCurrencyFormating, notApplyRoundDecimal) {
      try {
        var price = priceCalculation(cents, __GemSettings.currency, window.GemCurrency.currentCurrency);
        var format = generateCurrencyFormating({
          formatSetting: customCurrencyFormating || currencyFormating,
          currencyCode: window.GemCurrency.currentCurrency,
          decimalsOnOff,
          decimalSeparator
        });
        var trueFormatedPrice = Shopify.formatMoney(price, format);

        if (!decimalsOnOff || roundDecimals === 'auto') {
          return trueFormatedPrice;
        }

        var truePriceDecimals = (price/100).toFixed(20).split(".");
        var decimalSign = decimalSeparator === "comma" ? "," : ".";
        var truePriceDecimalsIndex = trueFormatedPrice.indexOf(decimalSign);

        if (truePriceDecimalsIndex === -1) {
          return trueFormatedPrice;
        }

        if (notApplyRoundDecimal) {
          trueFormatedPrice = trueFormatedPrice.substring(0, truePriceDecimalsIndex + 1) + '00' + trueFormatedPrice.substring(truePriceDecimalsIndex + 1 + 2);
        } else {
          trueFormatedPrice = trueFormatedPrice.substring(0, truePriceDecimalsIndex + 1) + roundDecimals + trueFormatedPrice.substring(truePriceDecimalsIndex + 1 + 2);
        }
        
        return trueFormatedPrice;
      } catch (e) {
        console.log(e);
        return Shopify.formatMoney(cents, __GemSettings.money);
      }
    };

    var $currencyJsonElement = $widget.find(".CurencyJson");
    if (!$currencyJsonElement || !$currencyJsonElement.length) {
      return;
    }

    var curencyJson = $($currencyJsonElement[0]).text();

    try {
      if (curencyJson) {
        curencyJson = JSON.parse(curencyJson);
        curencyJson = curencyJson.map((currency) => {
          if (!currency.active) {
            currency.active = false;
          }
          return currency;
        });

        var currentAutoPosition = getCurrentAutoPosition();
        var $hook = $("[hook-currency], [data-hook-currency]");
        if (currentAutoPosition && $hook && $hook.length) {
          var $cacheWidget = $widget.detach();
          if ($cacheWidget && $cacheWidget.length) {
            $hook.html($cacheWidget[0]);
            $widget = $(".gt_widget-qGDJdYKeSdU1UgC");
            $widget.removeClass("gt_currency_fixed");
          }
        } else {
          $widget.addClass("gt_currency_fixed");
        }
        /* Comment */
        if (!currentAutoPosition && $hook && $hook.children() && $hook.children().length) {
          $("body").append($widget);
          $widget.find(".list-currency-modal").removeAttr("style");        
          $hook.children().remove();
        }
        /* End_Comment */

        $widget.gtAddonCurency({
          id: "qGDJdYKeSdU1UgC",
          mode: "production",
          dataCurrencySettings: curencyJson,
          classNameCurrentCurrency: ".current-currency .name_country",
          classFlagsCurrent: ".current-currency .flags",
          htmlItemCurrency: "<li class='item-modal'><div class='flags'></div><div class='name'></div></li>",
          classContainerListCurrency: ".list-currency-modal ul",
          classItemCurrency: ".item-modal",
          classFlagsItemCurrency: ".flags",
          classNameItemCurrency: ".name",
        });

        
      }
    } catch (error) {
      console.log("error ", error);
    }
  }
}

function getCurrentAutoPosition() {
  var windowWidth = jQuery(window).width();
  var currentAutoPosition = true;
  if (windowWidth <= 576) {
    currentAutoPosition = false;
  } else if (windowWidth <= 992) {
    currentAutoPosition = false;
  } else if (windowWidth <= 1200) {
    currentAutoPosition = true;
  } else {
    currentAutoPosition = true;
  }

  return currentAutoPosition;
}

function priceCalculation(amount, from, to) {
  if (!window.GemCurrency || !window.GemCurrency.rates || !window.GemCurrency.rates[from] || !window.GemCurrency.rates[to]) {
    return;
  }

  return (amount * window.GemCurrency.rates[from]) / window.GemCurrency.rates[to];
}

function generateCurrencyFormating({ formatSetting, currencyCode, decimalsOnOff, decimalSeparator }) {
  if (!window.OriginalGemCurrency) {
    return;
  }

  var defaultFormat = window.OriginalGemCurrency.moneyFormats[currencyCode].money_with_currency_format;
  var parts = /(.*)({{.*}})/.exec(defaultFormat);
  var [currencySymbol, moneyFormat] = [parts[1], parts[2]];

  var NO_DECIMALS = "_no_decimals";
  var WITH_COMMA = "_with_comma_separator";
  moneyFormat = `{{amount${decimalsOnOff ? "" : NO_DECIMALS}${decimalSeparator === "comma" ? WITH_COMMA: ""}}}`;

  switch (formatSetting) {
    case "shortPrefix": return `${currencySymbol.trim()}${moneyFormat.trim()}`;
    case "shortSuffix": return `${moneyFormat.trim()} ${currencySymbol.trim()}`;
    case "explicitPrefix": return `${currencySymbol.trim()}${moneyFormat.trim()} ${currencyCode}`;
    case "explicitSuffix": return `${moneyFormat.trim()}${currencySymbol.trim()} ${currencyCode}`;
    case "codeOnly": return `${moneyFormat.trim()} ${currencyCode}`;
    default: return defaultFormat.replace(/\{\{\s*(\w+)\s*\}\}/, moneyFormat);
  }
}

initAddonsCurrency();

var delayResize = 0;
$(window).off("resize.checkSwitchScreensqGDJdYKeSdU1UgC").on("resize.checkSwitchScreensqGDJdYKeSdU1UgC", function() {
  initAddonsCurrency();
});

        }
        funcESWidgetqGDJdYKeSdU1UgC()
      } catch(e) {
        console.error("Error ESWidget Id: qGDJdYKeSdU1UgC" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESWidgetXy4MTWd5UciMMY8 = function() {
          (function() {
  var elementClassName = ".gt_widget-Xy4MTWd5UciMMY8";
  var id = "Xy4MTWd5UciMMY8";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var displayAfterAllPage = "scroll10%OfPage";
    var $activeScroll = $element.find(".gt_js--scroll");
    var timeoutPreview = undefined;
    /* store get state block script */
    /* methods block script */
    function openSticky() {
      $activeScroll.addClass("gt_active");
    }

    function closeSticky() {
      $activeScroll.removeClass("gt_active");
    }

    function eventShowSticky(displayAfter) {
      //addeventscroll
      $(window).off("scroll.gt_widget-Xy4MTWd5UciMMY8").on("scroll.gt_widget-Xy4MTWd5UciMMY8", function() {
        var scrollTop = document.documentElement.scrollTop;
        var offsetHeight = document.documentElement.offsetHeight;
        var clientHeight = document.documentElement.clientHeight;
        var percentStringEjs = displayAfter;
        var percentScroll = percentStringEjs.match(/scroll(\d+)%/)[1];
        if (scrollTop > ((offsetHeight - clientHeight) * Number(percentScroll)) / 100) {
          openSticky();
        } else {
          closeSticky();
        }
      });
    }

    function convertAnimationName(name) {
      
    }

    function animationButtonBackToTop(value) {
      
    }
    /* init block script */
    eventShowSticky(displayAfterAllPage);

    $activeScroll.click(function() {
      $('html,body').animate({
        scrollTop: 0
      }, 800);
    });
    /* store subscribe block script */
    store.subscribe("preview-Xy4MTWd5UciMMY8-effectButtonBackToTop", animationButtonBackToTop);

    function destroy() {
      store.unsubscribe("preview-Xy4MTWd5UciMMY8-effectButtonBackToTop", animationButtonBackToTop);
    }
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESWidgetXy4MTWd5UciMMY8()
      } catch(e) {
        console.error("Error ESWidget Id: Xy4MTWd5UciMMY8" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXy4MTWd5UciMMY8_boxIconAbsolute = function() {
          (function() {
  var elementClassName = ".gt_atom-Xy4MTWd5UciMMY8_boxIconAbsolute";
  var id = "Xy4MTWd5UciMMY8_boxIconAbsolute";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Xy4MTWd5UciMMY8_boxIconAbsolute",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXy4MTWd5UciMMY8_boxIconAbsolute()
      } catch(e) {
        console.error("Error ESAtom Id: Xy4MTWd5UciMMY8_boxIconAbsolute" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomXy4MTWd5UciMMY8_iconInfoContact = function() {
          (function() {
  var elementClassName = ".gt_atom-Xy4MTWd5UciMMY8_iconInfoContact";
  var id = "Xy4MTWd5UciMMY8_iconInfoContact";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Xy4MTWd5UciMMY8_iconInfoContact",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomXy4MTWd5UciMMY8_iconInfoContact()
      } catch(e) {
        console.error("Error ESAtom Id: Xy4MTWd5UciMMY8_iconInfoContact" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESWidget3cH2oKuexPRdzgP = function() {
          (function (jQuery) {
  jQuery.gtAddonProductUpsell = function (element, options) {
    var defaults = {
      discounts: [],
      showType: "list",
      product: {
        id: -1
      },
    };
    this.settings = {};
    var $element = jQuery(element);
    var _this = this;

    this.init = function () {
      this.settings = jQuery.extend({}, defaults, options);
      this.listen();
      this.event();
      this.buyNowLoading(false);
    };

    /**
     * Listen for setting change
     */
    this.listen = function () {
      /* Comment */
      // change description text
      store.change("optimize-3cH2oKuexPRdzgP-descriptionText", function (value) {
        var el = $element.find(".gt_descriptionText");
        if (!el) {
          return;
        }

        el.text(value);
        _this.settings.descriptionText = value;
      });
      // change button "Buy now" text
      store.change("optimize-3cH2oKuexPRdzgP-buttonText", function (value) {
        var el = $element.find(".gt_buttonText");
        if (!el) {
          return;
        }

        el.text(value);
        _this.settings.buttonText = value;
      });
      // change preview button "Added"
      store.change("optimize-3cH2oKuexPRdzgP-previewButtonAdd", function (value) {
        var $discountEl = $element.find(".gt_widgets-actions");
        if (!$discountEl) {
          return;
        }

        if (value) {
          $discountEl.addClass("gt_actions-preview-added");
        } else {
          $discountEl.removeClass("gt_actions-preview-added");
        }
      });
      // change button "Added" text
      store.change("optimize-3cH2oKuexPRdzgP-buttonAddText", function (value) {
        var el = $element.find(".gt_buttonAddText");
        if (!el) {
          return;
        }

        el.text(value);
        _this.settings.buttonAddText = value;
      });
      // change table quantity label
      store.change("optimize-3cH2oKuexPRdzgP-labelQuantity", function (value) {
        var el = $element.find(".gt_labelQuantity");
        if (!el) {
          return;
        }

        el.text(value);
        _this.settings.labelQuantity = value;
      });
      // change table discount label
      store.change("optimize-3cH2oKuexPRdzgP-labelDiscount", function (value) {
        var el = $element.find(".gt_labelDiscount");
        if (!el) {
          return;
        }

        el.text(value);
        _this.settings.labelDiscount = value;
      });
      /*End_Comment*/
    };

    /**
     * User events
     */
    this.event = function () {
      var discounts = _this.settings.discounts;
      // sort discounts
      discounts.sort(function (a, b) {
        return a.quantity - b.quantity;
      });

      // empty the container
      var $discountPlace = $element;
      if (_this.settings.showType === "list") {
        $discountPlace = $element.find(".gt_discount_container");
        if (!discounts || !discounts.length) {
          $discountPlace.html(" <div class='gt_error'>" + _this.settings.errorMessage + "</div>");
        } else {
          $discountPlace.html("");
        }
      } else if (_this.settings.showType === "table") {
        $discountPlace = $element.find(".gt_widgets_table");
        if (!discounts || !discounts.length) {
          $discountPlace.html("<div class='gt_error'>" + _this.settings.errorMessage + "</div>");
        } else {
          $discountPlace.html(`
          <div class="gt_widgets gt_widgets_quantity">
            <div class="gt_quantity_title">
              <span class="gt_labelQuantity">${_this.settings.labelQuantity}</span>
            </div>
          </div>
          <div class="gt_widgets gt_widgets_discount">
            <div class="gt_quantity_title">
              <span class="gt_labelDiscount">${_this.settings.labelDiscount}</span>
            </div>
          </div>
          `);
        }
      }

      // render
      _this.renderDiscount($discountPlace, discounts, _this.settings.showType);
      _this.triggerQuantityTable(window.store.get(`quantity${_this.settings.product.id}`));
      _this.setEventListener();

      // listen for change quantity
      window.store.change(`quantity${_this.settings.product.id}`, function (value) {
        if (_this.settings.showType === "list") {
          _this.triggerQuantityList(value);
        } else if (_this.settings.showType === "table") {
          _this.triggerQuantityTable(value);
        }
      });
    };

    this.renderDiscount = function ($discountPlace, discounts, showType) {
      const productVariant = window.store.get(`variant${_this.settings.product.id}`);
      const isDefaultVariant = `production` == `production` && _this.settings.product.variants && _this.settings.product.variants.length === 1 &&_this.settings.product.variants[0].title === "Default Title";
      if (showType === "list") {
        discounts.forEach(item => {
          const $discountItem = `
          <div class="gt_flex gt_product_widgets_save">
            <div class="gt_product-line1">
              <div class="gt_widgets_save_text">
                <p class="gt_widgets_save_text_item">${item.title}</p>
                <p class="gt_widgets_save_text_note"><span class="gt_descriptionText">${_this.settings.descriptionText}</span></p>
              </div>
              <div class="gt_widgets-actions gt_actions-${item.quantity}">
                <button class="gt_btn gt_button_buy ${(!productVariant || !productVariant.available) ? "disabled": ""}"><span class="gt_buttonText">${_this.settings.buttonText}</span></button>
                <button class="gt_flex gt_align-i-center gt_btn gt_button_added">
                  <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M6.1344 10.3712L11.8615 4.36372C12.0945 4.1193 12.4845 4.1193 12.7176 4.36372C12.9353 4.59217 12.9353 4.95139 12.7176 5.17984L6.8582 11.326C6.46417 11.7393 5.80463 11.7393 5.41061 11.326L3.28245 9.09369C3.06466 8.86524 3.06466 8.50602 3.28245 8.27757C3.51547 8.03315 3.9055 8.03315 4.13852 8.27757L6.1344 10.3712Z" fill="currentColor"/>
                  </svg>
                  <span class="gt_buttonAddText">${_this.settings.buttonAddText}</span>
                </button>
                <button class="gt_flex gt_align-i-center gt_btn gt_button_loading">
                <svg version="1.1" id="loader-1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
                width="40px" height="40px" viewBox="0 0 50 50" style="enable-background:new 0 0 50 50;" xml:space="preserve">
                  <path fill="currentColor" d="M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z">
                    <animateTransform attributeType="xml"
                      attributeName="transform"
                      type="rotate"
                      from="0 25 25"
                      to="360 25 25"
                      dur="0.6s"
                      repeatCount="indefinite"/>
                    </path>
                  </svg>
                </button>
              </div>
            </div>
            <div class="gt_product-line2 ${isDefaultVariant ? "gt_hide_default_variant" : ""}">
              <span class="gt_select-variant-text">${_this.settings.selectVariantTitle}</span>
              <ul class="gt_list-selector">
                ${[...Array(item.quantity).keys()].map(index => (`
                  <li class="gt_variant-selector-line">
                    <span class="gt_variant-selector-badge-text">${_this.settings.selectVariantItemLabel} #${index + 1}: </span>
                    <select class="gt_variant-selector">
                      ${_this.settings.product.variants.map(variant => (`
                        <option value="${variant.id}" ${variant.available ? "" : "disabled"}>${variant.title}</option>
                      `)).join("")}
                    </select>
                  </li>
                `)).join("")}
              </ul>
            </div>
          </div>
          `;
          $discountPlace.append($discountItem);
        });
      } else if (showType === "table") {
        const quantityColumn = $discountPlace.find(".gt_widgets_quantity");
        const discountColumn = $discountPlace.find(".gt_widgets_discount");

        discounts.forEach(item => {
          quantityColumn.append(`
            <p>${item.quantity}+
          `);
          discountColumn.append(`
            <p>${item.discount}%
          `);
        });
      }
    };

    this.triggerQuantityList = function (value) {
      _this.settings.discounts.forEach(item => {
        _this.buyNowAdded(item, value);
      });
    };

    this.triggerQuantityTable = function (value) {
      if (!value) {
        value = 1;
      }

      var tableNoteEl = $element.find(".gt_widgets_table_note");

      if (!tableNoteEl) {
        return;
      }

      var nextItem = _this.settings.discounts.find(item => item.quantity > value);
      if (!nextItem) {
        tableNoteEl.addClass("hide");
        return;
      }

      tableNoteEl.removeClass("hide");
      var nextQuantityEl = tableNoteEl.find(".gt_next_quantity");
      var nextDiscountEl = tableNoteEl.find(".gt_next_discount");
      nextQuantityEl.text(nextItem.quantity - value);
      nextDiscountEl.text(nextItem.discount);
    };

    this.setEventListener = function () {
      // Toggle select variant
      var $selectToggler = $element.find(".gt_select-variant-text");
      if ($selectToggler && $selectToggler.length) {
        $selectToggler
          .off("click.toggleSelectVariant3cH2oKuexPRdzgP")
          .on("click.toggleSelectVariant3cH2oKuexPRdzgP", function () {
            $(this).toggleClass("gt_select-open");
          });
      }

      if ("production" !== "production") {
        return;
      }

      // "Buy now"
      var buttonBuyNow = $element.find(".gt_button_buy");
      if (!buttonBuyNow || !buttonBuyNow.length) {
        return;
      }

      buttonBuyNow
        .off("click.buyNow")
        .on("click.buyNow", function (event) {
          event.preventDefault();

          var discountEl = $(event.target).parents(".gt_widgets-actions");
          if (!discountEl || !discountEl.length) {
            return;
          }

          var actionClass = discountEl.attr("class").match(/gt_actions-(\d+)/);
          if (!actionClass || actionClass.length < 2) {
            return;
          }

          var $selectedVariants = $(this).parents(".gt_product_widgets_save").find(".gt_variant-selector").find(":selected");
          if (!$selectedVariants || !$selectedVariants.length) {
            return;
          }
          var selectedVariantsId = Array.from($selectedVariants.map((index, s) => s.value));

          var productQuantity = parseInt(actionClass[1]);
          if (productQuantity > selectedVariantsId.length) {
            // add current variant to cart in case there's any missing item from selected variants
            var additionalItems = Array(productQuantity - selectedVariantsId.length);
            var productVariant = window.store.get(`variant${_this.settings.product.id}`);
            if (productVariant && productVariant.available) {
              additionalItems = additionalItems.fill(productVariant);
            } else {
              additionalItems = additionalItems.fill(null);
            }
          }

          selectedVariantsId = selectedVariantsId.concat(additionalItems).filter(s => s);
          var variantsQuantityMap = selectedVariantsId.reduce((last, curr) => {
            var foundVariant = last.find(i => i.id == curr);
            if (!foundVariant) {
              const properties = _this.getPropertiesFromForm($(event.target), curr);
              return [...last, {
                id: curr,
                quantity: 1,
                properties,
              }];
            }
            foundVariant.quantity += 1;
            return last;
          }, []);

          _this.buyNowLoading({
            quantity: productQuantity
          }, true);
          window.gfTheme.addManyItems({
            items: variantsQuantityMap
          }, function (data, error) {
            if (error) {
              console.log("Error UQD Add To Cart: ", error);
              var parser = document.createElement("a");
              var url = window.location.href;
              parser.href = url;
              var cartUrl = parser.protocol + "//" + parser.host + "/cart";
              window.location.href = cartUrl;
            } else {
              window.gfTheme.getCart(function (cart) {
                if (cart) {
                  window.store.update("cart.item_count", cart.item_count);
                }

                if (_this.settings.actionBuyRedirect === "cart") {
                  var parser = document.createElement("a");
                  var url = window.location.href;
                  parser.href = url;
                  var cartUrl = parser.protocol + "//" + parser.host + "/cart";
                  window.location.href = cartUrl;
                } else if (_this.settings.actionBuyRedirect === "checkout") {
                  var parser = document.createElement("a");
                  var url = window.location.href;
                  parser.href = url;
                  var checkoutURL = parser.protocol + "//" + parser.host + "/checkout";
                  var applyDiscount = window.store.get("discount");
                  if (applyDiscount && applyDiscount.title) {
                    checkoutURL += "?discount=" + applyDiscount.title;
                  }
                  window.location.href = checkoutURL;
                } else { // stay on page & open cart drawer
                  window.SOLID.store.dispatch("openCartPopup", "cart_drawer");
                }
              });
            }
            _this.buyNowLoading(null, false);
          });
        });
    };

    this.getPropertiesFromForm = function($target, variantId) {
      const $sectionProduct = $target.closest("[keyword='product'], [data-keyword='product']");
      let properties = {};
      const $propertyInputs = $sectionProduct.find("input[name^='properties[']");
      if ($propertyInputs && $propertyInputs.length) {
        for (let j = 0; j < $propertyInputs.length; j++) {
          const $propertyInput = $($propertyInputs[j]);
          const attributeName = $propertyInput.attr("name");
          const splits = attributeName.match(/\[(.+)\]/);
          if (splits && splits.length >= 2 && $propertyInput.val()) {
            const propertyName = splits[1];
            properties[propertyName] = $propertyInput.val();
          }
        }
      }
      return properties;
    }

    this.buyNowLoading = function (item, state) {
      if (!item) {
        if (!state) {
          $element.find(".gt_widgets-actions").removeClass("gt_loading");
        }
        return;
      }
      
      var widgetElement = $element.find(`.gt_actions-${item.quantity}`);
      if (!widgetElement || !widgetElement.length) {
        return;
      }
      
      if (state) {
        widgetElement.addClass("gt_loading");
      } else {
        widgetElement.removeClass("gt_loading");
      }
    };

    this.buyNowAdded = function (item, quantity) {
      var widgetElement = $element.find(`.gt_actions-${item.quantity}`);
      if (!widgetElement) {
        return;
      }

      if (!quantity || quantity >= item.quantity) {
        widgetElement.addClass("gt_actions-added");
      } else {
        widgetElement.removeClass("gt_actions-added");
      }
    };

    this.init();

  };

  jQuery.fn.gtAddonProductUpsell = function (options) {
    return this.each(function () {
      var plugin = new jQuery.gtAddonProductUpsell(this, options);
      jQuery(this).data("gtaddonproductupsell", plugin);
    });
  };
})(jQuery);

var $widget = $(".gt_widget-3cH2oKuexPRdzgP");

var descriptionText = "For each product";
var buttonText = "Buy now!";
var buttonAddText = "Added";
var labelQuantity = "Quantity";
var labelDiscount = "Discount";
var selectVariantTitle = "Select variants";
var selectVariantItemLabel = "Item";
var actionBuyRedirect = "cart";

var DISCOUNT_ZERO_MESSAGE = "Discount Value or Minimum Quantity for this product is 0! There need to be positive numbers for addon to show.";
var NOT_ACTIVE_MSG = "Current product is not in any active campaign! Click “Edit Campaign” in left setting sidebar to edit campaigns.";

if ($widget && $widget.length) {
  var campaignSettings = [{"active":true,"data":{"campaignType":"all","campaignPickProducts":[],"discountDetails":[{"hidden":false,"settings":[{"attribute":"quantity","id":"quantity","min":0,"title":"Minimum Quantity","type":"input:number","value":2},{"attribute":"discount","id":"discount","min":0,"title":"Discount Value","type":"input:unit","units":["%"],"value":"10%"}],"showChild":false,"title":"Buy 2 Get 10% Off"},{"hidden":false,"settings":[{"attribute":"quantity","id":"quantity","min":0,"title":"Minimum Quantity","type":"input:number","value":3},{"attribute":"discount","id":"discount","min":0,"title":"Discount Value","type":"input:unit","units":["%"],"value":"15%"}],"showChild":true,"title":"Buy 3 Get 15% Off"}],"discountType":"quantity","active":true},"id":"1659830822388w45YikIFo6xiK5jcwz6U","name":"Quantiy Break","settings":[{"attribute":"campaignType","id":"campaignType","links":[{"snippet":{"hide":false,"id":"campaignPickProducts"},"value":"products"}],"options":[{"text":"All","value":"all"},{"text":"Products","value":"products"}],"title":"Campaign Type","type":"select","value":"all"},{"attribute":"campaignPickProducts","hide":true,"id":"campaignPickProducts","title":"Pick Products","type":"pickProductList","value":[]},{"attribute":"discountDetails","discountType":"quantity","id":"discountDetails","title":"Create Discount Tiers","type":"tabs","value":[{"hidden":false,"settings":[{"attribute":"quantity","id":"quantity","min":0,"title":"Minimum Quantity","type":"input:number","value":2},{"attribute":"discount","id":"discount","min":0,"title":"Discount Value","type":"input:unit","units":["%"],"value":"10%"}],"showChild":false,"title":"Buy 2 Get 10% Off"},{"hidden":false,"settings":[{"attribute":"quantity","id":"quantity","min":0,"title":"Minimum Quantity","type":"input:number","value":3},{"attribute":"discount","id":"discount","min":0,"title":"Discount Value","type":"input:unit","units":["%"],"value":"15%"}],"showChild":true,"title":"Buy 3 Get 15% Off"}]}]}];
  var showType = "list";

  $widget.each(function (index, widget) {
    var $productEl = $(widget).closest("section[keyword='product'], section[data-keyword='product']");
    // var $productEl = $('section[data-keyword="product"]');
    if (!$productEl) {
      return;
    }

    var $productJson = $productEl.find(".ProductJson");
    if (!$productJson) {
      return;
    }

    try {
      var productJson = JSON.parse($productJson.text());
    } catch (error) {
      // eslint-disable-next-line no-console
      console.log(error);
    }

    if (!productJson) {
      return;
    }

    // sort campaigns by campaignType priority: all < collection < products
    campaignSettings = campaignSettings.sort(function (c1, c2) {
      return c1.data.campaignType > c2.data.campaignType ? 1 : -1;
    });

    // show empty upsell on editor
    if (!campaignSettings.length && "production" === "dev") {
      showProductUpsell($(widget), [], showType, productJson.id);
      return;
    }

    var shownUpsell = false;
    campaignSettings.forEach(function (campaign) {
      var isActiveCampaign = campaign.data.active !== false;
      var campaignIncludeProduct = campaign.data.campaignPickProducts.some(product => product.id === productJson.id);

      if (!isActiveCampaign || !(campaign.data.campaignType === "all" || (campaign.data.campaignType === "products" && campaignIncludeProduct))) {
        if ("production" === "dev" && !shownUpsell) {
          showProductUpsell($(widget), [], showType, productJson.id);
        }
        return;
      }

      var discountDetails = campaign.data.discountDetails;
      var discounts = [];
      discountDetails.forEach(item => {
        var productQuantity = item.settings[0].value;
        var productDiscount = parseInt(item.settings[1].value);

        if (productQuantity <= 0 || productDiscount <= 0) {
          if ("production" === "dev" && !shownUpsell) {
            showProductUpsell($(widget), [], showType, productJson, DISCOUNT_ZERO_MESSAGE);
          }
          return;
        }

        discounts.push({
          title: item.title,
          quantity: productQuantity,
          discount: productDiscount
        });
      });

      if (discounts.length) {
        shownUpsell = true;
        showProductUpsell($(widget), discounts, showType, productJson);
      }
    });
  });
}

function showProductUpsell($widget, discounts, showType, productJson, errorMessage) {
  $widget.gtAddonProductUpsell({
    discounts: discounts,
    showType: showType,
    product: productJson,
    descriptionText,
    buttonText,
    buttonAddText,
    labelQuantity,
    labelDiscount,
    selectVariantTitle,
    selectVariantItemLabel,
    errorMessage: errorMessage || NOT_ACTIVE_MSG,
    actionBuyRedirect
  });
  $widget.removeClass("hide");
}

        }
        funcESWidget3cH2oKuexPRdzgP()
      } catch(e) {
        console.error("Error ESWidget Id: 3cH2oKuexPRdzgP" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
                try {
                  function funcDW3cH2oKuexPRdzgP() {
                    window.SOLID = window.SOLID || {};
                    var discounts = window.SOLID.discounts || [];
                    discounts.push({"data":[{"type":"all","values":[{"code":"H0unnpj4yP","number":2,"value":-10,"value_type":"percentage"},{"code":"a4z0YcQLHb","number":3,"value":-15,"value_type":"percentage"}]}],"type":"quantity","eType":"theme"});
                    window.SOLID.discounts = discounts;
                  }
                  funcDW3cH2oKuexPRdzgP()
                } catch(e) {
                  console.error("Error widget id: 3cH2oKuexPRdzgP" )
                  console.log("=============================== START ERROR =================================")
                  console.log(e)
                  console.log("===============================  END ERROR  =================================")
                }
              
      try {
        const funcESWidgetDbif4KfGylDxbaE = function() {
          
        }
        funcESWidgetDbif4KfGylDxbaE()
      } catch(e) {
        console.error("Error ESWidget Id: Dbif4KfGylDxbaE" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESWidgetrLZEauGpn5udz71 = function() {
          /* gtCartDrawer */
(function (jQuery) {
  var GtCartDrawer = function (element, options) {
    var defaults = {
      autoOpenCartDrawerShoppingCart: false,
      classListCartItem: ".gt_list_item_cart",
      classCheckCartPage: ".gt_check_cart_page",
      mode: "production",
      effectCartDrawer: "",
      id: 0,
      previewCartDrawer: false,
      autoOpenCartDrawerMobile: false,
      autoOpenCartDrawerShoppingCartMobile: false,
      acceptTermsTextOnOff: false,
      showDiscountInput: false,
      CLASS_TOTAL_PRICE_DISCOUNT: "gt_total_item_price--auto-discount",
      showOptionTitle: false,
    };
    var gtCartV5Instance;
    var $element = jQuery(element);
    var _this = this;
    var $listItemCart = null;
    this.settings = {};
    this.cartItems = [];
    this.isAnimationRunning = false;
    var $loadingButton = jQuery(
      "<div class=\"atom-button-loading-circle-loader\">" +
        "<div class=\"atom-button-loading-check-mark atom-button-loading-check-mark-draw\"></div>" +
      "</div>"
    ).css("display", "inline-block");
    this.isInCartPage = false;

    this.init = function () {
      _this.settings = jQuery.extend({}, defaults, options);
      if (_this.settings.mode === "dev") {
        if (_this.settings.previewCartDrawer) {
          _this.setStyleBody("active_cart_drawer");
        } else {
          _this.setStyleBody("inactive_cart_drawer");
        }
      }
      $(".gt_show-cart").click(function(){
        $element.addClass("gt_active");
        setTimeout(() => {
          jQuery("body").css({
            "overflow-y": "hidden",
          });
        }, 50);
      });
      var $checkCartPage = $element.find(_this.settings.classCheckCartPage);
      if ($checkCartPage && $checkCartPage.length) {
        var isCartPage = $checkCartPage.attr("data-check");
        if (isCartPage == "true") {
          _this.isInCartPage = true;
        }
      }
      this.emptyPriceInTemplateCartItem();
      // neu ton tai cart drawer thi emit cho store co 1 cart drawer
      this.responsiveVariableMobile();
      jQuery(window).resize(function () {
        _this.responsiveVariableMobile();
      });
      // get list cart item
      $listItemCart = $element.find(_this.settings.classListCartItem);
      _this.event();
      _this.listen();
    };
    
    /**
     * emptyPriceInTemplateCartItem xóa giá mặc định ở template cart item để tích hợp với các app currency converter
     */
    this.emptyPriceInTemplateCartItem = function () {
      var $templateCartItem = $element.find(".gt_cart_item_template");
      var $priceTemplate = $templateCartItem.find(".gt_total_price");
      $priceTemplate.html("");
      var $comparePriceTemplate = $templateCartItem.find(".gt_compare_price");
      $comparePriceTemplate.html("");
    }

    this.responsiveVariableMobile = function () {
      var newAddonsStore = window.SOLID.store.getState("addons") || {};
      var isMobile = jQuery(window).width() < 992 || /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      newAddonsStore.cart_drawer =
        !isMobile || _this.settings.autoOpenCartDrawerMobile
          ? {
              autoOpenCartDrawer: !isMobile ? _this.settings.autoOpenCartDrawerShoppingCart : _this.settings.autoOpenCartDrawerShoppingCartMobile,
            }
          : null;
      window.SOLID.store.dispatch("addons", newAddonsStore);
    };

    this.event = function () {
      _this.initCartItemLibs();
      if (_this.settings.mode === "dev") {
        setTimeout(function () {
          _this.setHeight();
          _this.effectCartItems();
        }, 100); 
      }
    };

    this.listen = function () {
      // loading when click button
      _this.addEventLoadingButtonCheckout();
      // add to cart success
      window.SOLID.store.subscribe("addToCartSuccess", function () {
        var cart = window.SOLID.store.getState("cart");
        // không sử dụng response của api shopify vì trường hợp discount buy X get Y trả về sản phẩm discount chứ không phải sản phẩm vừa add 
        // nên cần so sánh 2 array cart cũ và mới để tìm ra sản phẩm vừa add và đẩy nó lên đầu cart drawer
        var lineItem = _this.getNewAddItem(cart.items) || [];
        _this.reRenderCartItems(cart.items, lineItem);
        $element.addClass("gt_active");
        _this.setStyleBody("active_cart_drawer");
      });
      window.SOLID.store.subscribe("rerenderingAjaxShopifyCartDrawer", function (isRerendering) {
        if (!isRerendering) {
          _this.effectCartItems();
        }
      });
      // khi co su kien openCartPopup thi mo cart drawer
      window.SOLID.store.subscribe("openCartPopup", function (cartPopup) {
        if (cartPopup === "cart_drawer") {
          window.SOLID.store.dispatch("rerenderingAjaxShopifyCartDrawer", false);
          $element.addClass("gt_active");
          _this.setStyleBody("active_cart_drawer");
        }
      });
      

      // khi delete item thi cap nhat lai cartItems
      window.SOLID.store.subscribe("gtCartInput", function (cart) {
        if (_this.cartItems.length > cart.items.length) {
          _this.reRenderCartItems(cart.items, []);
          // _this.cartItems = cart.items;
        } else if (_this.cartItems.length < cart.items.length) {
          var line_item = cart.items.filter(function (item) { 
            return _this.cartItems.every(function (cartItem) { 
              return String(cartItem.id) !== String(item.id) || String(cartItem.key) !== String(item.key)
            });
          });
          _this.reRenderCartItems(cart.items, {items: line_item});
          _this.cartItems = cart.items;
        }
        setTimeout(function () {
          _this.setHeight();
          _this.updateDiscountedPriceInCartItems();
        }, 0);
      });
      //khi click ra ngoài window thì đóng cart drawer
      var $overlayBg = $element.find(".gt_coverlay_bg");
      jQuery($overlayBg)
        .off("click.closeCartDrawerrLZEauGpn5udz71")
        .on("click.closeCartDrawerrLZEauGpn5udz71", function () {
          $element.find(".gt_cart_drawer-content").scrollTop(0);
          $element.removeClass("gt_active");
          if (_this.settings.mode === "dev") {
            $element.removeClass("gt_preview");
          }
          _this.setStyleBody("inactive_cart_drawer");
          jQuery(".gt_popup_confirm").removeClass("gt_active");
          _this.removeEffectCartItems();
        });
      //khi click vào button close trên màn mobile thì đóng cart drawer
      var $iconCloseCartDrawer = $element.find(".gt_button_close_mobile");
      $iconCloseCartDrawer.off("click.closeCartDrawerrLZEauGpn5udz71").on("click.closeCartDrawerrLZEauGpn5udz71", function () {
        $element.find(".gt_cart_drawer-content").scrollTop(0);
        $element.removeClass("gt_active");
        if (_this.settings.mode === "dev") {
          $element.removeClass("gt_preview");
        }
        _this.setStyleBody("inactive_cart_drawer");
        jQuery(".gt_popup_confirm").removeClass("gt_active");
        _this.removeEffectCartItems();
      });

      // set lai chieu cao khi co discount
      window.SOLID.store.subscribe("gtCartDiscountPriceShowDiscount", function () {
        _this.setHeight();
        _this.updateDiscountedPriceInCartItems();
      });
      /** Fix async order note: support multi order note for desktop and mobile... */
      var $notes = $element.find("[name='note']");
      if ($notes && $notes.length) {
        $notes
          .off("keyup.changeNote keydown.changeNote change.changeNote paste.changeNote")
          .on("keyup.changeNote keydown.changeNote change.changeNote paste.changeNote", function () {
            var $note = jQuery(this);
            var value = $note.val();
            $notes.not(this).attr("value", value).val(value);
          });
      }
      window.SOLID.store.subscribe("cart-refresh", function (cart) {
        // _this.replaceCartItemRefresh(cart);
        // _this.updateDiscountedPriceInCartItems();
        _this.reRenderCartItems(cart.items, [])
      });
      // listen input discount
      function disableButtonApplyCheckout() { 
        var $buttonApplyDiscount = $element.find(".gt_button_apply_discount");
        $buttonApplyDiscount.attr("disabled", "true");
        $buttonApplyDiscount.addClass("gt_disabled_checkout");
      }
      function enableButtonApplyCheckout() {
        var $buttonApplyDiscount = $element.find(".gt_button_apply_discount");
        $buttonApplyDiscount.removeAttr("disabled");
        $buttonApplyDiscount.removeClass("gt_disabled_checkout");
      }
      if (_this.settings.showDiscountInput && _this.settings.mode === "production") {
        var $discountInput = $element.find(".gt_discount_input");
        if (!$discountInput.length) {
          return;
        }
        if (!$discountInput.val()) {
          disableButtonApplyCheckout();
        }
        window.SOLID.store.subscribe("updateDiscountCode", function() {
          if ($discountInput.val()) {
            enableButtonApplyCheckout();
          } else {
            disableButtonApplyCheckout();
          }
        })
        $discountInput.off("input").on("input", function (e) {
          $discountInput.attr("value", e.target.value);
          if (e.target.value) {
            enableButtonApplyCheckout();
          } else {
            disableButtonApplyCheckout();
          }
        });
      }
    };

    this.getNewAddItem = function(newCartItems) {
      var oldCartItemsDom = $listItemCart.children() || [];
      for (var i = 0; i < newCartItems.length; i++) {
        var newItem = newCartItems[i];
        var isNewItem = true;
        for (var j = 0; j < oldCartItemsDom.length; j++) {
          var $oldItem = $(oldCartItemsDom[j]);
          var oldKey = $oldItem.attr("data-key");
          var oldQuantity = $oldItem.find("input[name='quantity']").val();
          if (newItem.key === oldKey && Number(newItem.quantity) === Number(oldQuantity)) {
            isNewItem = false;
            break;
          }
        }
        if (isNewItem) {
          return newItem;
        }
      }
      return null;
    }

    this.addEventLoadingButtonCheckout = function() {
      // checkout main
      var $buttonCheckout = $element.find(".gt_checkout_button_main");
      $buttonCheckout.off("click").on("click", function (e) {
        var $textEl = $buttonCheckout.find(".gt_button-content-text");
        $textEl.css("visibility", "hidden");
        $buttonCheckout.find(".gt_button-content").append($loadingButton);
        setTimeout(function() {
          // reset to default when click back button in browser 
          _this.resetToDefaultButton();
        }, 1500)
      });
      // discount
      var $buttonApplyDiscount = $element.find(".gt_button_apply_discount");
      $buttonApplyDiscount.off("click").on("click", function (e) {
        var $textEl = $buttonApplyDiscount.find(".gt_button-content-text");
        $textEl.css("visibility", "hidden");
        $buttonApplyDiscount.find(".gt_button-content").append($loadingButton);
        setTimeout(function() {
          // reset to default when click back button in browser 
          _this.resetToDefaultButton(true);
        }, 1500)
      });
    }

    this.resetToDefaultButton = function (isApplyDiscountCheckout) {
      var $buttonCheckout;
      if (isApplyDiscountCheckout) {
        $buttonCheckout = $element.find(".gt_button_apply_discount")
      } else {
        $buttonCheckout = $element.find(".gt_checkout_button_main")
      }
      var $textEl = $buttonCheckout.find(".gt_button-content-text");
      if ($textEl.css("visibility") === "hidden") {
        $textEl.css("visibility", "");
      }
      var $loadingInButton = $buttonCheckout.find(".atom-button-loading-circle-loader");
      if ($loadingInButton && $loadingInButton.length) {
        $loadingInButton.remove();
      }
    }

    this.initDisableButtonAcceptTerms = function () {
      var $acceptTermBox = $element.find(".gt_cart-conditions");
      var $acceptTermCheckbox = $element.find(".checkbox_accept_terms");
      var $buttonCheckout = $element.find(".gt_checkout_button_main");
      $buttonCheckout.off("click").on("click", function (e) {
        if (!$acceptTermCheckbox.is(":checked")) {
          e.preventDefault();
          $acceptTermBox.addClass("gt_active");
        } else {
          var $textEl = $buttonCheckout.find(".gt_button-content-text");
          $textEl.css("visibility", "hidden");
          $buttonCheckout.find(".gt_button-content").append($loadingButton);
          setTimeout(function() {
            // reset to default when click back button in browser 
            _this.resetToDefaultButton();
          }, 1500)
        }
      });
      var $buttonApplyDiscount = $element.find(".gt_button_apply_discount");
      $buttonApplyDiscount.off("click").on("click", function (e) {
        if (!$acceptTermCheckbox.is(":checked")) {
          e.preventDefault();
          $acceptTermBox.addClass("gt_active");
        } else {
          var $textEl = $buttonApplyDiscount.find(".gt_button-content-text");
          $textEl.css("visibility", "hidden");
          $buttonApplyDiscount.find(".gt_button-content").append($loadingButton);
          setTimeout(function() {
            // reset to default when click back button in browser 
            _this.resetToDefaultButton(true);
          }, 1500)
        }
      });
      $acceptTermCheckbox.off("change").on("change", function (e) {
        if (e.target.checked) {
          $acceptTermBox.removeClass("gt_active");
        }
      });
    };

    this.replaceCartItemRefresh = function (newCart) {
      /* check 2 truong hop discount va them 1 item cung variant nhung khac properties */
      for (var i = 0; i < newCart.items.length; i++) {
        var newCartItem = newCart.items[i];
        var oldCartItem = _this.getCartItemByNewCart(newCartItem);
        if (oldCartItem && newCartItem.key !== oldCartItem.key) {
          var $itemElementReplace = $listItemCart.find(
            ".gt_items_cart[data-variant-id=" + newCartItem.variant_id + "][data-key=" + JSON.stringify(oldCartItem.key) + "]"
          );
          $itemElementReplace.attr("data-key", newCartItem.key);
          oldCartItem.key = newCartItem.key;
          break;
        }
      }
    };

    this.getCartItemByNewCart = function (newCartItem) {
      var cloneNewCartItem = JSON.parse(JSON.stringify(newCartItem));
      for (var i = 0; i < _this.cartItems.length; i++) {
        var cartItem = _this.cartItems[i];
        if (!cloneNewCartItem.properties) {
          cloneNewCartItem.properties = {};
        }
        if (!cartItem.properties) {
          cartItem.properties = {};
        }
        if (cartItem.variant_id === cloneNewCartItem.variant_id && JSON.stringify(cartItem.properties) === JSON.stringify(cloneNewCartItem.properties)) {
          return cartItem;
        }
      }
      return null;
    };

    this.updateDiscountedPriceInCartItems = function() {
      if (this.isAutoDiscount()) {
        this.renderAutoDiscountPriceForCartItems();
        return;
      }
      if (this.isEsDiscountPercent()) {
        this.renderEsDiscountedPriceForCartItems();
        return;
      }
      this.resetDefaultDomForCartItems();
    }

    this.isAutoDiscount = function() {
      const cart = window.SOLID.store.getState("cart");
      return cart && cart.total_discount > 0;
    }

    this.renderAutoDiscountPriceForCartItems = function() {
      var currentCart = window.SOLID.store.getState("cart");
      currentCart.items.forEach(function(item) {
        if (!item.discounts || !item.discounts.length) {
          var $itemDiscount = $element.find(`.gt_items--content[data-variant-id=${item.variant_id}][data-key=${JSON.stringify(item.key)}]`);
          _this.resetDefaultCartItemDom($itemDiscount);
          return;
        }
        _this.updateDiscountedPriceForCartItem(item);
      });
    }

    this.isEsDiscountPercent = function() {
      const discount = window.SOLID.store.getState("discount");
      return discount && discount.price > 0 && discount.value_type === "percentage";
    }

    this.renderEsDiscountedPriceForCartItems = function() {
      var currentCart = window.SOLID.store.getState("cart");
      const calculateItems = this.calculateDiscountInItems(currentCart.items || []);
      calculateItems.forEach((item) => {
        this.updateDiscountedPriceForCartItem(item);
      });
    }

    this.calculateDiscountInItems = function(items) {
      const actualTotalPriceAfterDiscount = this.getActualTotalPrice();
      const newItems = items.map((item) => {
        if (this.isSatisfiedDiscount(item)) {
          const discountPriceItem = this.getDiscountPrice(item.original_price);
          const discountPriceTotal = this.getDiscountPrice(item.line_price);
          return Object.assign(JSON.parse(JSON.stringify(item)), {
            discounted_price: item.original_price - discountPriceItem,
            line_price: item.line_price - discountPriceTotal
          });
        }
        return item;
      });
      const totalPriceAfterDiscount = newItems.reduce((beforeVal, currEl) => beforeVal + currEl.line_price, 0);
      if (totalPriceAfterDiscount !== actualTotalPriceAfterDiscount) {
        let diffPrice = totalPriceAfterDiscount - actualTotalPriceAfterDiscount; 
        newItems.forEach((item) => {
          if (diffPrice <= 0 || !item.discounted_price) {
            return;
          }
          item.discounted_price = item.discounted_price - 1;
          item.line_price = item.line_price - 1;      
          diffPrice--;
        });
      }
      return newItems;
    }

    this.getActualTotalPrice = function() {
      const cart = window.SOLID.store.getState("cart");
      return cart.total_price - this.getTotalDiscount(cart);
    }

    this.getTotalDiscount = function(cart) {
      const discountCart = window.SOLID.store.getState("gtCartDiscountPrice");
      if (discountCart && discountCart.price && cart && cart.total_discount == 0) {
        return parseInt(String(discountCart.price));
      }
      return 0;
    }

    this.getDiscountPrice = function(totalPrice) {
      const discount = window.SOLID.store.getState("discount");
      return parseInt(String(Math.abs(discount.value) / 100 * totalPrice));
    }

    this.isSatisfiedDiscount = function(item) {
      const discount = window.SOLID.store.getState("discount") || {};
      return discount.selector === "all" || (discount.selector === "products" && discount.product_ids && discount.product_ids.includes(item.product_id));
    }

    this.updateDiscountedPriceForCartItem = function(item) {
      var $itemDiscount = $element.find(`.gt_items--content[data-variant-id=${item.variant_id}][data-key=${JSON.stringify(item.key)}]`);
      if (item.line_price >= item.original_line_price) {
        this.resetDefaultCartItemDom($itemDiscount);
        return;
      }
      var $totalPriceItem = $itemDiscount.find(".gt_total_price").not(".gt_total_price--discounted");
      var $totalDiscountedPriceItem = $itemDiscount.find(".gt_total_price--discounted");
      if (!$totalDiscountedPriceItem.length) {
        $totalDiscountedPriceItem = $totalPriceItem.clone();
        $totalDiscountedPriceItem.removeClass("gt_total_price");
        $totalDiscountedPriceItem.addClass("gt_total_price--discounted")
        $totalPriceItem.after($totalDiscountedPriceItem);
      }
      var totalDiscountedPrice = _this.formatMoneyPlugin(item.line_price);
      $totalDiscountedPriceItem.removeClass("gt_hidden");
      $totalPriceItem.css("text-decoration", "line-through");
      $totalPriceItem.addClass(this.settings.CLASS_TOTAL_PRICE_DISCOUNT);
      $totalDiscountedPriceItem.html(String(totalDiscountedPrice));
      var $totalPriceCompareItem = $itemDiscount.find(".gt_compare_price");
      $totalPriceCompareItem.addClass("gt_hidden_compare_price");
    }

    this.resetDefaultDomForCartItems = function() {
      const discount = window.SOLID.store.getState("discount");
      if (!discount) {
        return;
      }
      var currentCart = window.SOLID.store.getState("cart");
      currentCart && currentCart.items.forEach((item) => {
        var $itemDiscount = $element.find(`.gt_items--content[data-variant-id=${item.variant_id}][data-key=${JSON.stringify(item.key)}]`);
        this.resetDefaultCartItemDom($itemDiscount);
      });
    }

    this.resetDefaultCartItemDom = function($cartItem) {
      const $totalDiscountedPriceItem = $cartItem.find(".gt_total_price--discounted");
      const $totalPriceItem = $cartItem.find(".gt_total_price").not(".gt_total_price--discounted");
      const $totalPriceCompareItem = $cartItem.find(".gt_compare_price");
      $totalDiscountedPriceItem.addClass("gt_hidden");
      $totalPriceItem.css("text-decoration", "");
      $totalPriceItem.removeClass(this.settings.CLASS_TOTAL_PRICE_DISCOUNT);
      $totalPriceCompareItem.removeClass("gt_hidden_compare_price");
    }

    this.formatMoneyPlugin = function(money) {
      var dataCurrency = window.SOLID.store.getState("dataCurrency");
      if (dataCurrency) {
        return Shopify.gemFormatMoney(money, dataCurrency.currency, dataCurrency.data);
      }
      var _formatMoney = __GemSettings.money;
      return Shopify.formatMoney(money, _formatMoney);
    }

    this.initCartItemLibs = function () {
      if (_this.settings.mode === "production") {
        // Lay thong tin cart
        window.gfTheme.getCart(function (cart) {
          // Validate cart
          if (!cart || !cart.items || !cart.items.length) {
            _this.showErrorEmptyCart();
            return;
          }

          // init disable accepts term khi khoi tao cart
          if (_this.settings.acceptTermsTextOnOff) {
            _this.initDisableButtonAcceptTerms();
          }

          var getProductDetailPromises = cart.items.map(function (item) {
            // eslint-disable-next-line no-undef
            return new Promise(function (resolve, reject) {
              var varID = item.variant_id; // needed to find right variant from ajax results
              var quantity = item.quantity;
              var comparePrice = "";
              window.gfTheme.getProduct(
                item.handle,
                function (product) {
                  var variant = product.variants.find(function (v) {
                    return v.id === varID;
                  });
                  if (!variant) {
                    variant = JSON.parse(JSON.stringify(item));
                  }
                  item.variant = variant;
                  if (_this.settings.comparePriceBoxOnOff && variant.compare_at_price && variant.compare_at_price !== 0) {
                    comparePrice = variant.compare_at_price;
                    item.compare_at_price = comparePrice * quantity;
                  }
                  resolve();
                },
                function () {
                  item.variant = JSON.parse(JSON.stringify(item));
                  item.compare_at_price = 0;
                  resolve();
                }
              );
            });
          });
          // eslint-disable-next-line no-undef
          Promise.all(getProductDetailPromises).then(function () {
            if (cart && cart.items && cart.items.length) {
              $element.find(".cart_drawer-content").addClass("gt_active");
              $element.find(".cart_empty").removeClass("gt_active");
            } else {
              $element.find(".cart_drawer-content").removeClass("gt_active");
              $element.find(".cart_empty").addClass("gt_active");
            }
            _this.cartItems = cart.items;
            _this.checkRenderCartItemsWhenLiquidCache();
            _this.callLibs();
            _this.setHeight();
            //khi resize màn hình thì tính lại chiều cao
            jQuery(window).resize(function () {
              _this.setHeight();
            });
            _this.updateDiscountedPriceInCartItems();
          });
          _this.checkShowTitleOfVariant();
        }, true);
      }
    };

    this.checkShowTitleOfVariant = function() {
      if (!this.settings.showOptionTitle || this.settings.mode !== "production") {
        return;
      }
      $element.removeClass("gt_active");
      $element.find("gt_cart_drawer").removeClass("gt_active");
      var cart = window.SOLID.store.getState("cart");
      _this.reRenderCartItems(cart.items);
      setTimeout(() => {
        $("body").css("overflow-y","visible")
      }, 500);
    }

    this.checkRenderCartItemsWhenLiquidCache = function() {
      var isNeedUpdate = false;
      var $cartItemsDom = $listItemCart.find(".gt_items_cart");
      if (!$cartItemsDom.length && _this.cartItems.length) {
        $element.find(".gt_cart_drawer-content").addClass("gt_active");
        $element.find(".gt_cart_empty").removeClass("gt_active");
        // init disable accepts term
        if (_this.settings.acceptTermsTextOnOff) {
          _this.initDisableButtonAcceptTerms();
        }
      }
      // them cac item con thieu khi cache liquid
      _this.cartItems.forEach(function(cartItem) {
        var $checkCartItem = $listItemCart.find(
          ".gt_items_cart[data-variant-id=" + cartItem.variant_id + "][data-key=" + JSON.stringify(cartItem.key) + "]"
        ) || [];
        if (!$checkCartItem.length) {
          isNeedUpdate = true;
          var $addingCartItem = _this.generateItemCart(cartItem);
          $listItemCart.prepend($addingCartItem);
        } else {
          var checkQuantity = $checkCartItem.find("input.gt_number_quantity").val();
          if (String(checkQuantity) !== String(cartItem.quantity)) {
            isNeedUpdate = true;
            var $updateCartItem = _this.generateItemCart(cartItem);
            $checkCartItem.replaceWith($updateCartItem);
          }
        }
      });
      if (isNeedUpdate) {
        window.SOLID.store.dispatch("trigger-lazyload", true); // cap nhat lazy load khi append
      };
      // xoa cac item thua khi cache liquid
      for (var i = 0; i < $cartItemsDom.length; i++) {
        var $cartItem = $($cartItemsDom[i]);
        var variantId = $cartItem.attr("data-variant-id"); 
        var key = $cartItem.attr("data-key"); 
        var checkDeleteItem = _this.cartItems.filter(function(item) {
          return String(item.variant_id) === String(variantId) && String(item.key) === String(key);
        });
        if (!checkDeleteItem.length) {
          $cartItem.remove();
        };
      }
    };

    this.convertEffectName = function () {
      var name = this.settings.effectCartDrawer;
      if (!name) {
        name = "none";
      }
      var convertName = "";
      name.split("-").forEach(function (item) {
        convertName += String(item[0]).toUpperCase() + String(item).slice(1);
      });
      return convertName;
    };

    this.effectCartItems = function () {
      if (_this.settings.effectCartDrawer) {
        _this.isAnimationRunning = true;
        $listItemCart.css("overflow", "hidden");
        $element.find(".gt_box_order_summary_height").css("overflow", "hidden");
        $element.find(".gt_box_checkout_height").css("overflow", "hidden");
        var $heading = $element.find(".gt_heading_content");
        // effect heading
        $heading.css("animation", "gt" + _this.convertEffectName() + " 1s 0.075s 1 both");

        var time = 0.255;
        var $cartItems = $listItemCart.find(".gt_items_cart");
        var $cartEmpty = $element.find(".gt_cart_empty");
        // cart empty
        if ($cartEmpty && $cartEmpty.length && $cartEmpty.css("visibility") !== "hidden") {
          for (var i = 0; i < $cartEmpty.children().length; i++) {
            var $cartEmptyChild = jQuery($cartEmpty.children()[i]);
            if ($cartEmptyChild.hasClass("gt_box_checkout")) {
              for (var j = 0; j < $cartEmptyChild.children().length; j++) {
                var $contentChild = jQuery($cartEmptyChild.children()[j]);
                $contentChild.css("animation", "gt" + _this.convertEffectName() + " 1s " + time + "s 1 both");
                time += 0.12;
              }
            } else {
              $cartEmptyChild.css("animation", "gt" + _this.convertEffectName() + " 1s " + time + "s 1 both");
              time += 0.12;
            }
          }
        } else if ($cartItems && $cartItems.length) {
          // effect cart item
          for (var cartIdx = 0; cartIdx < $cartItems.length; cartIdx++) {
            var $cartItem = jQuery($cartItems[cartIdx]);
            $cartItem.css("animation", "gt" + _this.convertEffectName() + " 1s " + time + "s 1 both");
            time += 0.12;
          }
        }
        // effect order summary
        if (time > 0.255 + 0.12 * 4) {
          time = 0.255 + 0.12 * 4;
        }
        var $orderSummary = $element.find(".gt_box_order_summary_group");
        if ($orderSummary && $orderSummary.length) {
          $orderSummary.css("animation", "gt" + _this.convertEffectName() + " 1s " + time + "s 1 both");
        }

        time += 0.12;
        if (time > 0.255 + 0.12 * 4 + 0.12) {
          time = 0.255 + 0.12 * 4 + 0.12;
        }
        // effect checkout
        var $checkout = $element.find(".gt_button_checkout_group");
        if ($checkout && $checkout.length) {
          $checkout.css("animation", "gt" + _this.convertEffectName() + " 1s " + time + "s 1 both");
        }

        clearTimeout(window.timeOutClearOverFlow);
        window.timeOutClearOverFlow = setTimeout(function () {
          $listItemCart.removeAttr("style");
          $element.find(".gt_box_order_summary_height").removeAttr("style");
          $element.find(".gt_box_checkout_height").removeAttr("style");
          _this.isAnimationRunning = false;
          if (_this.settings.mode === "dev") {
            _this.removeEffectCartItems();
          }
        }, (time + 1) * 1000);
      }
    };

    /**
     * 
     * @param {*} newCartItems 
     * @param {*} lineItem LineItem | LineItem[]
     */
    this.reRenderCartItems = function (newCartItems, lineItem) {
      if (lineItem) {
        lineItem = lineItem.items || [lineItem];
      } else {
        lineItem = [];
      }
      // neu cart moi them 1 san pham thi remove empty cart
      if (newCartItems.length > 0 && _this.cartItems.length === 0) {
        $listItemCart.children().remove();
        $element.find(".gt_cart_drawer-content").addClass("gt_active");
        $element.find(".gt_cart_empty").removeClass("gt_active");
        // init disable accepts term
        if (_this.settings.acceptTermsTextOnOff) {
          _this.initDisableButtonAcceptTerms();
        }
      }
      // replace nhung item da co san
      _this.cartItems = _this.cartItems.map(function (cartItem) {
        var newLineItem = newCartItems.find(function (item) {
          return cartItem.id === item.id && cartItem.key === item.key && cartItem.quantity !== item.quantity;
        });
        if (!newLineItem) {
          return cartItem;
        }
        var $preloadItemCard = $listItemCart.find(
          ".gt_items_cart[data-variant-id=" + cartItem.variant_id + "][data-key=" + JSON.stringify(cartItem.key) + "]"
        );
        const $productJson = $preloadItemCard.find(".ProductJson");
        if ($productJson && $productJson.length) {
          try {
            const productJson = JSON.parse($productJson.html());
            newLineItem.variant = productJson;
            newLineItem.compare_at_price = productJson.compare_at_price * newLineItem.quantity;
          } catch(e) {
            console.log(e)
          }
        }
        var $newCartItem = _this.generateItemCart(newLineItem);
        $preloadItemCard.replaceWith($newCartItem);
        return newLineItem;
      });
      // TODO (thanhdx): remove duplicate handle for requests
      var newAddingCartItems = newCartItems.filter(function (item) { 
        return _this.cartItems.every(function (cartItem) { 
          return String(cartItem.id) !== String(item.id) || String(cartItem.key) !== String(item.key);
        });
      });
      var deleteCartItems = _this.cartItems.filter(function(item) {
        return newCartItems.every(function (newCartItem) { 
          return String(newCartItem.id) !== String(item.id) || String(newCartItem.key) !== String(item.key);
        });
      });
      // remove item
      deleteCartItems.forEach(function(item) {
        var $deleteItem = $listItemCart.find(".gt_items_cart[data-variant-id=" + item.variant_id + "][data-key=" + JSON.stringify(item.key) + "]");
        $deleteItem.remove();
      });

      // eslint-disable-next-line no-undef
      new Promise(function (resolve) {
        // retrieve new item data to render in cart
        if (newAddingCartItems && newAddingCartItems.length) {
          //bien de check xem cart drawer co dang rerender them item tren shopify hay ko
          window.SOLID.store.dispatch("rerenderingAjaxShopifyCartDrawer", true);
          // loading cart items
          newAddingCartItems.forEach(function(item) {
            var $preLoadingItem = $listItemCart
              .find(".cart-item-loading[data-variant-id=" + item.variant_id + "][data-key=" + JSON.stringify(item.key) + "]") || [];
            if (!$preLoadingItem.length) {
              var $newCartItemLoading = _this.generateLoadingItem(item);
              $listItemCart.prepend($newCartItemLoading);
            }
          })
          // call api
          var getProductPromises = newAddingCartItems.map(function (item) {
            // eslint-disable-next-line no-undef
            return new Promise(function (resolveAjax, rejectAjax) {
              window.gfTheme.getProduct(
                item.handle,
                function (product) {
                  var variant = product.variants.find(function (v) {
                    return v.id === item.id;
                  });
                  if (!variant) {
                    variant = JSON.parse(JSON.stringify(item));
                  }
                  item.variant = variant;
                  if (_this.settings.comparePriceBoxOnOff && variant.compare_at_price && variant.compare_at_price !== 0) {
                    item.compare_at_price = variant.compare_at_price * item.quantity;
                  }
                  resolveAjax(item);
                },
                function () {
                  item.variant = JSON.parse(JSON.stringify(item));
                  item.compare_at_price = 0;
                  resolveAjax(item);
                }
              );
            });
          });

          Promise.all(getProductPromises).then(function (lineItems) {
            lineItems.filter(function (item) { return item; }).forEach(function (item) {
              // fix trg hop gempages trigger 2 lan lien tiep su kien addToCart
              var $lineItem = $listItemCart
                .find(".gt_items_cart[data-variant-id=" + item.variant_id + "][data-key=" + JSON.stringify(item.key) + "]")
                .not(".cart-item-loading") || [];
              if (!$lineItem.length) {  
                var $loadingItem = $listItemCart
                .find(".cart-item-loading[data-variant-id=" + item.variant_id + "][data-key=" + JSON.stringify(item.key) + "]") || [];
                var $newCartItem = _this.generateItemCart(item);
                $loadingItem.replaceWith($newCartItem);
                // $listItemCart.prepend($newCartItem);
                _this.cartItems.unshift(item);
              }
              window.SOLID.store.dispatch("rerenderingAjaxShopifyCartDrawer", false);
              resolve();
            });
          });
        } else {
          var currentAddItems = newCartItems.filter(function (cartItem) { 
            return lineItem.find(function (item) { 
              return String(cartItem.key) === String(item.key);
            });
          });
          // chuyen line item len tren dau cart
          currentAddItems.forEach(function (item) {
            var $lineItem = $listItemCart.find(".gt_items_cart[data-variant-id=" + item.variant_id + "][data-key=" + JSON.stringify(item.key) + "]");
            $lineItem.remove();
            $lineItem.find("input[name='quantity']").val(item.quantity);
            $listItemCart.prepend($lineItem);
          });
          resolve();
        }
      }).then(function () {
        window.SOLID.store.dispatch("trigger-lazyload", true); // cap nhat lazy load khi append
        _this.callLibs();
        _this.setHeight();
        _this.cartItems = newCartItems;
        _this.updateDiscountedPriceInCartItems();
      });
    };

    this.removeEffectCartItems = function () {
      if (_this.settings.effectCartDrawer) {
        var $heading = $element.find(".gt_heading_content");
        // effect heading
        $heading.removeAttr("style");
        // effect cart item
        var $cartItems = $listItemCart.find(".gt_items_cart");
        if ($cartItems && $cartItems.length) {
          for (var i = 0; i < $cartItems.length; i++) {
            var $cartItem = jQuery($cartItems[i]);
            $cartItem.removeAttr("style");
          }
        }
        // cart empty
        var $cartEmpty = $element.find(".gt_cart_empty");
        if ($cartEmpty && $cartEmpty.length) {
          for (var cartEmptyIdx = 0; cartEmptyIdx < $cartEmpty.children().length; cartEmptyIdx++) {
            var $cartEmptyChild = jQuery($cartEmpty.children()[cartEmptyIdx]);
            if ($cartEmptyChild.hasClass("gt_box_checkout")) {
              for (var j = 0; j < $cartEmptyChild.children().length; j++) {
                var $contentChild = jQuery($cartEmptyChild.children()[j]);
                $contentChild.removeAttr("style");
              }
            } else {
              $cartEmptyChild.removeAttr("style");
            }
          }
        }
        // effect order summary
        var $orderSummary = $element.find(".gt_box_order_summary_group");
        if ($orderSummary && $orderSummary.length) {
          $orderSummary.removeAttr("style");
        }

        // effect checkout
        var $checkout = $element.find(".gt_button_checkout_group");
        if ($checkout && $checkout.length) {
          $checkout.removeAttr("style");
        }
      }
    };

    this.showErrorEmptyCart = function () {
      // eslint-disable-next-line no-console
      console.log("empty cart");
    };

    /**
     * Hàm kiểm tra link ảnh có phải cnd của shopify không
     * @param {String} src link ảnh
     * @return {Boolean} true hoặc false
     */
    this.hasImageShopify = function (src) {
      // Return true, false
      if (!src) {
        return false;
      }
      if (src.indexOf("cdn.shopify.com/s/files/") != -1) {
        return true;
      } else if (src.indexOf("apps.shopifycdn.com/") != -1) {
        return true;
      }
      return false;
    };

    /**
     * Hàm replace image theo size mong muốn
     * @param {String} src link ảnh
     * @param {String} expectImageSize size ảnh: 200x200, 200x, x200
     * @return {String} link ảnh tạo mới
     */
    this.replaceImageToSize = function (src, expectImageSize) {
      if (!src || expectImageSize == undefined || expectImageSize == null) {
        return src;
      }
      if (_this.hasImageShopify(src)) {
        var ignore = ["jfif"];
        var params = "";
        var splitParams = src.split("?");
        if (splitParams && splitParams.length && splitParams.length >= 2) {
          params = splitParams[1];
        }
        var arrImage = splitParams[0].split("/").pop();
        var slugName = arrImage.split(".");
        var strExtention = slugName.pop();
        if (ignore.indexOf(strExtention) !== -1) {
          return src;
        }
        var nameImages = slugName.join(".");
        var arrayNames = nameImages.split("_");
        if (arrayNames && arrayNames.length >= 2) {
          var sizeCurrent = arrayNames.pop();
          var reg = new RegExp(/(\d+)x(\d+)|(\d+)x|x(\d+)/, "gm");
          if (sizeCurrent && reg.test(sizeCurrent)) {
            var trimReg = sizeCurrent.replace(reg, "");
            if (trimReg == "") {
              nameImages = nameImages.split("_");
              nameImages.pop();
              nameImages = nameImages.join("_");
            }
          }
        }

        var srcImageSplit = src.split("?")[0].split("/");
        var smallSrc = "";
        for (var j = 0; j < srcImageSplit.length - 1; j++) {
          smallSrc += srcImageSplit[j] + "/";
        }

        if (expectImageSize) {
          src = smallSrc + nameImages + "_" + expectImageSize + "." + strExtention;
        } else {
          src = smallSrc + nameImages + "." + strExtention;
        }

        if (params) {
          src = src + "?" + params;
        }
      }
      return src;
    };

    this.generateItemCart = function (item) {
      var dataCurrency = window.SOLID.store.getState("dataCurrency");
      var originalLinePrice;
      if (dataCurrency) {
        originalLinePrice = Shopify.gemFormatMoney(item.original_line_price, dataCurrency.currency, dataCurrency.data);
      } else {
        var _formatMoney = __GemSettings.money;
        originalLinePrice = Shopify.formatMoney(item.original_line_price, _formatMoney);
      }
      var imageProduct = _this.replaceImageToSize(item.image, "75x75");
      // clone cart item template
      var $cartItemTemplate = $element.find(".gt_cart_item_template").children().clone();
      // them class
      $cartItemTemplate.addClass("gt_items_cart");
      // set data attribute
      $cartItemTemplate.attr("data-key", item.key);
      $cartItemTemplate.attr("data-variant-id", item.variant_id);
      $cartItemTemplate.attr("data-product-id", item.product_id);
      $cartItemTemplate.attr("data-product-handle", item.handle);
      // set productJson
      var cartItemVariant = item.variant;
      if (!cartItemVariant) {
        cartItemVariant = { variant_id: item.variant_id };
      }
      $cartItemTemplate.find(".ProductJson").html(JSON.stringify(cartItemVariant));
      // set img product
      var $image = $cartItemTemplate.find(".gt_item_image").find("img");
      $image.attr(
        "src",
        imageProduct ? imageProduct : "https://cdn.shopify.com/s/assets/no-image-2048-5e88c1b20e087fb7bbe9a3771824e743c244f437e4f8ba93bbf7b11b53f7824c_80x.gif"
      );
      $image.attr("alt", item.title);
      // set name product
      var $nameProduct = $cartItemTemplate.find(".gt_name_product");
      $nameProduct.find("a").attr("href", item.url);
      $nameProduct.find(".gt_name_product_text").html(item.product_title);
      
      if (this.settings.showOptionTitle && this.settings.mode === "production") {
        const $variantNameOption = $cartItemTemplate.find(".gt_option-name");
        $variantNameValue = $variantNameOption.find(".gt_option-title").empty();
        if (!item.variant_title || item.variant_title === null || item.variant_title.includes("Default")) {
          $variantNameValue.html("");
        }
        for (var i = 0; i < item.options_with_values.length; i++) {
          if (item.options_with_values[i].name != "Title" && item.options_with_values[i].value != "Default Title"){
            $variantNameValue.append("<div class='variant-item'><span>" + item.options_with_values[i].name + "</span>: " + item.options_with_values[i].value + "</div>");
          }
        }
      } else {
        // set variant name
        var $variantTitle = $cartItemTemplate.find(".gt_variant-title");
        if (!item.variant_title || item.variant_title === null || item.variant_title.includes("Default")) {
          $variantTitle.html("");
        } else {
          $variantTitle.html(item.variant_title);
        }
      }
      // set item properties
      var $properties = $cartItemTemplate.find(".gt_property");
      var $propertiesItemTemplate = $properties.find(".gt_item_property");
      var listAppendProperties = _this.generateItemProperties($propertiesItemTemplate, item.properties);
      $properties.html("");
      $properties.append.apply($properties, listAppendProperties);
      // set input quantity
      var $inputQuantity = $cartItemTemplate.find("input.gt_number_quantity");
      $inputQuantity.val(item.quantity);
      // set total price
      var $totalPrice = $cartItemTemplate.find(".gt_total_price");
      $totalPrice.html(originalLinePrice);
      // set compare price
      if (_this.settings.comparePriceBoxOnOff && !item.discounts?.length) {
        var $comparePrice = $cartItemTemplate.find(".gt_compare_price");
        if (item.compare_at_price > item.original_line_price) {
          $comparePrice.removeClass("gt_hidden_compare_price");
          $comparePrice.html(_this.generateComparePrice(item.compare_at_price));
        } else {
          $comparePrice.addClass("gt_hidden_compare_price");
        }
      }
      return $cartItemTemplate;
    };

    this.generateItemProperties = function ($propertyItemTemplate, itemProperties) {
      var itemPropertiesHTML = [];
      if (itemProperties) {
        for (var key in itemProperties) {
          if (Object.prototype.hasOwnProperty.call(itemProperties, key)) {
            var element = itemProperties[key];
            if (typeof element === "string" && element !== "" && key && !key.startsWith("_")) {
              var $propertyItem = $propertyItemTemplate.clone();
              $propertyItem.find(".title_property").html(key + ": ");
              if (element.includes("/uploads/")) {
                $propertyItem.find(".detail_property").html("<a class='lightbox' href='" + element + "'>" + element + "</a>");
              } else {
                $propertyItem.find(".detail_property").html(element);
              }
              itemPropertiesHTML.push($propertyItem);
            }
          }
        }
        return itemPropertiesHTML;
      }
      return [];
    };

    this.generateLoadingItem = function (item) {
      // clone cart item template
      var $cartItemLoading = $('<div></div>');
      // them class
      $cartItemLoading.addClass("gt_items_cart");
      $cartItemLoading.css("height", "134px");
      $cartItemLoading.children().remove();
      // set data attribute
      $cartItemLoading.attr("data-key", item.key);
      $cartItemLoading.attr("data-variant-id", item.variant_id);
      $cartItemLoading.addClass("cart-item-loading");
      return $cartItemLoading;
    }

    this.generateComparePrice = function (price) {
      if (price) {
        var dataCurrency = window.SOLID.store.getState("dataCurrency");
        var compareAtPrice = 0;
        if (dataCurrency) {
          compareAtPrice = Shopify.gemFormatMoney(price, dataCurrency.currency, dataCurrency.data);
        } else {
          var _formatMoney = __GemSettings.money;
          compareAtPrice = Shopify.formatMoney(price, _formatMoney);
        }
        return compareAtPrice;
      }
      return "";
    };

    //tính chiều cao của box heading và box checkout
    this.setHeight = function () {
      var $heightHeadingDiv = $element.find(".gt_heading_content").outerHeight();
      var $heightCheckoutBox = $element.find(".gt_box_checkout_height").outerHeight();
      var $heightOrderSummary = $element.find(".gt_box_order_summary_height").outerHeight();

      //getComputedStyle(document.documentElement).getPropertyValue('--boxCheckoutHeight'); // #999999
      document.documentElement.style.setProperty("--heightHeadingDiv", $heightHeadingDiv + "px");
      document.documentElement.style.setProperty("--heightCheckoutBox", $heightCheckoutBox + "px");
      document.documentElement.style.setProperty("--heightOrderSummary", $heightOrderSummary + "px");
    };

    this.setStyleBody = function (status) {
      switch (status) {
        case "inactive_cart_drawer":
          jQuery("body").css({
            transition: "left 0.5s",
            "overflow-x": "hidden",
            "overflow-y": "auto",
          });
          break;
        case "active_cart_drawer":
          setTimeout(() => {
            jQuery("body").css({
              "overflow-y": "hidden",
            });
          }, 50);
          break;
      }
    };

    this.callLibs = function () {
      var defineOptions = {
        id: _this.settings.id,
        mode: _this.settings.mode,
        classContainer: ".gt_list_item_cart",
        classItemCart: ".gt_items_cart",
        classProductJson: ".ProductJson",
        classContentPage: ".gt_cart_drawer-content",
        classImage: ".gt_item_image img",
        classTitle: ".gt_name_product a h3",
        classVariants: ".gt_variant-title",
        classOption: ".gt_option-name",
        classRemove: ".gt_icon_remove_product",
        classQuantityPlus: ".gt_quantity_plus",
        classQuantityMinus: ".gt_quantity_minus",
        classInputQuantity: ".gt_number_quantity",
        classPriceItem: null,
        classPriceCompareLineItem: ".gt_compare_price",
        classPriceLineItem: ".gt_total_price",
        classWrapperSubtotal: ".gt_save_money",

        classPriceSavedCart: ".gt_number_save_money",
        classPriceSubtotalCart: ".gt_number_sub_total",
        classSubtotalPercent: ".gt_percent_save_money-number",
        classPriceTotalCart: ".gt_text_total",

        classCartEmpty: ".gt_cart_empty",

        classPopupDeleteItem: ".gt_delete_product",
        classAgreeDeleteItem: ".confirm-gt_delete_product",
        classCancelDeleteItem: ".cancel-gt_delete_product",

        classPopupWarning: ".gt_remove_item",
        classAgreeDeleteWarning: ".confirm-gt_remove_item",
        classCancelDeleteWarning: ".cancel-gt_remove_item",

        classWrapperDiscount: ".gt_discount",
        classDiscountCode: ".gt_discount-code",
        classDiscountPrice: ".gt_discount-price-number",
        calculateComparePrice: true,
        isCartDrawer: true,
      };
      
      var libParams = {
        $element: $element,
        settings: defineOptions
      };
      //gọi thư viện
      if (!gtCartV5Instance) {
        gtCartV5Instance = window.SOLID.library.gtCartV5(libParams);
      }
      window.gfTheme.getCart(function (cart, error) {
        if (!error) {
          gtCartV5Instance.updateSaved(cart);
          gtCartV5Instance.updatePriceTotal(cart);
          gtCartV5Instance.updatePriceItem(cart);
        }
      });
      // reset store in gtV5Input, gtV5Discount
      if (!this.isInCartPage) {
        window.SOLID.store.unsubscribe("discount");
        window.SOLID.store.unsubscribe("gtCartCallEvent"); 
      }
      // call libs
      window.SOLID.library.gtCartV5Input(libParams);
      window.SOLID.library.gtCartV5RemoveItem(libParams);
      window.SOLID.library.gtCartV5Discount(libParams);
    };

    this.init();
  };

  jQuery.fn.gtCartDrawer = function (options) {
    return this.each(function () {
      var plugin = new GtCartDrawer(this, options, jQuery);
      jQuery(this).data("gtCartDrawer", plugin);
    });
  };
})(jQuery);

// Kiem tra ton tai widget
var $gtWidget = jQuery(".gt_widget-rLZEauGpn5udz71");
if (!$gtWidget || !$gtWidget.length) {
  return;
}

$gtWidget.gtCartDrawer({
  classListCartItem: ".gt_list_item_cart",
  classCheckCartPage: ".gt_check_cart_page",
  mode: "production",
  id: "rLZEauGpn5udz71",
  effectCartDrawer: "",
  autoOpenCartDrawerShoppingCart: true,
  comparePriceBoxOnOff: true,
  previewCartDrawer: true,
  autoOpenCartDrawerShoppingCartMobile: true,
  autoOpenCartDrawerMobile: true,
  acceptTermsTextOnOff: false,
  showDiscountInput: true,
  showOptionTitle: false,
});

        }
        funcESWidgetrLZEauGpn5udz71()
      } catch(e) {
        console.error("Error ESWidget Id: rLZEauGpn5udz71" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_headingText = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_headingText");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_headingText",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_headingText()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_headingText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_productNameText = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_productNameText");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_productNameText",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_productNameText()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_productNameText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_optionTitle = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_optionTitle");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_optionTitle",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_optionTitle()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_optionTitle" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_variantNameText = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_variantNameText");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_variantNameText",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_variantNameText()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_variantNameText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_itemPropertiesText = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_itemPropertiesText");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_itemPropertiesText",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_itemPropertiesText()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_itemPropertiesText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_originalPriceText = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_originalPriceText");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_originalPriceText",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_originalPriceText()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_originalPriceText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_comparePriceText = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_comparePriceText");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_comparePriceText",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_comparePriceText()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_comparePriceText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_emptyCartMessage = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_emptyCartMessage");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_emptyCartMessage",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_emptyCartMessage()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_emptyCartMessage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_emptyCartDescription = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_emptyCartDescription");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_emptyCartDescription",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_emptyCartDescription()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_emptyCartDescription" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_buttonContinueShopingText = function() {
          /* Init Actions */
var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_buttonContinueShopingText");
if (!$atoms || !$atoms.length) {
  return;
}
/* Variables */
const interactionHover = {"delay":0,"duration":"1.5","iterationCount":1,"name":"none"};
const interactionNormal = {"delay":0,"duration":"2","iterationCount":"infinite","name":"shakeX"};
const interactionWhilePress = {"name":"none","duration":"1.5","delay":0,"iterationCount":1};
const interactionScrollIntoView = "";
// animation
window.SOLID.library.animation({
  elementId: "rLZEauGpn5udz71_buttonContinueShopingText",
  $doms: $atoms,
  interactionNormal: {
    value: interactionNormal,
    previewAttr: "interactionButton"
  },
  interactionHover: {
    value: interactionHover,
    previewAttr: "interactionButtonHover"
  },
  interactionWhilePress: {
    value: interactionWhilePress,
    previewAttr: "interactionButtonWhitePress"
  },
  interactionScrollIntoView: {
    value: interactionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  animationType: "block",
  mode: "production",
})

for (let i = 0; i < $atoms.length; i++) {
  const $atom = $atoms[i];
  // function customEvent(actions, id, key)
  
    $($atom).customEvent([{"control":{"attribute":"pickLinkButton","id":"pickLinkButton","newTab":false,"reference":"html","title":"Pick Link","type":"picklink","value":"https://bixtore.com/collections"},"event":"click","id":0}], "rLZEauGpn5udz71_buttonContinueShopingText" + "_" + i);
  

  /* Listen if is button add to card */

  window.SOLID.store.subscribe("loading-buy-now-rLZEauGpn5udz71_buttonContinueShopingText" + "_" + i, function (isDisplay) {
    const $loadingEl = $($atom).find(".atom-button-loading-circle-loader");
    const $textEl = $($atom).find(".gt_button-content-text");
    if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
      let timeout = undefined;
      if (isDisplay === true) {
        /* display loading button */
        clearTimeout(timeout);
        $loadingEl.css("display", "inline-block");
        $textEl.css("visibility", "hidden");
      } else if (isDisplay === "stop") {
        /* stop loading */
        $loadingEl.removeAttr("style");
        $textEl.removeAttr("style");
        window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_buttonContinueShopingText", "");
        window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_buttonContinueShopingText" + "_" + i, "");
      } else if (isDisplay === false){
        clearTimeout(timeout);
        /* display tick button */
        $loadingEl.addClass("load-complete");
        $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
        /* remove tick button and display text*/
        timeout = setTimeout(function() {
          $loadingEl.removeClass("load-complete");
          $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
          $loadingEl.removeAttr("style");
          $textEl.removeAttr("style");
          window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_buttonContinueShopingText", "");
          window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_buttonContinueShopingText" + "_" + i, "");
        }, 3000);
      }
    }
  });
}

        }
        funcESAtomrLZEauGpn5udz71_buttonContinueShopingText()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_buttonContinueShopingText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_orderSummaryText = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_orderSummaryText");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_orderSummaryText",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_orderSummaryText()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_orderSummaryText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_applyDiscountCodeButton = function() {
          /* Init Actions */
var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_applyDiscountCodeButton");
if (!$atoms || !$atoms.length) {
  return;
}
/* Variables */
const interactionHover = {"name":"none","duration":"1.5","delay":0,"iterationCount":1};
const interactionNormal = {"name":"none","duration":"1.5","delay":0,"iterationCount":"infinite"};
const interactionWhilePress = {"name":"none","duration":"1.5","delay":0,"iterationCount":1};
const interactionScrollIntoView = "";
// animation
window.SOLID.library.animation({
  elementId: "rLZEauGpn5udz71_applyDiscountCodeButton",
  $doms: $atoms,
  interactionNormal: {
    value: interactionNormal,
    previewAttr: "interactionButton"
  },
  interactionHover: {
    value: interactionHover,
    previewAttr: "interactionButtonHover"
  },
  interactionWhilePress: {
    value: interactionWhilePress,
    previewAttr: "interactionButtonWhitePress"
  },
  interactionScrollIntoView: {
    value: interactionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  animationType: "block",
  mode: "production",
})

for (let i = 0; i < $atoms.length; i++) {
  const $atom = $atoms[i];
  // function customEvent(actions, id, key)
  
    $($atom).customEvent([], "rLZEauGpn5udz71_applyDiscountCodeButton" + "_" + i);
  

  /* Listen if is button add to card */

  window.SOLID.store.subscribe("loading-buy-now-rLZEauGpn5udz71_applyDiscountCodeButton" + "_" + i, function (isDisplay) {
    const $loadingEl = $($atom).find(".atom-button-loading-circle-loader");
    const $textEl = $($atom).find(".gt_button-content-text");
    if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
      let timeout = undefined;
      if (isDisplay === true) {
        /* display loading button */
        clearTimeout(timeout);
        $loadingEl.css("display", "inline-block");
        $textEl.css("visibility", "hidden");
      } else if (isDisplay === "stop") {
        /* stop loading */
        $loadingEl.removeAttr("style");
        $textEl.removeAttr("style");
        window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_applyDiscountCodeButton", "");
        window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_applyDiscountCodeButton" + "_" + i, "");
      } else if (isDisplay === false){
        clearTimeout(timeout);
        /* display tick button */
        $loadingEl.addClass("load-complete");
        $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
        /* remove tick button and display text*/
        timeout = setTimeout(function() {
          $loadingEl.removeClass("load-complete");
          $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
          $loadingEl.removeAttr("style");
          $textEl.removeAttr("style");
          window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_applyDiscountCodeButton", "");
          window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_applyDiscountCodeButton" + "_" + i, "");
        }, 3000);
      }
    }
  });
}

        }
        funcESAtomrLZEauGpn5udz71_applyDiscountCodeButton()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_applyDiscountCodeButton" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_discountLabel = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_discountLabel");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_discountLabel",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_discountLabel()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_discountLabel" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_discountValue = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_discountValue");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_discountValue",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_discountValue()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_discountValue" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_discountCodeValue = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_discountCodeValue");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_discountCodeValue",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_discountCodeValue()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_discountCodeValue" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_labelYouSave = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_labelYouSave");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_labelYouSave",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_labelYouSave()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_labelYouSave" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_saveMoneyValue = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_saveMoneyValue");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_saveMoneyValue",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_saveMoneyValue()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_saveMoneyValue" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_labelSubtotal = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_labelSubtotal");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_labelSubtotal",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_labelSubtotal()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_labelSubtotal" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_subtotalMoneyValue = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_subtotalMoneyValue");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_subtotalMoneyValue",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_subtotalMoneyValue()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_subtotalMoneyValue" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_labelGrandTotal = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_labelGrandTotal");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_labelGrandTotal",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_labelGrandTotal()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_labelGrandTotal" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_grandTotalValue = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_grandTotalValue");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_grandTotalValue",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_grandTotalValue()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_grandTotalValue" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_orderNoteLabel = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_orderNoteLabel");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_orderNoteLabel",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_orderNoteLabel()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_orderNoteLabel" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_acceptTermsText = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_acceptTermsText");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_acceptTermsText",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_acceptTermsText()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_acceptTermsText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_cartButtonText = function() {
          /* Init Actions */
var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_cartButtonText");
if (!$atoms || !$atoms.length) {
  return;
}
/* Variables */
const interactionHover = {"name":"none","duration":"1.5","delay":0,"iterationCount":1};
const interactionNormal = {"name":"none","duration":"1.5","delay":0,"iterationCount":"infinite"};
const interactionWhilePress = {"name":"none","duration":"1.5","delay":0,"iterationCount":1};
const interactionScrollIntoView = "";
// animation
window.SOLID.library.animation({
  elementId: "rLZEauGpn5udz71_cartButtonText",
  $doms: $atoms,
  interactionNormal: {
    value: interactionNormal,
    previewAttr: "interactionButton"
  },
  interactionHover: {
    value: interactionHover,
    previewAttr: "interactionButtonHover"
  },
  interactionWhilePress: {
    value: interactionWhilePress,
    previewAttr: "interactionButtonWhitePress"
  },
  interactionScrollIntoView: {
    value: interactionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  animationType: "block",
  mode: "production",
})

for (let i = 0; i < $atoms.length; i++) {
  const $atom = $atoms[i];
  // function customEvent(actions, id, key)
  
    $($atom).customEvent([{"control":{"attribute":"pickLinkButton","customButtonAddToCart":"true","id":"pickLinkButton","newTab":false,"reference":"html","title":"Pick Link","type":"picklink","value":"/cart"},"event":"click","id":1}], "rLZEauGpn5udz71_cartButtonText" + "_" + i);
  

  /* Listen if is button add to card */

  window.SOLID.store.subscribe("loading-buy-now-rLZEauGpn5udz71_cartButtonText" + "_" + i, function (isDisplay) {
    const $loadingEl = $($atom).find(".atom-button-loading-circle-loader");
    const $textEl = $($atom).find(".gt_button-content-text");
    if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
      let timeout = undefined;
      if (isDisplay === true) {
        /* display loading button */
        clearTimeout(timeout);
        $loadingEl.css("display", "inline-block");
        $textEl.css("visibility", "hidden");
      } else if (isDisplay === "stop") {
        /* stop loading */
        $loadingEl.removeAttr("style");
        $textEl.removeAttr("style");
        window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_cartButtonText", "");
        window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_cartButtonText" + "_" + i, "");
      } else if (isDisplay === false){
        clearTimeout(timeout);
        /* display tick button */
        $loadingEl.addClass("load-complete");
        $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
        /* remove tick button and display text*/
        timeout = setTimeout(function() {
          $loadingEl.removeClass("load-complete");
          $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
          $loadingEl.removeAttr("style");
          $textEl.removeAttr("style");
          window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_cartButtonText", "");
          window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_cartButtonText" + "_" + i, "");
        }, 3000);
      }
    }
  });
}

        }
        funcESAtomrLZEauGpn5udz71_cartButtonText()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_cartButtonText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_primaryButtonText = function() {
          /* Init Actions */
var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_primaryButtonText");
if (!$atoms || !$atoms.length) {
  return;
}
/* Variables */
const interactionHover = {"delay":0,"duration":"1.5","iterationCount":1,"name":"none"};
const interactionNormal = {"delay":0,"duration":"1.5","iterationCount":"infinite","name":"shakeX"};
const interactionWhilePress = {"delay":0,"duration":"1.5","iterationCount":1,"name":"none"};
const interactionScrollIntoView = "fade-up";
// animation
window.SOLID.library.animation({
  elementId: "rLZEauGpn5udz71_primaryButtonText",
  $doms: $atoms,
  interactionNormal: {
    value: interactionNormal,
    previewAttr: "interactionButton"
  },
  interactionHover: {
    value: interactionHover,
    previewAttr: "interactionButtonHover"
  },
  interactionWhilePress: {
    value: interactionWhilePress,
    previewAttr: "interactionButtonWhitePress"
  },
  interactionScrollIntoView: {
    value: interactionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  animationType: "block",
  mode: "production",
})

for (let i = 0; i < $atoms.length; i++) {
  const $atom = $atoms[i];
  // function customEvent(actions, id, key)
  
    $($atom).customEvent([], "rLZEauGpn5udz71_primaryButtonText" + "_" + i);
  

  /* Listen if is button add to card */

  window.SOLID.store.subscribe("loading-buy-now-rLZEauGpn5udz71_primaryButtonText" + "_" + i, function (isDisplay) {
    const $loadingEl = $($atom).find(".atom-button-loading-circle-loader");
    const $textEl = $($atom).find(".gt_button-content-text");
    if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
      let timeout = undefined;
      if (isDisplay === true) {
        /* display loading button */
        clearTimeout(timeout);
        $loadingEl.css("display", "inline-block");
        $textEl.css("visibility", "hidden");
      } else if (isDisplay === "stop") {
        /* stop loading */
        $loadingEl.removeAttr("style");
        $textEl.removeAttr("style");
        window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_primaryButtonText", "");
        window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_primaryButtonText" + "_" + i, "");
      } else if (isDisplay === false){
        clearTimeout(timeout);
        /* display tick button */
        $loadingEl.addClass("load-complete");
        $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
        /* remove tick button and display text*/
        timeout = setTimeout(function() {
          $loadingEl.removeClass("load-complete");
          $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
          $loadingEl.removeAttr("style");
          $textEl.removeAttr("style");
          window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_primaryButtonText", "");
          window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_primaryButtonText" + "_" + i, "");
        }, 3000);
      }
    }
  });
}

        }
        funcESAtomrLZEauGpn5udz71_primaryButtonText()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_primaryButtonText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_guaranteeText = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_guaranteeText");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_guaranteeText",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_guaranteeText()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_guaranteeText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_messageConfirmPopup = function() {
          var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_messageConfirmPopup");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "rLZEauGpn5udz71_messageConfirmPopup",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtomrLZEauGpn5udz71_messageConfirmPopup()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_messageConfirmPopup" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_yesTextConfirmPopup = function() {
          /* Init Actions */
var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_yesTextConfirmPopup");
if (!$atoms || !$atoms.length) {
  return;
}
/* Variables */
const interactionHover = {"name":"none","duration":"1.5","delay":0,"iterationCount":1};
const interactionNormal = {"name":"none","duration":"1.5","delay":0,"iterationCount":"infinite"};
const interactionWhilePress = {"name":"none","duration":"1.5","delay":0,"iterationCount":1};
const interactionScrollIntoView = "";
// animation
window.SOLID.library.animation({
  elementId: "rLZEauGpn5udz71_yesTextConfirmPopup",
  $doms: $atoms,
  interactionNormal: {
    value: interactionNormal,
    previewAttr: "interactionButton"
  },
  interactionHover: {
    value: interactionHover,
    previewAttr: "interactionButtonHover"
  },
  interactionWhilePress: {
    value: interactionWhilePress,
    previewAttr: "interactionButtonWhitePress"
  },
  interactionScrollIntoView: {
    value: interactionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  animationType: "block",
  mode: "production",
})

for (let i = 0; i < $atoms.length; i++) {
  const $atom = $atoms[i];
  // function customEvent(actions, id, key)
  
    $($atom).customEvent([], "rLZEauGpn5udz71_yesTextConfirmPopup" + "_" + i);
  

  /* Listen if is button add to card */

  window.SOLID.store.subscribe("loading-buy-now-rLZEauGpn5udz71_yesTextConfirmPopup" + "_" + i, function (isDisplay) {
    const $loadingEl = $($atom).find(".atom-button-loading-circle-loader");
    const $textEl = $($atom).find(".gt_button-content-text");
    if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
      let timeout = undefined;
      if (isDisplay === true) {
        /* display loading button */
        clearTimeout(timeout);
        $loadingEl.css("display", "inline-block");
        $textEl.css("visibility", "hidden");
      } else if (isDisplay === "stop") {
        /* stop loading */
        $loadingEl.removeAttr("style");
        $textEl.removeAttr("style");
        window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_yesTextConfirmPopup", "");
        window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_yesTextConfirmPopup" + "_" + i, "");
      } else if (isDisplay === false){
        clearTimeout(timeout);
        /* display tick button */
        $loadingEl.addClass("load-complete");
        $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
        /* remove tick button and display text*/
        timeout = setTimeout(function() {
          $loadingEl.removeClass("load-complete");
          $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
          $loadingEl.removeAttr("style");
          $textEl.removeAttr("style");
          window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_yesTextConfirmPopup", "");
          window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_yesTextConfirmPopup" + "_" + i, "");
        }, 3000);
      }
    }
  });
}

        }
        funcESAtomrLZEauGpn5udz71_yesTextConfirmPopup()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_yesTextConfirmPopup" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomrLZEauGpn5udz71_noTextConfirmPopup = function() {
          /* Init Actions */
var $atoms = jQuery(".gt_atom-rLZEauGpn5udz71_noTextConfirmPopup");
if (!$atoms || !$atoms.length) {
  return;
}
/* Variables */
const interactionHover = {"name":"none","duration":"1.5","delay":0,"iterationCount":1};
const interactionNormal = {"name":"none","duration":"1.5","delay":0,"iterationCount":"infinite"};
const interactionWhilePress = {"name":"none","duration":"1.5","delay":0,"iterationCount":1};
const interactionScrollIntoView = "";
// animation
window.SOLID.library.animation({
  elementId: "rLZEauGpn5udz71_noTextConfirmPopup",
  $doms: $atoms,
  interactionNormal: {
    value: interactionNormal,
    previewAttr: "interactionButton"
  },
  interactionHover: {
    value: interactionHover,
    previewAttr: "interactionButtonHover"
  },
  interactionWhilePress: {
    value: interactionWhilePress,
    previewAttr: "interactionButtonWhitePress"
  },
  interactionScrollIntoView: {
    value: interactionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  animationType: "block",
  mode: "production",
})

for (let i = 0; i < $atoms.length; i++) {
  const $atom = $atoms[i];
  // function customEvent(actions, id, key)
  
    $($atom).customEvent([], "rLZEauGpn5udz71_noTextConfirmPopup" + "_" + i);
  

  /* Listen if is button add to card */

  window.SOLID.store.subscribe("loading-buy-now-rLZEauGpn5udz71_noTextConfirmPopup" + "_" + i, function (isDisplay) {
    const $loadingEl = $($atom).find(".atom-button-loading-circle-loader");
    const $textEl = $($atom).find(".gt_button-content-text");
    if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
      let timeout = undefined;
      if (isDisplay === true) {
        /* display loading button */
        clearTimeout(timeout);
        $loadingEl.css("display", "inline-block");
        $textEl.css("visibility", "hidden");
      } else if (isDisplay === "stop") {
        /* stop loading */
        $loadingEl.removeAttr("style");
        $textEl.removeAttr("style");
        window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_noTextConfirmPopup", "");
        window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_noTextConfirmPopup" + "_" + i, "");
      } else if (isDisplay === false){
        clearTimeout(timeout);
        /* display tick button */
        $loadingEl.addClass("load-complete");
        $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
        /* remove tick button and display text*/
        timeout = setTimeout(function() {
          $loadingEl.removeClass("load-complete");
          $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
          $loadingEl.removeAttr("style");
          $textEl.removeAttr("style");
          window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_noTextConfirmPopup", "");
          window.SOLID.store.dispatch("loading-buy-now-rLZEauGpn5udz71_noTextConfirmPopup" + "_" + i, "");
        }, 3000);
      }
    }
  });
}

        }
        funcESAtomrLZEauGpn5udz71_noTextConfirmPopup()
      } catch(e) {
        console.error("Error ESAtom Id: rLZEauGpn5udz71_noTextConfirmPopup" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESWidget9lpAEDZGOO3P4CT = function() {
          
        }
        funcESWidget9lpAEDZGOO3P4CT()
      } catch(e) {
        console.error("Error ESWidget Id: 9lpAEDZGOO3P4CT" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESWidget2XaDNnPTQmaTgc1 = function() {
          (function() {
  var elementClassName = ".gt_widget-2XaDNnPTQmaTgc1";
  var id = "2XaDNnPTQmaTgc1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var campaignSettings = [];
    var productJson;
    var DISCOUNT_ZERO_MESSAGE = "Discount Value or Minimum Quantity for this product is 0! There need to be positive numbers for addon to show.";
    var NOT_ACTIVE_MSG = "Current product is not in any active campaign! Click “Edit Campaign” in left setting sidebar to edit campaigns.";
    var mode = "production";
    var isPreview = "false" === "true";
    var $discountPlace;
    var actionBuyRedirect = "cart";
    var elementType = "section_cart";
    var presetsSectionProduct = "section_product_1";
    var presetsProductPage = "product_page";
    var presetsCartPage = "cart_page";
    var showVariantsSectionProduct = "false" === "true";
    var showVariantsProductPage = "false" === "true";
    var showVariantsCartPage = "false" === "true";
    var syncDiscountPrice = "false" === "true";
    var showVariantSelector;
    var presets;
    var discounts = [];
    /* store get state block script */
    /* methods block script */
    function initScript() {
      getCampainSetting();
      getPresetsAndShowVariantsSelector();
      getContainer();
      initRenderPreset();
    }

    function getCampainSetting() {
      campaignSettings = window.SOLID.store.getState("esDiscountsData") || [];
    }

    function getPresetsAndShowVariantsSelector() {
      if (elementType === "section_product") {
        presets = presetsSectionProduct;
        showVariantSelector = showVariantsSectionProduct;
      } else if (elementType === "product_page") {
        presets = presetsProductPage;
        showVariantSelector = showVariantsProductPage;
      } else if (elementType === "section_cart" || elementType === "cart_drawer") {
        presets = presetsCartPage;
        showVariantSelector = showVariantsCartPage;
      }
    }

    function getContainer() {
      if (presets === "product_page") {
        $discountPlace = $element.find(".gt_upsell_product_page--discounts");
      } else if (presets === "cart_page") {
        $discountPlace = $element.find(".gt_upsell_container-list");
      } else {
        $discountPlace = $element.find(".gt_upsell_container");
      }
    }

    function initRenderPreset() {
      switch (presets) {
        case "cart_page": {
          initRenderPresetCartPage();
          break;
        }
        case "section_product_1": {
          initRenderPresetSectionProduct();
          listenChangeVariant("section_product_1");
          break;
        }
        case "section_product_2": {
          initRenderPresetSectionProduct();
          listenChangeVariant("section_product_2");
          break;
        }
        case "product_page": {
          initRenderPresetProductPage();
          listenChangeVariant("product_page");
          break;
        }
      }
    }

    function initRenderPresetCartPage() {
      if (mode === "dev") {
        var demoDiscounts = [{
            discount: 20,
            quantity: 2
          },
          {
            discount: 30,
            quantity: 3
          },
          {
            discount: 40,
            quantity: 4
          },
        ];
        renderUpsellItemCartPage(demoDiscounts);
      } else {
        renderItemsInCartItems();
      }
    }

    function initRenderPresetSectionProduct() {
      getProductJson();
      if (!productJson) {
        return;
      }
      getDiscountsAndRender();
      listenAtomRender();
    }

    function initRenderPresetProductPage() {
      getProductJsonInProductPage();
      if (!productJson) {
        return;
      }
      getDiscountsAndRender();
      listenAtomRender();
    }

    function getProductJson() {
      var $productEl = $element.closest("[keyword='product'], [data-keyword='product']");
      if (!$productEl.length) {
        return;
      }
      var $productJson = $productEl.find(".ProductJson");
      if (!$productJson.length) {
        return;
      }
      try {
        productJson = JSON.parse($productJson.text());
      } catch (error) {
        console.log(error);
      }
    }

    function getProductJsonInProductPage() {
      var $productJson = $element.find(".UpsellProductJson");
      if (!$productJson) {
        return;
      }
      try {
        productJson = JSON.parse($productJson.text());
      } catch (error) {
        console.log(error);
      }
    }

    function getDiscountsAndRender() {
      showEmptyUpsellOnEditor();
      sortCampaignsByPriority();
      getSatisfyDiscounts();
      showProductUpsell(discounts);
    }

    function showEmptyUpsellOnEditor() {
      if (!campaignSettings.length) {
        showProductUpsell([]);
        return;
      }
    }

    function sortCampaignsByPriority() {
      campaignSettings = campaignSettings.sort(function(c1, c2) {
        return c1.price_rule.target_selection > c2.price_rule.target_selection ? 1 : -1;
      });
    }

    function getSatisfyDiscounts() {
      discounts = [];
      removeNotSatisfyDiscounts();
    }

    function removeNotSatisfyDiscounts() {
      campaignSettings.forEach(function(campaign) {
        if (!campaign.price_rule) {
          return;
        }
        if ((campaign.started_at && !isBeforeToday(campaign.started_at)) || isBeforeToday(campaign.completed_at)) {
          return;
        }
        if (campaign.price_rule.target_type === "shipping_line") {
          return;
        }
        var campaignIncludeProduct;
        if (campaign.price_rule && campaign.price_rule.products && campaign.price_rule.products.length) {
          campaignIncludeProduct = campaign.price_rule.products.some((product) => product.id === productJson.id);
        }
        if (!(campaign.price_rule.target_selection === "all" || (campaign.price_rule.target_selection === "entitled" && campaignIncludeProduct))) {
          return;
        }
        var productQuantity = parseInt(campaign.price_rule.prerequisite_quantity_range?.greater_than_or_equal_to);
        var productDiscount = -parseInt(campaign.price_rule.value);
        if (productQuantity <= 0 || productDiscount <= 0) {
          return;
        }
        discounts.push({
          title: "",
          quantity: productQuantity,
          discount: productDiscount,
          tag: campaign.tag,
          code: campaign.code,
        });
      });
    }

    function isBeforeToday(date) {
      if (!date) {
        return false;
      }
      const formatDate = new Date(date);
      const today = new Date();
      return formatDate < today;
    }

    function showProductUpsell(discounts, errorMessage) {
      clearContainer();
      if (discounts.length) {
        initRenderDiscounts(discounts);
      } else {
        showWarningInDev(errorMessage);
      }
    }

    function showWarningInDev(errorMessage) {
      
    }

    function clearContainer() {
      $discountPlace.html("");
    }

    function initRenderDiscounts(discounts) {
      sortDiscounts();
      discounts.forEach((item, index) => {
        let $discountItemTemplate = $element.find(".gt_upsell_item-template").children();
        let $discountItem = $discountItemTemplate.clone();
        switch (presets) {
          case "section_product_1": {
            renderInSectionProductPreset1($discountItem, item, index);
            $discountPlace.append($discountItem);
            break;
          }
          case "section_product_2": {
            renderInSectionProductPreset2($discountItem, item, index);
            $discountPlace.append($discountItem);
            break;
          }
          case "product_page": {
            if (index >= 3) {
              break;
            }
            if (index % 2 == 0) {
              $discountItemTemplate = $element.find(".gt_upsell_item-template.gt_upsell_item-template-product-page-even").children();
              $discountItem = $discountItemTemplate.clone();
              renderInProductPage($discountItem, item, index);
            } else {
              $discountItemTemplate = $element.find(".gt_upsell_item-template.gt_upsell_item-template-product-page-odd").children();
              $discountItem = $discountItemTemplate.clone();
              renderInProductPage($discountItem, item, index);
            }
            $discountPlace.append($discountItem);
            break;
          }
        }
      });
      if (showVariantSelector) {
        callEventInVariantSelectAtom();
      }
    }

    function sortDiscounts() {
      discounts.sort(function(a, b) {
        return a.quantity - b.quantity;
      });
    }

    function callEventInVariantSelectAtom() {
      setTimeout(() => {
        switch (presets) {
          case "section_product_1": {
            callEventInVariantInSectionProduct();
            break;
          }
          case "product_page": {
            callEventInVariantInProductPage();
            break;
          }
          case "cart_page": {
            callEventInVariantInCartPage();
            break;
          }
        }
      }, 10);
    }

    function callEventInVariantInSectionProduct() {
      const $atomVariant = $element.find(".gt_atom-" + id + "_variantSelect");
      for (let i = 0; i < $atomVariant.length; i++) {
        const atomVariantSelectPublic = window.SOLID.public["atom_" + id + "_variantSelect_" + i];
        if (atomVariantSelectPublic) {
          atomVariantSelectPublic.addEventSelect();
        }
      }
    }

    function callEventInVariantInProductPage() {
      const $atomVariantEven = $element.find(".gt_atom-" + id + "_variantSelectProductPageEven");
      for (let i = 0; i < $atomVariantEven.length; i++) {
        const atomVariantSelectEventPublic = window.SOLID.public["atom_" + id + "_variantSelectProductPageEven_" + i];
        if (atomVariantSelectEventPublic) {
          atomVariantSelectEventPublic.addEventSelect();
        }
      }
      const $atomVariantOdd = $element.find(".gt_atom-" + id + "_variantSelectProductPageOdd");
      for (let i = 0; i < $atomVariantOdd.length; i++) {
        const atomVariantSelectOddPublic = window.SOLID.public["atom_" + id + "_variantSelectProductPageOdd_" + i];
        if (atomVariantSelectOddPublic) {
          atomVariantSelectOddPublic.addEventSelect();
        }
      }
    }

    function callEventInVariantInCartPage() {
      const $atomVariant = $element.find(".gt_atom-" + id + "_variantSelectCartDrawer");
      for (let i = 0; i < $atomVariant.length; i++) {
        const atomVariantSelectPublic = window.SOLID.public["atom_" + id + "_variantSelectCartDrawer_" + i];
        if (atomVariantSelectPublic) {
          atomVariantSelectPublic.addEventSelect();
        }
      }
    }

    function renderInSectionProductPreset1($discountItem, discountData, discountIndex) {
      renderDiscountValueInSectionProductPreset1($discountItem, discountData);
      renderDiscountQuantityInSectionProductPreset1($discountItem, discountData);
      listenChangeVariantInRenderSectionProduct($discountItem, discountData, discountIndex);
      renderContentInSectionProductPreset1($discountItem, discountData, discountIndex);
      renderAtomPriceInSectionProductDetails();
    }

    function renderDiscountValueInSectionProductPreset1($discountItem, discountData) {
      const $discountValue = $discountItem.find(".gt_upsell_discount_value");
      $discountValue.find(".gt_content-text-value").html(discountData.discount + "%");
    }

    function renderDiscountQuantityInSectionProductPreset1($discountItem, discountData) {
      const $buttonATC = $discountItem.find(".gt_upsell-add-to-cart");
      $buttonATC.find(".gt_button-content-text-value").html(discountData.quantity);
    }

    function listenChangeVariantInRenderSectionProduct($discountItem, discountData, discountIndex) {
      const currentVariant = window.SOLID.store.getState("variant" + productJson.id);
      if (!currentVariant) {
        
        return;
      }
    }

    function renderContentInSectionProductPreset1($discountItem, discountData, discountIndex) {
      renderPriceInSectionProductPreset1($discountItem, discountData);
      renderVariantSelectInSectionProductPreset1($discountItem, discountData);
      addEventAddToCartInSectionProductPreset1($discountItem, discountData, discountIndex);
      renderDiscountPriceWhenQuantityChange();
    }

    function renderPriceInSectionProductPreset1($discountItem, discountData) {
      const currentVariant = window.SOLID.store.getState("variant" + productJson.id) || {};
      const comparePrice = currentVariant.price * discountData.quantity;
      const price = comparePrice - parseInt((comparePrice * discountData.discount) / 100);
      $discountItem.find(".gt_upsell-current-price").html(formatMoney(price));
      $discountItem.find(".gt_upsell-current-price").attr("data-currentprice", price / 100);
      $discountItem.find(".gt_upsell-compare-price").html(formatMoney(comparePrice));
      $discountItem.find(".gt_upsell-compare-price").attr("data-currentprice", comparePrice / 100);
      $discountItem.attr("data-discount", discountData.discount);
    }

    function renderVariantSelectInSectionProductPreset1($discountItem, discountData) {
      let $variantSelect;
      if (showVariantSelector) {
        $variantSelect = $discountItem.find(".gt_upsell_container-item-variant-select");
        renderVariantSelect($variantSelect, discountData);
        $variantSelect.off("click.zIndex").on("click.zIndex", () => {
          $element.find(".gt_upsell_container-item").css("z-index", "0");
          $discountItem.attr("style", "z-index: 1 !important;");
        });
      }
    }

    function addEventAddToCartInSectionProductPreset1($discountItem, discountData, discountIndex) {
      let $variantSelect;
      if (showVariantSelector) {
        $variantSelect = $discountItem.find(".gt_upsell_container-item-variant-select");
      }
      const $buttonATC = $discountItem.find(".gt_upsell-add-to-cart");
      listenAddToCart(
        $buttonATC, {
          quantity: discountData.quantity,
          buttonIdx: discountIndex,
          code: discountData.code,
        },
        $variantSelect
      );
    }

    function renderDiscountPriceWhenQuantityChange() {
      window.SOLID.store.subscribe("quantity" + productJson.id, (quantity) => {
        if (syncDiscountPrice) {
          renderPriceWhenSyncDiscount(quantity);
          return;
        }
        
      });
    }

    function renderPriceWhenSyncDiscount(quantity) {
      const {
        $atomProductPrice,
        $atomProductComparePrice,
        $atomProductPriceSticky,
        $atomProductComparePriceSticky
      } =
      getPriceDomInSectionProductAndStickyATC();
      const currentVariant = window.SOLID.store.getState("variant" + productJson.id) || {};
      var applyDiscount = getActiveDiscountByQuantity(quantity);
      var comparePriceUpSell = "";
      var priceUpSell = "";
      if (!applyDiscount) {
        comparePriceUpSell = currentVariant.compare_at_price * quantity;
        priceUpSell = currentVariant.price * quantity;
      } else {
        comparePriceUpSell = currentVariant.price * quantity;
        priceUpSell = comparePriceUpSell - parseInt((comparePriceUpSell * applyDiscount.discount) / 100);
      }
      $atomProductPrice.attr("data-currentprice", priceUpSell / quantity);
      $atomProductPrice.html(formatMoney(priceUpSell));
      $atomProductComparePrice.attr("data-currentprice", comparePriceUpSell / quantity);
      $atomProductComparePrice.html(formatMoney(comparePriceUpSell));
      if (comparePriceUpSell > priceUpSell) {
        $atomProductComparePrice.addClass("gt_active");
      } else {
        $atomProductComparePrice.remove("gt_active");
      }
      var productJsonSticky = getProductJsonFromAddOnSticky();
      if (productJsonSticky && productJsonSticky.id === productJson.id) {
        $atomProductPriceSticky.attr("data-currentprice", priceUpSell / quantity);
        $atomProductPriceSticky.html(formatMoney(priceUpSell));
        $atomProductComparePriceSticky.attr("data-currentprice", comparePriceUpSell / quantity);
        $atomProductComparePriceSticky.html(formatMoney(comparePriceUpSell));
      }
    }

    function getActiveDiscountByQuantity(quantity) {
      var applyDiscount = null;
      discounts.forEach((item) => {
        if (item.quantity <= quantity) {
          applyDiscount = item;
        }
      });
      return applyDiscount;
    }

    function renderPriceWhenNotSyncDiscount(quantity) {
      const {
        $atomProductPrice,
        $atomProductComparePrice,
        $atomProductPriceSticky,
        $atomProductComparePriceSticky
      } =
      getPriceDomInSectionProductAndStickyATC();
      const currentVariant = window.SOLID.store.getState("variant" + productJson.id) || {};
      const price = currentVariant.price * quantity;
      const comparePrice = currentVariant.compare_at_price * quantity;
      $atomProductPrice.attr("data-currentprice", price / quantity);
      $atomProductPrice.html(formatMoney(price));
      $atomProductComparePrice.attr("data-currentprice", comparePrice / quantity);
      $atomProductComparePrice.html(formatMoney(comparePrice));
      if (comparePrice > price) {
        $atomProductComparePrice.addClass("gt_active");
      } else {
        $atomProductComparePrice.remove("gt_active");
      }
      var productJsonSticky = getProductJsonFromAddOnSticky();
      if (productJsonSticky && productJsonSticky.id === productJson.id) {
        $atomProductPriceSticky.attr("data-currentprice", price / quantity);
        $atomProductPriceSticky.html(formatMoney(price));
        $atomProductComparePriceSticky.attr("data-currentprice", comparePrice / quantity);
        $atomProductComparePriceSticky.html(formatMoney(comparePrice));
      }
    }

    function getPriceDomInSectionProductAndStickyATC() {
      const $sectionProductDetail = $element.closest("section[data-name^='Product Details'], section[data-name^='Feature Product']");
      const $atomProductPrice = $sectionProductDetail.find(".gt_product-price--number");
      const $atomProductComparePrice = $sectionProductDetail.find(".gt_product-price--compare");
      const $atomProductPriceSticky = $(".sticky-cart-bar-container_infor_title_price_original .gt_product-price--number");
      const $atomProductComparePriceSticky = $(".sticky-cart-bar-container_infor_title_price_compare .gt_product-price--compare");
      return {
        $atomProductPrice,
        $atomProductComparePrice,
        $atomProductPriceSticky,
        $atomProductComparePriceSticky
      };
    }

    function getProductJsonFromAddOnSticky() {
      var $productStickyEl = $("div[data-name^='Sticky Add To Cart']");
      if ($productStickyEl.length) {
        var $productJsonSticky = $productStickyEl.find(".ProductJson");
        var productJsonSticky;
        try {
          productJsonSticky = JSON.parse($productJsonSticky.text());
        } catch (e) {}
      }
      return productJsonSticky;
    }

    function renderAtomPriceInSectionProductDetails() {
      var quantity = window.SOLID.store.getState("quantity" + productJson.id) || 1;
      if (syncDiscountPrice) {
        renderPriceWhenSyncDiscount(quantity);
      } else {
        renderPriceWhenNotSyncDiscount(quantity);
      }
    }

    function renderInSectionProductPreset2($discountItem, discountData) {
      renderDiscountValueInSectionProductPreset2($discountItem, discountData);
      renderDiscountQuantityInSectionProductPreset2($discountItem, discountData);
      addTagInSectionProductPreset2($discountItem, discountData);
      activeDiscountWithQuantity($discountItem, discountData);
      addEventClickDiscountBox($discountItem, discountData);
      listenQuantityChangeToSyncDiscount();
      renderAtomPriceInSectionProductDetails();
    }

    function listenQuantityChangeToSyncDiscount() {
      window.SOLID.store.subscribe("quantity" + productJson.id, (quantity) => {
        activeDiscountWhenQuantityChange(quantity);
        if (syncDiscountPrice) {
          renderPriceWhenSyncDiscount(quantity);
          return;
        }
        
      });
    }

    function renderDiscountValueInSectionProductPreset2($discountItem, discountData) {
      const $discountValue = $discountItem.find(".gt_upsell_container-item-discount-val");
      $discountValue.find(".gt_content-text-value").html(discountData.discount + "%");
    }

    function renderDiscountQuantityInSectionProductPreset2($discountItem, discountData) {
      const $quantity = $discountItem.find(".gt_upsell_container-item-quantity-val");
      $quantity.find(".gt_content-text-value").html(discountData.quantity);
    }

    function addTagInSectionProductPreset2($discountItem, discountData) {
      if (discountData.tag) {
        const $tag = $discountItem.find(".gt_upsell_container-item-tag");
        $tag.addClass("active");
        $tag.find(".gt_upsell_container-item-tag-val").html(discountData.tag);
      }
    }

    function activeDiscountWithQuantity($discountItem, discountData) {
      const currentQuantity = window.SOLID.store.getState("quantity" + productJson.id);
      const $discountBox = $discountItem.find(".gt_upsell_container-item");
      if (Number(currentQuantity) === Number(discountData.quantity)) {
        $discountBox.addClass("active");
      }
    }

    function addEventClickDiscountBox($discountItem, discountData) {
      const $discountBox = $discountItem.find(".gt_upsell_container-item");
      $discountBox.attr("data-quantity", discountData.quantity);
      $discountBox.off("click.quantity").on("click.quantity", () => {
        activeDiscountBoxWhenClickDiscountBox($discountBox);
        window.SOLID.store.dispatch("quantity" + productJson.id, discountData.quantity);
        if (syncDiscountPrice) {
          renderPriceWhenClickDiscountBox(discountData);
        }
      });
    }

    function activeDiscountBoxWhenClickDiscountBox($discountBox) {
      const $otherDiscountBoxes = $discountPlace.find(".gt_upsell_container-item");
      if ($otherDiscountBoxes && $otherDiscountBoxes.length) {
        $otherDiscountBoxes.removeClass("active");
      }
      $discountBox.addClass("active");
    }

    function renderPriceWhenClickDiscountBox(discountData) {
      const currentVariant = window.SOLID.store.getState("variant" + productJson.id);
      const comparePrice = currentVariant.price * discountData.quantity;
      const price = comparePrice - parseInt((comparePrice * discountData.discount) / 100);
      const $atomProductPrice = $element.closest("section").find(".gt_product-price--number");
      const $atomProductComparePrice = $element.closest("section").find(".gt_product-price--compare");
      $atomProductPrice.html(formatMoney(price));
      $atomProductComparePrice.html(formatMoney(comparePrice));
    }

    function activeDiscountWhenQuantityChange(quantity) {
      const $otherDiscountBoxes = $discountPlace.find(".gt_upsell_container-item");
      if ($otherDiscountBoxes && $otherDiscountBoxes.length) {
        $otherDiscountBoxes.removeClass("active");
      }
      const $activeDiscount = $discountPlace.find(`.gt_upsell_container-item[data-quantity="${quantity}"]`);
      $activeDiscount.addClass("active");
    }

    function renderInProductPage($discountItem, discountData, discountIndex) {
      renderDiscountValueInProductPage($discountItem, discountData);
      renderDiscountQuantityInProductPage($discountItem, discountData);
      renderDiscountPriceInProductPage($discountItem, discountData);
      renderVariantSelectInProductPage($discountItem, discountData, discountIndex);
      addEventAddToCartInProductPage($discountItem, discountData, discountIndex);
    }

    function renderDiscountValueInProductPage($discountItem, discountData) {
      const $discountValue = $discountItem.find(".gt_upsell--discounts-item-info-value-discount");
      $discountValue.find(".gt_content-text-value").html(discountData.discount + "%");
    }

    function renderDiscountQuantityInProductPage($discountItem, discountData) {
      const $discountQuantity = $discountItem.find(".gt_upsell--discounts-item-info-quantity-value");
      $discountQuantity.find(".gt_content-text-value").html(discountData.quantity);
    }

    function renderDiscountPriceInProductPage($discountItem, discountData) {
      let currentVariant = window.SOLID.store.getState("variant" + productJson.id);
      if (!currentVariant && productJson.variants && productJson.variants.length) {
        currentVariant = productJson.variants.find((variant) => variant.available);
      }
      if (currentVariant) {
        const comparePrice = currentVariant.price * discountData.quantity;
        const price = comparePrice - parseInt((comparePrice * discountData.discount) / 100);
        $discountItem.find(".gt_upsell--discounts-item-info-value-price").html(formatMoney(price));
        $discountItem.find(".gt_upsell--discounts-item-info-value-price").attr("data-currentprice", price / 100);
        $discountItem.find(".gt_upsell--discounts-item-info-value-compare-price").html(formatMoney(comparePrice));
        $discountItem.find(".gt_upsell--discounts-item-info-value-compare-price").attr("data-currentprice", comparePrice / 100);
      }
    }

    function renderVariantSelectInProductPage($discountItem, discountData, discountIndex) {
      let $variantSelect;
      if (showVariantSelector) {
        if (discountIndex % 2 === 0) {
          $variantSelect = $discountItem.find(".gt_upsell_product_page-even-variant-select");
          renderVariantSelect($variantSelect, discountData);
        } else {
          $variantSelect = $discountItem.find(".gt_upsell_product_page-odd-variant-select");
          renderVariantSelect($variantSelect, discountData);
        }
      }
    }

    function addEventAddToCartInProductPage($discountItem, discountData, discountIndex) {
      let $variantSelect;
      if (showVariantSelector) {
        if (discountIndex % 2 === 0) {
          $variantSelect = $discountItem.find(".gt_upsell_product_page-even-variant-select");
        } else {
          $variantSelect = $discountItem.find(".gt_upsell_product_page-odd-variant-select");
        }
      }
      const $buttonATC = $discountItem.find(".gt_upsell--discounts-item-button");
      listenAddToCart(
        $buttonATC, {
          quantity: discountData.quantity,
          buttonIdx: discountIndex,
          code: discountData.code,
        },
        $variantSelect
      );
    }

    function renderItemsInCartItems() {
      //getproductid
      const $cartItem = $element.closest(".gt_cart-item, .gt_items--content");
      const productId = $cartItem.attr("data-product-id");
      const variantId = $cartItem.attr("data-variant-id");
      const productHandle = $cartItem.attr("data-product-handle");
      if (!productId) {
        return;
      }
      //getdiscounts
      const discounts = [];
      //showemptyupselloneditor
      if (!campaignSettings.length) {
        showProductUpsell([]);
        return;
      }
      //sortcampaignsbycampaignTypepriority:all<entitled(forspecifyproducts)
      campaignSettings = campaignSettings.sort(function(c1, c2) {
        return c1.price_rule.target_selection > c2.price_rule.target_selection ? 1 : -1;
      });
      //getcart
      const cart = window.SOLID.store.getState("cart");
      if (!cart && elementType === "section_cart") {
        return;
      }
      campaignSettings.forEach(function(campaign) {
        if (!campaign.price_rule) {
          return;
        }
        //completebeforetodayorstartedaftertoday=>disabled
        if ((campaign.started_at && !isBeforeToday(campaign.started_at)) || isBeforeToday(campaign.completed_at)) {
          return;
        }
        if (campaign.price_rule.target_type === "shipping_line") {
          return;
        }
        let campaignIncludeProduct;
        if (campaign.price_rule && campaign.price_rule.products && campaign.price_rule.products.length) {
          campaignIncludeProduct = campaign.price_rule.products.some((product) => String(product.id) === String(productId));
        }

        if (!(campaign.price_rule.target_selection === "all" || (campaign.price_rule.target_selection === "entitled" && campaignIncludeProduct))) {
          return;
        }

        let productQuantity = parseInt(campaign.price_rule.prerequisite_quantity_range?.greater_than_or_equal_to);
        const productDiscount = -parseInt(campaign.price_rule.value);
        //checkquantityitemexist
        let prodQuantityExistInCart = 0;
        if (cart && cart.items && cart.items.length) {
          cart.items.forEach((cartItem) => {
            if (String(cartItem.product_id) === String(productId)) {
              prodQuantityExistInCart += cartItem.quantity;
            }
          });
        }
        productQuantity = productQuantity - prodQuantityExistInCart;
        if (productQuantity <= 0 || productDiscount <= 0) {
          return;
        }

        discounts.push({
          title: "",
          quantity: productQuantity,
          discount: productDiscount,
          tag: campaign.tag,
          code: campaign.code,
        });
      });
      //sortdiscounts
      discounts.sort(function(a, b) {
        return a.quantity - b.quantity;
      });
      //render
      renderUpsellItemCartPage(discounts, {
        variantId,
        productId,
        productHandle
      });
    }

    function renderUpsellItemCartPage(discounts, productData) {
      clearContainer();
      const $showLess = $element.find(".gt_upsell_container-show-less");
      const $collapseItem = $element.find(".gt_upsell_container_cart-collapse");
      if (!discounts.length) {
        $collapseItem.removeClass("active");
        $showLess.removeClass("active");
      }
      if (discounts.length > 1) {
        const firstDiscount = discounts[0];
        //replace data vàoitemcollapse
        const $discountValue = $collapseItem.find(".gt_uqd_cart-collapse-discount");
        $discountValue.find(".gt_content-text-value").html(firstDiscount.discount + "%");
        const $quantityValue = $collapseItem.find(".gt_uqd_cart-collapse-quantity");
        $quantityValue.find(".gt_content-text-value").html(firstDiscount.quantity);
        const $moreDealTxt = $collapseItem.find(".gt_uqd_cart-collapse-dropdown-txt");
        const $moreDealIcon = $collapseItem.find(".gt_uqd_cart-collapse-dropdown-icon");
        // init view
        $collapseItem.addClass("active");
        $discountPlace.removeClass("active");
        $showLess.removeClass("active");
        //event
        $moreDealTxt.off("click.extend").on("click.extend", () => {
          $collapseItem.removeClass("active");
          $discountPlace.addClass("active");
          $showLess.addClass("active");
        });
        $moreDealIcon.off("click.extend").on("click.extend", () => {
          $collapseItem.removeClass("active");
          $discountPlace.addClass("active");
          $showLess.addClass("active");
        });
        $showLess.off("click.collapse").on("click.collapse", () => {
          $collapseItem.addClass("active");
          $discountPlace.removeClass("active");
          $showLess.removeClass("active");
        });
      }
      discounts.forEach((item, index) => {
        const $discountItemTemplate = $element.find(".gt_upsell_item-template").children();
        const $discountItem = $discountItemTemplate.clone();
        renderInCart($discountItem, item, index, productData);
        //appenddiscountitem
        $discountPlace.append($discountItem);
      });
      if (discounts.length === 1) {
        $discountPlace.addClass("active");
        $showLess.removeClass("active");
        $collapseItem.removeClass("active");
      }
    }

    function renderInCart($discountItem, discountData, discountIndex, productData) {
      const $discountValue = $discountItem.find(".gt_udq_cart_discount");
      $discountValue.find(".gt_content-text-value").html(discountData.discount + "%");
      const $quantityValue = $discountItem.find(".gt_udq_cart_quantity");
      $quantityValue.find(".gt_content-text-value").html(discountData.quantity);
      const $variantSelect = $discountItem.find(".gt_upsell_cart_container-item-variant");
      if (showVariantSelector) {
        if (mode === "dev") {
          renderVariantSelect($variantSelect, discountData, true);
          //addeventopenvariantselect
          if (showVariantSelector) {
            callEventInVariantSelectAtom();
          }
        } else {
          const productHandle = productData.productHandle;
          const promiseGetProduct = new Promise((resolve, reject) => {
            window.gfTheme.getProduct(
              productHandle,
              function(product) {
                resolve(product);
              },
              function() {
                resolve();
              }
            );
          });
          promiseGetProduct.then((product) => {
            renderVariantSelect($variantSelect, discountData, false, product);
            //addeventopenvariantselect
            if (showVariantSelector) {
              callEventInVariantSelectAtom();
            }
          });
        }
        //changez-indexofdiscountitemdom:
        $variantSelect.off("click.zIndex").on("click.zIndex", () => {
          $element.find(".gt_upsell_cart_container-item").css("z-index", "0");
          $discountItem.attr("style", "z-index: 1 !important;");
        });
      }
      //addeventaddtocart
      const $buttonATC = $discountItem.find(".gt_upsell_cart_container-item-button");
      listenAddToCart(
        $buttonATC, {
          quantity: discountData.quantity,
          buttonIdx: discountIndex,
          code: discountData.code,
        },
        $variantSelect,
        productData
      );
    }

    function renderVariantSelect($variantSelect, discountData, isDemo, productCartItem) {
      let productJsonData = productJson;
      if (isDemo) {
        productJsonData = {
          variants: [{
              id: 1,
              title: "S / BLUE",
              available: true,
            },
            {
              id: 2,
              title: "S / LIGHT BLUE",
              available: true,
            },
            {
              id: 3,
              title: "S / RED",
              available: true,
            },
          ],
        };
      } else if (productCartItem) {
        productJsonData = productCartItem;
      }
      if (productJsonData.variants && productJsonData.variants.length) {
        for (let itemIdx = 0; itemIdx < discountData.quantity; itemIdx++) {
          const $variantPlace = $variantSelect.find(".gt_variant-select");
          //cloneitem
          const $variantSelectItemTemp = $variantSelect.find(".gt_variant-select-item--template");
          const $variantSelectItem = $variantSelectItemTemp.clone();
          $variantSelectItem.removeClass("gt_variant-select-item--template");
          //replaceindexitem
          $variantSelectItem.find(".gt_variant-select-item-title--value-content").html("#" + (itemIdx + 1));
          //replacevalueselect
          const firstVariant = productJsonData.variants[0];
          const $variantChecked = $variantSelectItem.find(".gt_variant-select-item-option--selected-text");
          $variantChecked.html(firstVariant.title);
          $variantChecked.attr("data-id", firstVariant.id);
          //replaceoptions
          const $options = $variantSelectItem.find(".gt_variant-select-item-options");
          const $option = $variantSelectItem.find(".gt_variant-select-item-option");
          for (let varIdx = 0; varIdx < productJsonData.variants.length; varIdx++) {
            const variant = productJsonData.variants[varIdx];
            let $newOption = $option;
            if (varIdx !== 0) {
              $newOption = $option.clone();
              $newOption.removeClass("active");
              $newOption.removeClass("gt_disabled");
            }
            if (firstVariant.id == variant.id) {
              $newOption.addClass("active");
            }
            if (!variant.available) {
              $newOption.addClass("gt_disabled");
            }
            $newOption.attr("data-id", variant.id);
            $newOption.attr("data-title", variant.title);
            const $optionText = $newOption.find(".gt_variant-select-item-option--txt");
            $optionText.html(variant.title);
            if (varIdx !== 0) {
              $options.append($newOption);
            }
          }
          $variantPlace.append($variantSelectItem);
        }
      }
    }

    function listenAtomRender() {
      
    }

    function listenChangeVariant(preset) {
      if (!showVariantSelector) {
        var currentVariant = window.SOLID.store.getState("variant" + productJson.id) || {};
        checkSoldoutVariant(currentVariant);
        window.SOLID.store.subscribe("variant" + productJson.id, (variant) => {
          getDiscountsAndRender();
          checkSoldoutVariant(variant);
        });
      } else {
        window.SOLID.store.subscribe("variantSelectChangeValue", (e) => {
          const $target = $(e.target);
          //tìmlênparentdiscountitem
          const $discountItem = $target.closest(".gt_upsell_container-item");
          const $selectedOptions = $discountItem.find(".gt_variant-select-item-option--selected-text");
          const selectedVariants = [];
          $selectedOptions.each(function() {
            const variantId = $(this).attr("data-id");
            if (variantId) {
              selectedVariants.push(variantId);
            }
          });
          let listSelectedVariants = selectedVariants.map((variantId) => {
            return productJson.variants.find((variant) => Number(variant.id) === Number(variantId));
          });
          //filternhữngtrườnghợpnull
          listSelectedVariants = listSelectedVariants.filter((variant) => variant);
          //replacelạipricevàcompare_price
          let totalPrice = 0;
          listSelectedVariants.forEach((variant) => {
            totalPrice += variant.price;
          });
          const discount = $discountItem.attr("data-discount");
          const price = totalPrice - parseInt((totalPrice * Number(discount)) / 100);
          //updatepricetheotừngloạipreset
          switch (preset) {
            case "section_product_1": {
              $discountItem.find(".gt_upsell-current-price").html(formatMoney(price));
              $discountItem.find(".gt_upsell-current-price").attr("data-currentprice", price / 100);
              $discountItem.find(".gt_upsell-compare-price").html(formatMoney(totalPrice));
              $discountItem.find(".gt_upsell-compare-price").attr("data-currentprice", totalPrice / 100);
              break;
            }
          }
        });
      }
    }

    function listenAddToCart($button, data, $variantSelect, dataCartPage) {
      setTimeout(() => {
        if (mode !== "production") {
          return;
        }
        const buttonId = id + "_buttonAddToCart";
        const buttonIdx = data.buttonIdx;
        const discountCode = data.code;
        if (showVariantSelector && $variantSelect && $variantSelect.length) {
          $button.off("click").on("click", (e) => {
            e.preventDefault();
            e.stopImmediatePropagation();
            const {
              error,
              properties
            } = getPropertiesFromForm($(e.target));
            if (error) {
              return;
            }
            const $selectedOptions = $variantSelect.find(".gt_variant-select-item-option--selected-text");
            const selectedVariants = [];
            $selectedOptions.each(function() {
              const variantId = $(this).attr("data-id");
              if (variantId) {
                selectedVariants.push(variantId);
              }
            });
            const variantsQuantityMap = selectedVariants.reduce((last, curr) => {
              const foundVariant = last.find((i) => i.id == curr);
              if (!foundVariant) {
                return [
                  ...last,
                  {
                    id: curr,
                    quantity: 1,
                    properties,
                  },
                ];
              }
              foundVariant.quantity += 1;
              return last;
            }, []);
            window.SOLID.store.dispatch("loading-buy-now-" + buttonId + "_" + buttonIdx, true);
            window.gfTheme.addManyItems({
                items: variantsQuantityMap,
              },
              function(_, error) {
                if (error) {
                  console.log("Error UQD V2 Add To Cart: ", error);
                  if (error && error.responseJSON && error.responseJSON.description) {
                    alert(error.responseJSON.description);
                  }
                } else {
                  window.gfTheme.getCart(function(cart) {
                    if (cart) {
                      window.SOLID.store.dispatch("cart.item_count", cart.item_count);
                    }
                    if (actionBuyRedirect === "cart") {
                      const addons = window.SOLID.store.getState("addons");
                      if (addons && addons.cart_drawer && addons.cart_drawer.autoOpenCartDrawer && window.location.pathname !== "/cart") {
                        window.SOLID.store.dispatch("openCartPopup", "cart_drawer");
                      } else {
                        window.location.href = "/cart";
                      }
                    } else if (actionBuyRedirect === "checkout") {
                      const parser = document.createElement("a");
                      const url = window.location.href;
                      parser.href = url;
                      let checkoutURL = parser.protocol + "//" + parser.host + "/checkout";
                      const applyDiscount = window.SOLID.store.getState("discount");
                      if (applyDiscount && applyDiscount.title) {
                        checkoutURL += "?discount=" + applyDiscount.title;
                      } else if (discountCode) {
                        //trongtrườnghợpsửdụngvớithemekhác
                        checkoutURL += "?discount=" + discountCode;
                      }
                      window.location.href = checkoutURL;
                    } else {
                      //stayonpage&opencartdrawer
                      if (window.location.pathname === "/cart") {
                        window.location.href = "/cart";
                      } else {
                        window.SOLID.store.dispatch("openCartPopup", "cart_drawer");
                      }
                    }
                  });
                }
                window.SOLID.store.dispatch("loading-buy-now-" + buttonId + "_" + buttonIdx, false);
              }
            );
          });
        } else if (dataCartPage) {
          const variantId = dataCartPage.variantId;
          const actions = [{
            id: 1,
            event: "click",
            control: {
              id: "1",
              attribute: "1",
              type: "pickproduct",
              value: {
                variantId: variantId,
                quantity: data.quantity,
              },
            },
          }, ];
          if (actionBuyRedirect === "cart") {
            actions.push({
              id: 2,
              event: "click",
              control: {
                id: "2",
                attribute: "2",
                type: "picklink",
                value: "/cart",
              },
            });
          } else if (actionBuyRedirect === "checkout") {
            actions.push({
              id: 2,
              event: "click",
              control: {
                id: "2",
                attribute: "2",
                type: "picklink",
                value: "/checkout",
              },
            });
          }
          $button.customEvent(actions, buttonId + "_" + buttonIdx);
        } else {
          const currentVariant = window.SOLID.store.getState("variant" + productJson.id);
          const actions = [{
            id: 1,
            event: "click",
            control: {
              id: "1",
              attribute: "1",
              type: "pickproduct",
              value: {
                variantId: currentVariant.id,
                quantity: data.quantity,
              },
            },
          }, ];
          if (actionBuyRedirect === "cart") {
            actions.push({
              id: 2,
              event: "click",
              control: {
                id: "2",
                attribute: "2",
                type: "picklink",
                value: "/cart",
              },
            });
            $button.customEvent(actions, buttonId + "_" + buttonIdx);
          } else if (actionBuyRedirect === "checkout") {
            const applyDiscount = window.SOLID.store.getState("discount");
            if (applyDiscount && applyDiscount.title) {
              actions.push({
                id: 2,
                event: "click",
                control: {
                  id: "2",
                  attribute: "2",
                  type: "picklink",
                  value: "/checkout",
                },
              });
              $button.customEvent(actions, buttonId + "_" + buttonIdx);
            } else {
              //trongtrườnghợpsửdụngvớithemekhác
              $button.off("click").on("click", (e) => {
                e.preventDefault();
                e.stopImmediatePropagation();
                const {
                  error,
                  properties
                } = getPropertiesFromForm($(e.target));
                if (error) {
                  return;
                }
                const currentVariant = window.SOLID.store.getState("variant" + productJson.id);
                window.SOLID.store.dispatch("loading-buy-now-" + buttonId + "_" + buttonIdx, true);
                window.gfTheme.addItem(
                  currentVariant.id,
                  data.quantity,
                  function(_, error) {
                    if (error) {
                      window.SOLID.store.dispatch("loading-buy-now-" + buttonId + "_" + buttonIdx, false);
                      console.log("Error UQD V2 Add To Cart: ", error);
                      if (error && error.responseJSON && error.responseJSON.description) {
                        alert(error.responseJSON.description);
                      }
                    } else {
                      const parser = document.createElement("a");
                      const url = window.location.href;
                      parser.href = url;
                      let checkoutURL = parser.protocol + "//" + parser.host + "/checkout";
                      if (discountCode) {
                        //trongtrườnghợpsửdụngvớithemekhác
                        checkoutURL += "?discount=" + discountCode;
                      }
                      window.location.href = checkoutURL;
                    }
                  },
                  properties
                );
              });
            }
          } else {
            $button.customEvent(actions, buttonId + "_" + buttonIdx);
          }
        }
        /*Listenifisbuttonaddtocard*/
        window.SOLID.store.subscribe("loading-buy-now-" + buttonId + "_" + buttonIdx, function(isDisplay) {
          const $loadingEl = $button.find(".atom-button-loading-circle-loader");
          const $textEl = $button.find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              window.SOLID.store.dispatch("loading-buy-now-" + buttonId + "_" + buttonIdx, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                window.SOLID.store.dispatch("loading-buy-now-" + buttonId + "_" + buttonIdx, "");
              }, 3000);
            }
          }
        });
      }, 10);
    }

    function checkSoldoutVariant(variant) {
      $buttonATCs = $element.find(".gt_upsell-add-to-cart");
      if (!variant.available) {
        $buttonATCs.addClass("gt_sold_out");
      } else {
        $buttonATCs.removeClass("gt_sold_out");
      }
    }

    function formatMoney(price) {
      if (price) {
        var dataCurrency = window.SOLID.store.getState("dataCurrency");
        var formatPrice = 0;
        if (dataCurrency) {
          formatPrice = Shopify.gemFormatMoney(price, dataCurrency.currency, dataCurrency.data);
        } else {
          var _formatMoney = __GemSettings.money;
          formatPrice = Shopify.formatMoney(price, _formatMoney);
        }
        return formatPrice;
      }
      return "";
    }

    function getPropertiesFromForm($target) {
      const $form = $target.closest("form");
      if ($form && $form.length && !$form[0].checkValidity()) {
        $form[0].reportValidity && $form[0].reportValidity();
        return {
          error: true,
          properties: {},
        };
      }
      let properties = {};
      const $propertyInputs = $form.find("input[name^='properties[']");
      if ($propertyInputs && $propertyInputs.length) {
        for (let j = 0; j < $propertyInputs.length; j++) {
          const $propertyInput = $($propertyInputs[j]);
          const attributeName = $propertyInput.attr("name");
          const splits = attributeName.match(/\[(.+)\]/);
          if (splits && splits.length >= 2 && $propertyInput.val()) {
            const propertyName = splits[1];
            properties[propertyName] = $propertyInput.val();
          }
        }
      }
      return {
        error: false,
        properties,
      };
    }

    function resetOriginalPriceInProductPrice() {
      const quantity = window.SOLID.store.getState("quantity" + productJson.id) || 1;
      
    }
    /* init block script */
    initScript();
    /* store subscribe block script */
    store.subscribe("esDiscountsData", initScript);

    function destroy() {
      store.unsubscribe("esDiscountsData", initScript);
    }
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /* global block script */
  var timeoutClearReRender;
  var elementType = "section_cart";

  function reRenderInCart() {
    clearTimeout(timeoutClearReRender);
    timeoutClearReRender = setTimeout(() => {
      $elements = document.querySelectorAll(elementClassName);
      main();
    }, 100);
  }
  if (elementType === "cart_drawer") {
    window.SOLID.store.subscribe("rerenderingAjaxShopifyCartDrawer", function(isRendering) {
      if (!isRendering) {
        reRenderInCart();
      }
    });
    window.SOLID.store.subscribe("gtCartInput", function() {
      reRenderInCart();
    });
  }
  if (elementType === "section_cart") {
    window.SOLID.store.subscribe("cart", function() {
      reRenderInCart();
    });
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESWidget2XaDNnPTQmaTgc1()
      } catch(e) {
        console.error("Error ESWidget Id: 2XaDNnPTQmaTgc1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxContainer = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxContainer";
  var id = "2XaDNnPTQmaTgc1_boxContainer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxContainer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxContainer()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxContainer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxDiscountItem = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxDiscountItem";
  var id = "2XaDNnPTQmaTgc1_boxDiscountItem";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxDiscountItem",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxDiscountItem()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxDiscountItem" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxLeft = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxLeft";
  var id = "2XaDNnPTQmaTgc1_boxLeft";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxLeft",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxLeft()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxLeft" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxContent = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxContent";
  var id = "2XaDNnPTQmaTgc1_boxContent";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxContent",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxContent()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxContent" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_discountIcon = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_discountIcon";
  var id = "2XaDNnPTQmaTgc1_discountIcon";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_discountIcon",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_discountIcon()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_discountIcon" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxContentValue = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxContentValue";
  var id = "2XaDNnPTQmaTgc1_boxContentValue";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxContentValue",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxContentValue()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxContentValue" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxPrice = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxPrice";
  var id = "2XaDNnPTQmaTgc1_boxPrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxPrice",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxPrice()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxPrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_valueText = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_valueText";
  var id = "2XaDNnPTQmaTgc1_valueText";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_valueText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_valueText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_valueText()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_valueText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxPriceDetail = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxPriceDetail";
  var id = "2XaDNnPTQmaTgc1_boxPriceDetail";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxPriceDetail",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxPriceDetail()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxPriceDetail" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_priceText = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_priceText";
  var id = "2XaDNnPTQmaTgc1_priceText";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_priceText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_priceText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_priceText()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_priceText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_comparePrice = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_comparePrice";
  var id = "2XaDNnPTQmaTgc1_comparePrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_comparePrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_comparePrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_comparePrice()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_comparePrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_variantSelect = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_variantSelect";
  var id = "2XaDNnPTQmaTgc1_variantSelect";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var mode = "production";
    var animationActive = "false";
    var $variantItemTemp = $element.find(".gt_variant-select-item--template");
    var $variantsPlace = $element.find(".gt_variant-select");
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (animationActive === "true") {
        var interactionScrollIntoView = `""`;
        window.SOLID.library.animation({
          elementId: id,
          $doms: $elements,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function onOpenSelectDropdown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $selectedVariants = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      $selectedVariants
        .off("click.openSelect")
        .on("click.openSelect", function() {
          $variantSelected.removeClass("gt_active");
          var $options = $(this).siblings(".gt_variant-select-item-options");
          if ($options.hasClass("gt_active")) {
            $options.css("top", "");
            $options.removeClass("gt_active");
            $(this).removeClass("gt_active");
            $(document).off("mousedown.outsideClickVariantSelect");
          } else {
            $variantOptions.removeClass("gt_active");
            $options.addClass("gt_active");
            $(this).addClass("gt_active");
            var optionsOuterHeight = $options.outerHeight();
            var selectInputHeight = $variantSelected.outerHeight();
            var positionOptions =
              $options.offset().top -
              $(document).scrollTop() +
              optionsOuterHeight;
            var windowHeight = $(window).outerHeight();
            if (positionOptions > windowHeight) {
              const currentTopOptions = $options.css("top");
              const newTop =
                "calc( " +
                currentTopOptions +
                " - " +
                optionsOuterHeight +
                "px" +
                " - " +
                (Number(selectInputHeight) + 10) +
                "px" +
                " )";
              $options.css("top", newTop);
            }
            //addeventclickoutsidetoclose
            const $currentTargetOptions = $(this);
            $(document)
              .off("mousedown.outsideClickVariantSelect")
              .on("mousedown.outsideClickVariantSelect", function(event) {
                if (
                  $options &&
                  $options.length &&
                  $currentTargetOptions &&
                  $currentTargetOptions.length
                ) {
                  const $optionsPure = $options[0];
                  if (
                    $optionsPure &&
                    !$optionsPure.contains(event.target) &&
                    !$currentTargetOptions[0].contains(event.target)
                  ) {
                    $options.css("top", "");
                    $options.removeClass("gt_active");
                    $currentTargetOptions.removeClass("gt_active");
                    $(document).off("mousedown.outsideClickVariantSelect");
                  }
                }
              });
          }
        });
    }

    function onClickSelectDropDown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $elementOptions = $element.find(".gt_variant-select-item-option");
      $elementOptions
        .off("click.selectItem")
        .on("click.selectItem", function() {
          $variantSelected.removeClass("gt_active");
          $variantOptions.removeClass("gt_active");
          $(this)
            .siblings(".gt_variant-select-item-option")
            .removeClass("active");
          $(this).addClass("active");
          var title = $(this).attr("data-title");
          var id = $(this).attr("data-id");
          var $variantSelectedCurrent = $(this).closest(
            ".gt_variant-select-item--checked"
          );
          var $valueVariantSelected = $variantSelectedCurrent.find(
            ".gt_variant-select-item-option--selected-text"
          );
          $valueVariantSelected.html(title);
          $valueVariantSelected.attr("data-id", id);
          //triggereventchangevalue
          window.SOLID.store.dispatch("variantSelectChangeValue", {
            target: this,
            value: id,
          });
        });
    }

    function onToggleContentSelect() {
      const $title = $element.find(".gt_variant-select-title");
      $title.off("click.toggleContent").on("click.toggleContent", function() {
        const $contentSelect = $(this).siblings(".gt_variant-select");
        if ($contentSelect.hasClass("active")) {
          $contentSelect.removeClass("active");
          $(this).removeClass("active");
        } else {
          $contentSelect.addClass("active");
          $(this).addClass("active");
        }
      });
    }

    function addEventSelect() {
      onOpenSelectDropdown();
      onClickSelectDropDown();
      onToggleContentSelect();
    }

    function getVariantItem() {
      const $variantItem = $variantItemTemp.clone();
      $variantItem.removeClass("gt_variant-select-item--template");
      return $variantItem;
    }
    /* init block script */
    animation();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      addEventSelect,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_variantSelect()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_variantSelect" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_buttonAddToCart = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_buttonAddToCart";
  var id = "2XaDNnPTQmaTgc1_buttonAddToCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var scrollIntoViewActive = 'false' == 'true';
    var animationActive = 'false' == 'true';
    var animationHoverActive = 'false' == 'true';
    var scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var mode = 'production';
    var previewSoldOut = 'false';
    var actions = '[{"control":{"attribute":"1","desc":"","id":"1","reference":"html","title":"Pick Product","type":"pickproduct","value":{"id":0,"quantity":0}},"event":"click","id":1}]';
    
    var activeButtonFixContent = "true" === "true";
    var buttonFixContent = "Buy [!quantity!] Items";
    var disableListenSoldOut = "true" === "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_buttonAddToCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        };
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover",
          };
        }
        window.SOLID.library.animation(settings);
      }
    }

    function eventChangeTextInIframe() {
      
    }

    function eventListenSoldOut() {
      if (mode !== "production") {
        if (previewSoldOut === "false") {
          window.SOLID.library.gtBuyProductListenSoldOut({
            $element: $($element)[0],
            options: {
              isButtonAddToCard: true,
              textAddToCard: "Buy 2 Items!",
              textSoldOut: "Sold out",
            },
            mode: "dev"
          });
        }
      } else {
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $($element)[0],
          options: {
            isButtonAddToCard: true,
            textAddToCard: "Buy 2 Items!",
            textSoldOut: "Sold out",
          },
        });
      }
    }

    function addActionEvent() {
      // function customEvent(actions,id,key)
      if (mode === "production") {
        $($element).customEvent(
          JSON.parse(actions),
          '2XaDNnPTQmaTgc1_buttonAddToCart' + '_' + indexEl
        );
      }
      /*Listenifisbuttonaddtocard*/
      store.subscribe(
        "loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCart" + "_" + indexEl,
        function(isDisplay) {
          const $loadingEl = $($element).find(
            ".atom-button-loading-circle-loader"
          );
          const $textEl = $($element).find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCart", "");
              store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCart" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl
                .find(".atom-button-loading-check-mark")
                .css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl
                  .find(".atom-button-loading-check-mark")
                  .removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCart", "");
                store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCart" + "_" + indexEl, "");
              }, 3000);
            }
          }
        }
      );
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    if (activeButtonFixContent) {
      initFixContent();
    }
    addInteraction();
    addActionEvent();
    if (!disableListenSoldOut) {
      eventListenSoldOut();
    }
    eventChangeTextInIframe();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      eventListenSoldOut,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_buttonAddToCart()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_buttonAddToCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxContainerSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxContainerSectionProduct2";
  var id = "2XaDNnPTQmaTgc1_boxContainerSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxContainerSectionProduct2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxContainerSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxContainerSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxColumnSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxColumnSectionProduct2";
  var id = "2XaDNnPTQmaTgc1_boxColumnSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxColumnSectionProduct2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxColumnSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxColumnSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxDiscountItemSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxDiscountItemSectionProduct2";
  var id = "2XaDNnPTQmaTgc1_boxDiscountItemSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxDiscountItemSectionProduct2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxDiscountItemSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxDiscountItemSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxTagSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxTagSectionProduct2";
  var id = "2XaDNnPTQmaTgc1_boxTagSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxTagSectionProduct2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxTagSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxTagSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_tagTextSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_tagTextSectionProduct2";
  var id = "2XaDNnPTQmaTgc1_tagTextSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_tagTextSectionProduct2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_tagTextSectionProduct2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_tagTextSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_tagTextSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxQuantityValueSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxQuantityValueSectionProduct2";
  var id = "2XaDNnPTQmaTgc1_boxQuantityValueSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxQuantityValueSectionProduct2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxQuantityValueSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxQuantityValueSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_quantityTextSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_quantityTextSectionProduct2";
  var id = "2XaDNnPTQmaTgc1_quantityTextSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "Buy [!quantity!] items"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_quantityTextSectionProduct2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_quantityTextSectionProduct2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_quantityTextSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_quantityTextSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxValueSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxValueSectionProduct2";
  var id = "2XaDNnPTQmaTgc1_boxValueSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxValueSectionProduct2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxValueSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxValueSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_discountValueTextSectionProduct2 = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_discountValueTextSectionProduct2";
  var id = "2XaDNnPTQmaTgc1_discountValueTextSectionProduct2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "Get [!discount!] off"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_discountValueTextSectionProduct2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_discountValueTextSectionProduct2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_discountValueTextSectionProduct2()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_discountValueTextSectionProduct2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxContainerCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxContainerCartDrawer";
  var id = "2XaDNnPTQmaTgc1_boxContainerCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxContainerCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxContainerCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxContainerCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxCollapseCart = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxCollapseCart";
  var id = "2XaDNnPTQmaTgc1_boxCollapseCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxCollapseCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxCollapseCart()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxCollapseCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxContentValueCollapseCart = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxContentValueCollapseCart";
  var id = "2XaDNnPTQmaTgc1_boxContentValueCollapseCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxContentValueCollapseCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxContentValueCollapseCart()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxContentValueCollapseCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_discountIconCollapseCart = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_discountIconCollapseCart";
  var id = "2XaDNnPTQmaTgc1_discountIconCollapseCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_discountIconCollapseCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_discountIconCollapseCart()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_discountIconCollapseCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_quantityTextCollapseCart = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_quantityTextCollapseCart";
  var id = "2XaDNnPTQmaTgc1_quantityTextCollapseCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "[!quantity!] items"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_quantityTextCollapseCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_quantityTextCollapseCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_quantityTextCollapseCart()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_quantityTextCollapseCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_discountTextCollapseCart = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_discountTextCollapseCart";
  var id = "2XaDNnPTQmaTgc1_discountTextCollapseCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "get [!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_discountTextCollapseCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_discountTextCollapseCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_discountTextCollapseCart()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_discountTextCollapseCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_showMoreCart = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_showMoreCart";
  var id = "2XaDNnPTQmaTgc1_showMoreCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_showMoreCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_showMoreCart()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_showMoreCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_dropdownTextCollapseCart = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_dropdownTextCollapseCart";
  var id = "2XaDNnPTQmaTgc1_dropdownTextCollapseCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_dropdownTextCollapseCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_dropdownTextCollapseCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_dropdownTextCollapseCart()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_dropdownTextCollapseCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_iconDropdownCollapseCart = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_iconDropdownCollapseCart";
  var id = "2XaDNnPTQmaTgc1_iconDropdownCollapseCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_iconDropdownCollapseCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_iconDropdownCollapseCart()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_iconDropdownCollapseCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxListDiscount = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxListDiscount";
  var id = "2XaDNnPTQmaTgc1_boxListDiscount";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxListDiscount",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxListDiscount()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxListDiscount" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxDiscountItemCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxDiscountItemCartDrawer";
  var id = "2XaDNnPTQmaTgc1_boxDiscountItemCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxDiscountItemCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxDiscountItemCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxDiscountItemCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxLeftCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxLeftCartDrawer";
  var id = "2XaDNnPTQmaTgc1_boxLeftCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxLeftCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxLeftCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxLeftCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxContentCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxContentCartDrawer";
  var id = "2XaDNnPTQmaTgc1_boxContentCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxContentCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxContentCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxContentCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_discountIconCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_discountIconCartDrawer";
  var id = "2XaDNnPTQmaTgc1_discountIconCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_discountIconCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_discountIconCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_discountIconCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxContentValueCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxContentValueCartDrawer";
  var id = "2XaDNnPTQmaTgc1_boxContentValueCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxContentValueCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxContentValueCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxContentValueCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxQuantityCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxQuantityCartDrawer";
  var id = "2XaDNnPTQmaTgc1_boxQuantityCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxQuantityCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxQuantityCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxQuantityCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_quantityTextCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_quantityTextCartDrawer";
  var id = "2XaDNnPTQmaTgc1_quantityTextCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "[!quantity!] items"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_quantityTextCartDrawer",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_quantityTextCartDrawer",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_quantityTextCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_quantityTextCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_discountTextCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_discountTextCartDrawer";
  var id = "2XaDNnPTQmaTgc1_discountTextCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "get [!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_discountTextCartDrawer",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_discountTextCartDrawer",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_discountTextCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_discountTextCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_variantSelectCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_variantSelectCartDrawer";
  var id = "2XaDNnPTQmaTgc1_variantSelectCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var mode = "production";
    var animationActive = "false";
    var $variantItemTemp = $element.find(".gt_variant-select-item--template");
    var $variantsPlace = $element.find(".gt_variant-select");
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (animationActive === "true") {
        var interactionScrollIntoView = `""`;
        window.SOLID.library.animation({
          elementId: id,
          $doms: $elements,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function onOpenSelectDropdown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $selectedVariants = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      $selectedVariants
        .off("click.openSelect")
        .on("click.openSelect", function() {
          $variantSelected.removeClass("gt_active");
          var $options = $(this).siblings(".gt_variant-select-item-options");
          if ($options.hasClass("gt_active")) {
            $options.css("top", "");
            $options.removeClass("gt_active");
            $(this).removeClass("gt_active");
            $(document).off("mousedown.outsideClickVariantSelect");
          } else {
            $variantOptions.removeClass("gt_active");
            $options.addClass("gt_active");
            $(this).addClass("gt_active");
            var optionsOuterHeight = $options.outerHeight();
            var selectInputHeight = $variantSelected.outerHeight();
            var positionOptions =
              $options.offset().top -
              $(document).scrollTop() +
              optionsOuterHeight;
            var windowHeight = $(window).outerHeight();
            if (positionOptions > windowHeight) {
              const currentTopOptions = $options.css("top");
              const newTop =
                "calc( " +
                currentTopOptions +
                " - " +
                optionsOuterHeight +
                "px" +
                " - " +
                (Number(selectInputHeight) + 10) +
                "px" +
                " )";
              $options.css("top", newTop);
            }
            //addeventclickoutsidetoclose
            const $currentTargetOptions = $(this);
            $(document)
              .off("mousedown.outsideClickVariantSelect")
              .on("mousedown.outsideClickVariantSelect", function(event) {
                if (
                  $options &&
                  $options.length &&
                  $currentTargetOptions &&
                  $currentTargetOptions.length
                ) {
                  const $optionsPure = $options[0];
                  if (
                    $optionsPure &&
                    !$optionsPure.contains(event.target) &&
                    !$currentTargetOptions[0].contains(event.target)
                  ) {
                    $options.css("top", "");
                    $options.removeClass("gt_active");
                    $currentTargetOptions.removeClass("gt_active");
                    $(document).off("mousedown.outsideClickVariantSelect");
                  }
                }
              });
          }
        });
    }

    function onClickSelectDropDown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $elementOptions = $element.find(".gt_variant-select-item-option");
      $elementOptions
        .off("click.selectItem")
        .on("click.selectItem", function() {
          $variantSelected.removeClass("gt_active");
          $variantOptions.removeClass("gt_active");
          $(this)
            .siblings(".gt_variant-select-item-option")
            .removeClass("active");
          $(this).addClass("active");
          var title = $(this).attr("data-title");
          var id = $(this).attr("data-id");
          var $variantSelectedCurrent = $(this).closest(
            ".gt_variant-select-item--checked"
          );
          var $valueVariantSelected = $variantSelectedCurrent.find(
            ".gt_variant-select-item-option--selected-text"
          );
          $valueVariantSelected.html(title);
          $valueVariantSelected.attr("data-id", id);
          //triggereventchangevalue
          window.SOLID.store.dispatch("variantSelectChangeValue", {
            target: this,
            value: id,
          });
        });
    }

    function onToggleContentSelect() {
      const $title = $element.find(".gt_variant-select-title");
      $title.off("click.toggleContent").on("click.toggleContent", function() {
        const $contentSelect = $(this).siblings(".gt_variant-select");
        if ($contentSelect.hasClass("active")) {
          $contentSelect.removeClass("active");
          $(this).removeClass("active");
        } else {
          $contentSelect.addClass("active");
          $(this).addClass("active");
        }
      });
    }

    function addEventSelect() {
      onOpenSelectDropdown();
      onClickSelectDropDown();
      onToggleContentSelect();
    }

    function getVariantItem() {
      const $variantItem = $variantItemTemp.clone();
      $variantItem.removeClass("gt_variant-select-item--template");
      return $variantItem;
    }
    /* init block script */
    animation();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      addEventSelect,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_variantSelectCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_variantSelectCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_buttonAddToCartCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_buttonAddToCartCartDrawer";
  var id = "2XaDNnPTQmaTgc1_buttonAddToCartCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var scrollIntoViewActive = 'false' == 'true';
    var animationActive = 'false' == 'true';
    var animationHoverActive = 'false' == 'true';
    var scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var mode = 'production';
    var previewSoldOut = 'false';
    var actions = '[{"control":{"attribute":"1","desc":"","id":"1","reference":"html","title":"Pick Product","type":"pickproduct","value":{"id":0,"quantity":0}},"event":"click","id":1}]';
    
    var activeButtonFixContent = "false" === "true";
    var buttonFixContent = "Buy [!quantity!] items";
    var disableListenSoldOut = "true" === "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_buttonAddToCartCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        };
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover",
          };
        }
        window.SOLID.library.animation(settings);
      }
    }

    function eventChangeTextInIframe() {
      
    }

    function eventListenSoldOut() {
      if (mode !== "production") {
        if (previewSoldOut === "false") {
          window.SOLID.library.gtBuyProductListenSoldOut({
            $element: $($element)[0],
            options: {
              isButtonAddToCard: true,
              textAddToCard: "Add",
              textSoldOut: "Sold out",
            },
            mode: "dev"
          });
        }
      } else {
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $($element)[0],
          options: {
            isButtonAddToCard: true,
            textAddToCard: "Add",
            textSoldOut: "Sold out",
          },
        });
      }
    }

    function addActionEvent() {
      // function customEvent(actions,id,key)
      if (mode === "production") {
        $($element).customEvent(
          JSON.parse(actions),
          '2XaDNnPTQmaTgc1_buttonAddToCartCartDrawer' + '_' + indexEl
        );
      }
      /*Listenifisbuttonaddtocard*/
      store.subscribe(
        "loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCartCartDrawer" + "_" + indexEl,
        function(isDisplay) {
          const $loadingEl = $($element).find(
            ".atom-button-loading-circle-loader"
          );
          const $textEl = $($element).find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCartCartDrawer", "");
              store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCartCartDrawer" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl
                .find(".atom-button-loading-check-mark")
                .css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl
                  .find(".atom-button-loading-check-mark")
                  .removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCartCartDrawer", "");
                store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCartCartDrawer" + "_" + indexEl, "");
              }, 3000);
            }
          }
        }
      );
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    if (activeButtonFixContent) {
      initFixContent();
    }
    addInteraction();
    addActionEvent();
    if (!disableListenSoldOut) {
      eventListenSoldOut();
    }
    eventChangeTextInIframe();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      eventListenSoldOut,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_buttonAddToCartCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_buttonAddToCartCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_showLessCartDrawer = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_showLessCartDrawer";
  var id = "2XaDNnPTQmaTgc1_showLessCartDrawer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_showLessCartDrawer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_showLessCartDrawer()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_showLessCartDrawer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_lessDealTextCart = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_lessDealTextCart";
  var id = "2XaDNnPTQmaTgc1_lessDealTextCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_lessDealTextCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_lessDealTextCart",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_lessDealTextCart()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_lessDealTextCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_iconLessDealTextCart = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_iconLessDealTextCart";
  var id = "2XaDNnPTQmaTgc1_iconLessDealTextCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_iconLessDealTextCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_iconLessDealTextCart()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_iconLessDealTextCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxContainerProductPage = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxContainerProductPage";
  var id = "2XaDNnPTQmaTgc1_boxContainerProductPage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxContainerProductPage",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxContainerProductPage()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxContainerProductPage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxHeadingProductPage = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxHeadingProductPage";
  var id = "2XaDNnPTQmaTgc1_boxHeadingProductPage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxHeadingProductPage",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxHeadingProductPage()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxHeadingProductPage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_buyMoreProductPage = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_buyMoreProductPage";
  var id = "2XaDNnPTQmaTgc1_buyMoreProductPage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_buyMoreProductPage",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_buyMoreProductPage",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_buyMoreProductPage()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_buyMoreProductPage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_saveMoreProductPage = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_saveMoreProductPage";
  var id = "2XaDNnPTQmaTgc1_saveMoreProductPage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_saveMoreProductPage",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_saveMoreProductPage",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_saveMoreProductPage()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_saveMoreProductPage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxDiscountsProductPage = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxDiscountsProductPage";
  var id = "2XaDNnPTQmaTgc1_boxDiscountsProductPage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxDiscountsProductPage",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxDiscountsProductPage()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxDiscountsProductPage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxDiscountItemProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxDiscountItemProductPageEven";
  var id = "2XaDNnPTQmaTgc1_boxDiscountItemProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxDiscountItemProductPageEven",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxDiscountItemProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxDiscountItemProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxDiscountProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxDiscountProductPageEven";
  var id = "2XaDNnPTQmaTgc1_boxDiscountProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxDiscountProductPageEven",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxDiscountProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxDiscountProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxQuantityValueProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxQuantityValueProductPageEven";
  var id = "2XaDNnPTQmaTgc1_boxQuantityValueProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxQuantityValueProductPageEven",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxQuantityValueProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxQuantityValueProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_quantityTextProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_quantityTextProductPageEven";
  var id = "2XaDNnPTQmaTgc1_quantityTextProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "+[!quantity!]"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_quantityTextProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_quantityTextProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_quantityTextProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_quantityTextProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxValueProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxValueProductPageEven";
  var id = "2XaDNnPTQmaTgc1_boxValueProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxValueProductPageEven",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxValueProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxValueProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_discountValueTextProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_discountValueTextProductPageEven";
  var id = "2XaDNnPTQmaTgc1_discountValueTextProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "Get [!discount!] Off"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_discountValueTextProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_discountValueTextProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_discountValueTextProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_discountValueTextProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxPriceDetailEven = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxPriceDetailEven";
  var id = "2XaDNnPTQmaTgc1_boxPriceDetailEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxPriceDetailEven",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxPriceDetailEven()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxPriceDetailEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_priceProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_priceProductPageEven";
  var id = "2XaDNnPTQmaTgc1_priceProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_priceProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_priceProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_priceProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_priceProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_comparePriceProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_comparePriceProductPageEven";
  var id = "2XaDNnPTQmaTgc1_comparePriceProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_comparePriceProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_comparePriceProductPageEven",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_comparePriceProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_comparePriceProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_variantSelectProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_variantSelectProductPageEven";
  var id = "2XaDNnPTQmaTgc1_variantSelectProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var mode = "production";
    var animationActive = "false";
    var $variantItemTemp = $element.find(".gt_variant-select-item--template");
    var $variantsPlace = $element.find(".gt_variant-select");
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (animationActive === "true") {
        var interactionScrollIntoView = `""`;
        window.SOLID.library.animation({
          elementId: id,
          $doms: $elements,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function onOpenSelectDropdown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $selectedVariants = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      $selectedVariants
        .off("click.openSelect")
        .on("click.openSelect", function() {
          $variantSelected.removeClass("gt_active");
          var $options = $(this).siblings(".gt_variant-select-item-options");
          if ($options.hasClass("gt_active")) {
            $options.css("top", "");
            $options.removeClass("gt_active");
            $(this).removeClass("gt_active");
            $(document).off("mousedown.outsideClickVariantSelect");
          } else {
            $variantOptions.removeClass("gt_active");
            $options.addClass("gt_active");
            $(this).addClass("gt_active");
            var optionsOuterHeight = $options.outerHeight();
            var selectInputHeight = $variantSelected.outerHeight();
            var positionOptions =
              $options.offset().top -
              $(document).scrollTop() +
              optionsOuterHeight;
            var windowHeight = $(window).outerHeight();
            if (positionOptions > windowHeight) {
              const currentTopOptions = $options.css("top");
              const newTop =
                "calc( " +
                currentTopOptions +
                " - " +
                optionsOuterHeight +
                "px" +
                " - " +
                (Number(selectInputHeight) + 10) +
                "px" +
                " )";
              $options.css("top", newTop);
            }
            //addeventclickoutsidetoclose
            const $currentTargetOptions = $(this);
            $(document)
              .off("mousedown.outsideClickVariantSelect")
              .on("mousedown.outsideClickVariantSelect", function(event) {
                if (
                  $options &&
                  $options.length &&
                  $currentTargetOptions &&
                  $currentTargetOptions.length
                ) {
                  const $optionsPure = $options[0];
                  if (
                    $optionsPure &&
                    !$optionsPure.contains(event.target) &&
                    !$currentTargetOptions[0].contains(event.target)
                  ) {
                    $options.css("top", "");
                    $options.removeClass("gt_active");
                    $currentTargetOptions.removeClass("gt_active");
                    $(document).off("mousedown.outsideClickVariantSelect");
                  }
                }
              });
          }
        });
    }

    function onClickSelectDropDown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $elementOptions = $element.find(".gt_variant-select-item-option");
      $elementOptions
        .off("click.selectItem")
        .on("click.selectItem", function() {
          $variantSelected.removeClass("gt_active");
          $variantOptions.removeClass("gt_active");
          $(this)
            .siblings(".gt_variant-select-item-option")
            .removeClass("active");
          $(this).addClass("active");
          var title = $(this).attr("data-title");
          var id = $(this).attr("data-id");
          var $variantSelectedCurrent = $(this).closest(
            ".gt_variant-select-item--checked"
          );
          var $valueVariantSelected = $variantSelectedCurrent.find(
            ".gt_variant-select-item-option--selected-text"
          );
          $valueVariantSelected.html(title);
          $valueVariantSelected.attr("data-id", id);
          //triggereventchangevalue
          window.SOLID.store.dispatch("variantSelectChangeValue", {
            target: this,
            value: id,
          });
        });
    }

    function onToggleContentSelect() {
      const $title = $element.find(".gt_variant-select-title");
      $title.off("click.toggleContent").on("click.toggleContent", function() {
        const $contentSelect = $(this).siblings(".gt_variant-select");
        if ($contentSelect.hasClass("active")) {
          $contentSelect.removeClass("active");
          $(this).removeClass("active");
        } else {
          $contentSelect.addClass("active");
          $(this).addClass("active");
        }
      });
    }

    function addEventSelect() {
      onOpenSelectDropdown();
      onClickSelectDropDown();
      onToggleContentSelect();
    }

    function getVariantItem() {
      const $variantItem = $variantItemTemp.clone();
      $variantItem.removeClass("gt_variant-select-item--template");
      return $variantItem;
    }
    /* init block script */
    animation();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      addEventSelect,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_variantSelectProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_variantSelectProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_buttonAddToCartProductPageEven = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_buttonAddToCartProductPageEven";
  var id = "2XaDNnPTQmaTgc1_buttonAddToCartProductPageEven";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var scrollIntoViewActive = 'false' == 'true';
    var animationActive = 'false' == 'true';
    var animationHoverActive = 'false' == 'true';
    var scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var mode = 'production';
    var previewSoldOut = 'false';
    var actions = '[{"control":{"attribute":"1","desc":"","id":"1","reference":"html","title":"Pick Product","type":"pickproduct","value":{"id":0,"quantity":0}},"event":"click","id":1}]';
    
    var activeButtonFixContent = "false" === "true";
    var buttonFixContent = "Buy [!quantity!] items";
    var disableListenSoldOut = "true" === "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_buttonAddToCartProductPageEven",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        };
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover",
          };
        }
        window.SOLID.library.animation(settings);
      }
    }

    function eventChangeTextInIframe() {
      
    }

    function eventListenSoldOut() {
      if (mode !== "production") {
        if (previewSoldOut === "false") {
          window.SOLID.library.gtBuyProductListenSoldOut({
            $element: $($element)[0],
            options: {
              isButtonAddToCard: true,
              textAddToCard: "ADD TO CART",
              textSoldOut: "Sold out",
            },
            mode: "dev"
          });
        }
      } else {
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $($element)[0],
          options: {
            isButtonAddToCard: true,
            textAddToCard: "ADD TO CART",
            textSoldOut: "Sold out",
          },
        });
      }
    }

    function addActionEvent() {
      // function customEvent(actions,id,key)
      if (mode === "production") {
        $($element).customEvent(
          JSON.parse(actions),
          '2XaDNnPTQmaTgc1_buttonAddToCartProductPageEven' + '_' + indexEl
        );
      }
      /*Listenifisbuttonaddtocard*/
      store.subscribe(
        "loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCartProductPageEven" + "_" + indexEl,
        function(isDisplay) {
          const $loadingEl = $($element).find(
            ".atom-button-loading-circle-loader"
          );
          const $textEl = $($element).find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCartProductPageEven", "");
              store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCartProductPageEven" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl
                .find(".atom-button-loading-check-mark")
                .css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl
                  .find(".atom-button-loading-check-mark")
                  .removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCartProductPageEven", "");
                store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCartProductPageEven" + "_" + indexEl, "");
              }, 3000);
            }
          }
        }
      );
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    if (activeButtonFixContent) {
      initFixContent();
    }
    addInteraction();
    addActionEvent();
    if (!disableListenSoldOut) {
      eventListenSoldOut();
    }
    eventChangeTextInIframe();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      eventListenSoldOut,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_buttonAddToCartProductPageEven()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_buttonAddToCartProductPageEven" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxDiscountItemProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxDiscountItemProductPageOdd";
  var id = "2XaDNnPTQmaTgc1_boxDiscountItemProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxDiscountItemProductPageOdd",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxDiscountItemProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxDiscountItemProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxDiscountProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxDiscountProductPageOdd";
  var id = "2XaDNnPTQmaTgc1_boxDiscountProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxDiscountProductPageOdd",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxDiscountProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxDiscountProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxQuantityValueProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxQuantityValueProductPageOdd";
  var id = "2XaDNnPTQmaTgc1_boxQuantityValueProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxQuantityValueProductPageOdd",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxQuantityValueProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxQuantityValueProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_quantityTextProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_quantityTextProductPageOdd";
  var id = "2XaDNnPTQmaTgc1_quantityTextProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "+[!quantity!]"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_quantityTextProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_quantityTextProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_quantityTextProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_quantityTextProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxValueProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxValueProductPageOdd";
  var id = "2XaDNnPTQmaTgc1_boxValueProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxValueProductPageOdd",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxValueProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxValueProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_discountValueTextProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_discountValueTextProductPageOdd";
  var id = "2XaDNnPTQmaTgc1_discountValueTextProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "true" === "true";
    const textFixedContent = "Get [!discount!] Off"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_discountValueTextProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_discountValueTextProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_discountValueTextProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_discountValueTextProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_boxPriceDetailOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_boxPriceDetailOdd";
  var id = "2XaDNnPTQmaTgc1_boxPriceDetailOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_boxPriceDetailOdd",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_boxPriceDetailOdd()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_boxPriceDetailOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_priceProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_priceProductPageOdd";
  var id = "2XaDNnPTQmaTgc1_priceProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_priceProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_priceProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_priceProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_priceProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_comparePriceProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_comparePriceProductPageOdd";
  var id = "2XaDNnPTQmaTgc1_comparePriceProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "2XaDNnPTQmaTgc1_comparePriceProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "2XaDNnPTQmaTgc1_comparePriceProductPageOdd",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_comparePriceProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_comparePriceProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_variantSelectProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_variantSelectProductPageOdd";
  var id = "2XaDNnPTQmaTgc1_variantSelectProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var mode = "production";
    var animationActive = "false";
    var $variantItemTemp = $element.find(".gt_variant-select-item--template");
    var $variantsPlace = $element.find(".gt_variant-select");
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (animationActive === "true") {
        var interactionScrollIntoView = `""`;
        window.SOLID.library.animation({
          elementId: id,
          $doms: $elements,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function onOpenSelectDropdown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $selectedVariants = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      $selectedVariants
        .off("click.openSelect")
        .on("click.openSelect", function() {
          $variantSelected.removeClass("gt_active");
          var $options = $(this).siblings(".gt_variant-select-item-options");
          if ($options.hasClass("gt_active")) {
            $options.css("top", "");
            $options.removeClass("gt_active");
            $(this).removeClass("gt_active");
            $(document).off("mousedown.outsideClickVariantSelect");
          } else {
            $variantOptions.removeClass("gt_active");
            $options.addClass("gt_active");
            $(this).addClass("gt_active");
            var optionsOuterHeight = $options.outerHeight();
            var selectInputHeight = $variantSelected.outerHeight();
            var positionOptions =
              $options.offset().top -
              $(document).scrollTop() +
              optionsOuterHeight;
            var windowHeight = $(window).outerHeight();
            if (positionOptions > windowHeight) {
              const currentTopOptions = $options.css("top");
              const newTop =
                "calc( " +
                currentTopOptions +
                " - " +
                optionsOuterHeight +
                "px" +
                " - " +
                (Number(selectInputHeight) + 10) +
                "px" +
                " )";
              $options.css("top", newTop);
            }
            //addeventclickoutsidetoclose
            const $currentTargetOptions = $(this);
            $(document)
              .off("mousedown.outsideClickVariantSelect")
              .on("mousedown.outsideClickVariantSelect", function(event) {
                if (
                  $options &&
                  $options.length &&
                  $currentTargetOptions &&
                  $currentTargetOptions.length
                ) {
                  const $optionsPure = $options[0];
                  if (
                    $optionsPure &&
                    !$optionsPure.contains(event.target) &&
                    !$currentTargetOptions[0].contains(event.target)
                  ) {
                    $options.css("top", "");
                    $options.removeClass("gt_active");
                    $currentTargetOptions.removeClass("gt_active");
                    $(document).off("mousedown.outsideClickVariantSelect");
                  }
                }
              });
          }
        });
    }

    function onClickSelectDropDown() {
      $element = $(elementClassName);
      var $variantSelected = $element.find(
        ".gt_variant-select-item-option--selected"
      );
      var $variantOptions = $element.find(".gt_variant-select-item-options");
      var $elementOptions = $element.find(".gt_variant-select-item-option");
      $elementOptions
        .off("click.selectItem")
        .on("click.selectItem", function() {
          $variantSelected.removeClass("gt_active");
          $variantOptions.removeClass("gt_active");
          $(this)
            .siblings(".gt_variant-select-item-option")
            .removeClass("active");
          $(this).addClass("active");
          var title = $(this).attr("data-title");
          var id = $(this).attr("data-id");
          var $variantSelectedCurrent = $(this).closest(
            ".gt_variant-select-item--checked"
          );
          var $valueVariantSelected = $variantSelectedCurrent.find(
            ".gt_variant-select-item-option--selected-text"
          );
          $valueVariantSelected.html(title);
          $valueVariantSelected.attr("data-id", id);
          //triggereventchangevalue
          window.SOLID.store.dispatch("variantSelectChangeValue", {
            target: this,
            value: id,
          });
        });
    }

    function onToggleContentSelect() {
      const $title = $element.find(".gt_variant-select-title");
      $title.off("click.toggleContent").on("click.toggleContent", function() {
        const $contentSelect = $(this).siblings(".gt_variant-select");
        if ($contentSelect.hasClass("active")) {
          $contentSelect.removeClass("active");
          $(this).removeClass("active");
        } else {
          $contentSelect.addClass("active");
          $(this).addClass("active");
        }
      });
    }

    function addEventSelect() {
      onOpenSelectDropdown();
      onClickSelectDropDown();
      onToggleContentSelect();
    }

    function getVariantItem() {
      const $variantItem = $variantItemTemp.clone();
      $variantItem.removeClass("gt_variant-select-item--template");
      return $variantItem;
    }
    /* init block script */
    animation();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      addEventSelect,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_variantSelectProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_variantSelectProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom2XaDNnPTQmaTgc1_buttonAddToCartProductPageOdd = function() {
          (function() {
  var elementClassName = ".gt_atom-2XaDNnPTQmaTgc1_buttonAddToCartProductPageOdd";
  var id = "2XaDNnPTQmaTgc1_buttonAddToCartProductPageOdd";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var scrollIntoViewActive = 'false' == 'true';
    var animationActive = 'false' == 'true';
    var animationHoverActive = 'false' == 'true';
    var scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var mode = 'production';
    var previewSoldOut = 'false';
    var actions = '[{"control":{"attribute":"1","desc":"","id":"1","reference":"html","title":"Pick Product","type":"pickproduct","value":{"id":0,"quantity":0}},"event":"click","id":1}]';
    
    var activeButtonFixContent = "false" === "true";
    var buttonFixContent = "Buy [!quantity!] items";
    var disableListenSoldOut = "true" === "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "2XaDNnPTQmaTgc1_buttonAddToCartProductPageOdd",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        };
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover",
          };
        }
        window.SOLID.library.animation(settings);
      }
    }

    function eventChangeTextInIframe() {
      
    }

    function eventListenSoldOut() {
      if (mode !== "production") {
        if (previewSoldOut === "false") {
          window.SOLID.library.gtBuyProductListenSoldOut({
            $element: $($element)[0],
            options: {
              isButtonAddToCard: true,
              textAddToCard: "BUY IT NOW",
              textSoldOut: "Sold out",
            },
            mode: "dev"
          });
        }
      } else {
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $($element)[0],
          options: {
            isButtonAddToCard: true,
            textAddToCard: "BUY IT NOW",
            textSoldOut: "Sold out",
          },
        });
      }
    }

    function addActionEvent() {
      // function customEvent(actions,id,key)
      if (mode === "production") {
        $($element).customEvent(
          JSON.parse(actions),
          '2XaDNnPTQmaTgc1_buttonAddToCartProductPageOdd' + '_' + indexEl
        );
      }
      /*Listenifisbuttonaddtocard*/
      store.subscribe(
        "loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCartProductPageOdd" + "_" + indexEl,
        function(isDisplay) {
          const $loadingEl = $($element).find(
            ".atom-button-loading-circle-loader"
          );
          const $textEl = $($element).find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCartProductPageOdd", "");
              store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCartProductPageOdd" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl
                .find(".atom-button-loading-check-mark")
                .css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl
                  .find(".atom-button-loading-check-mark")
                  .removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCartProductPageOdd", "");
                store.dispatch("loading-buy-now-2XaDNnPTQmaTgc1_buttonAddToCartProductPageOdd" + "_" + indexEl, "");
              }, 3000);
            }
          }
        }
      );
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    if (activeButtonFixContent) {
      initFixContent();
    }
    addInteraction();
    addActionEvent();
    if (!disableListenSoldOut) {
      eventListenSoldOut();
    }
    eventChangeTextInIframe();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      eventListenSoldOut,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom2XaDNnPTQmaTgc1_buttonAddToCartProductPageOdd()
      } catch(e) {
        console.error("Error ESAtom Id: 2XaDNnPTQmaTgc1_buttonAddToCartProductPageOdd" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESWidgetsOSQBrN09JS5KSj = function() {
          

        }
        funcESWidgetsOSQBrN09JS5KSj()
      } catch(e) {
        console.error("Error ESWidget Id: sOSQBrN09JS5KSj" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESWidgetLg49PkchGikfwVL = function() {
          (function(jQuery) {
  jQuery.gtAddonPleaseStay = function(element, options, $) {
    var defaults = {
      id: null,
      mode: null,
      entireSite: null,
      cartPage: null,
      collectionProduct: null,
      search: null
    };
    this.settings = {};
    var $element = jQuery(element);
    var _this = this;
    var $document = null;
    var _entireSite = null;
    var _cartPage = null;
    var _collectionProduct = null;
    var _search = null;
    var _typeStay;
    var _pageCurrent = null;

    var _checkTextPrimary = true;

    var _titleCache;
    var _faviconCache;
    this.init = function() {
      this.settings = jQuery.extend({}, defaults, options);
      if (_this.settings.mode == "dev") {
        $document = window.parent.document;
      } else {
        $document = window.document;
      }
      // $document = window.document;
      _titleCache = $document.title;
      _this.getFavicon();

      if (_this.settings.entireSite) {
        _entireSite = _this.settings.entireSite;
      }

      if (_this.settings.cartPage) {
        _cartPage = _this.settings.cartPage;
      }

      if (_this.settings.collectionProduct) {
        _collectionProduct = _this.settings.collectionProduct;
      }

      if (_this.settings.search) {
        _search = _this.settings.search;
      }
      _this.clearAsyncFunc();

      _pageCurrent = _this.getType(__GemSettings.template_name);
      console.log("_pageCurrent ", _pageCurrent);
      _this.checkPage();
    };

    this.getType = function(name) {
      switch (name) {
        case "search":
          _typeStay = _search;
          break;
        case "cart":
          _typeStay = _cartPage;
          break;
        case "collection":
          _typeStay = _collectionProduct;
          break;
        case "product":
          _typeStay = _collectionProduct;
          break;
        default:
          _typeStay = _entireSite;
          break;
      }

      return _typeStay;
    }

    this.checkPage = function() {
      if (_pageCurrent) {
        if (_pageCurrent.status === true) {
          _this.setAnimation();
        }else{
          if (_pageCurrent.template_name !== "index") {
            var checkPageIndex = _this.getType("index");
            if (checkPageIndex.status === true) {
              _pageCurrent = checkPageIndex;
              _this.setAnimation();
            }else{
              return false;
            }
          }
        }
      }
    }

    this.setAnimation = function() {
      if (_this.settings.mode) {
        if (_this.settings.mode === "dev") {
          _this.clearAsyncFunc();
          if (_this.settings.previewMode) {
            switch (_pageCurrent.anmation) {
              case "blinking":
                _this.typeBlinking(_pageCurrent);
                break;
              case "typed":
                _this.typeTyped(_pageCurrent);
                break;
              default:
                _this.typeNone(_pageCurrent);
                break;
            }
          }else{
            $document.title = _titleCache;
            _this.setFavicon(_faviconCache);
          }
          return false;
        }
      }
      jQuery(window).off('focus.pleaseStayFocusLg49PkchGikfwVL').on('focus.pleaseStayFocusLg49PkchGikfwVL',function() {
        $document.title = _titleCache;
        _this.setFavicon(_faviconCache);
        _this.clearAsyncFunc();
      });
      jQuery(window).off('blur.pleaseStayBlurLg49PkchGikfwVL').on('blur.pleaseStayBlurLg49PkchGikfwVL', function() {
        _this.clearAsyncFunc();
        switch (_pageCurrent.anmation) {
          case "blinking":
            _this.typeBlinking(_pageCurrent);
            break;
          case "typed":
            _this.typeTyped(_pageCurrent);
            break;
          default:
            _this.typeNone(_pageCurrent);
            break;
        }
      });
    }

    this.getFavicon = function() {
      _faviconCache = jQuery($document).find('link[rel="shortcut icon"]').attr("href");
      if (!_faviconCache) {
        _faviconCache = jQuery($document).find('link[rel="icon"]').attr("href");
      }
      if (!_faviconCache) {
        _faviconCache = jQuery($document).find('link[rel="shortcut"]').attr("href");
      }
    }

    this.setFavicon = function(src) {
      jQuery($document).find('link[rel="shortcut icon"]').attr("href", src)
      jQuery($document).find('link[rel="icon"]').attr("href", src)
      jQuery($document).find('link[rel="shortcut icon"]').attr("href", src)
    }

    this.typeBlinking = function(data) {
      window.timeOutPleaseStay = setTimeout(() => {
        window.intervalPleaseStay = setInterval(function(){
          if (_checkTextPrimary) {
            $document.title = data.primaryText;
            _checkTextPrimary = false;
          }else{
            $document.title = data.secondaryText;
            _checkTextPrimary = true;
          }
        }, 1000);
        _this.setFavicon(_pageCurrent.icon);
      }, 2000);
    }
    this.typeTyped = function(data) {
      var i = 0;
      var txt = data.primaryText;
      var speed = 1000;
      function typeWriter() {
        if (i < txt.length) {
          $document.title = txt.substring(0, i + 2);
          i += 2;
          window.timeOutPleaseStayTyped = setTimeout(typeWriter, speed);
        }else{
          i = 2;
          $document.title = txt.substring(0,2);
          window.timeOutPleaseStayTyped = setTimeout(typeWriter, speed);
        }
      }
      window.timeOutPleaseStay = setTimeout(() => {
        $document.title = "";
          typeWriter();
        _this.setFavicon(_pageCurrent.icon);
      }, 2000);
    }
    this.typeNone = function(data) {
      window.timeOutPleaseStay = setTimeout(() => {
        $document.title = data.primaryText;
        _this.setFavicon(_pageCurrent.icon);
      }, 2000);
    }

    this.clearAsyncFunc = function() {
      clearTimeout(window.timeOutPleaseStay);
      clearTimeout(window.timeOutPleaseStayTyped);
      clearInterval(window.intervalPleaseStay);
    }
    this.init();
  };
  jQuery.fn.gtAddonPleaseStay = function(options) {
    return this.each(function() {
      var plugin = new jQuery.gtAddonPleaseStay(this, options, jQuery);
      jQuery(this).data("gtaddonpleasestay", plugin);
    });
  };
})(jQuery);

var $widget = $(".gt_widget-Lg49PkchGikfwVL");
if ($widget && $widget.length) {
  $widget.gtAddonPleaseStay({
    id: "Lg49PkchGikfwVL",
    mode: "production",
    previewMode: true,
    entireSite: {
      status: true,
      primaryText: "Popular and Trending ...",
      secondaryText: "Value Shopping Made Easy!",
      anmation: "blinking",
      icon: "https://cdn.shopify.com/s/files/1/0550/5987/3838/t/2/assets/JRlHNKKWoR-bixtore-logo-transparent-300x300-png.png?v=1659860257",
      template_name: "index"
    },
    cartPage: {
      status: true,
      primaryText: "We are keeping your cart active ...",
      secondaryText: "Don&#39;t miss the great deal!",
      anmation: "blinking",
      icon: "https://d3dfaj4bukarbm.cloudfront.net/staging/images/admin/d34a0b42-44bc-4cba-9b87-3b21919270e8.png",
      template_name: "cart"
    },
    collectionProduct: {
      status: true,
      primaryText: "Keep browsing",
      secondaryText: "You will love what you find!",
      anmation: "blinking",
      icon: "https://d3dfaj4bukarbm.cloudfront.net/staging/images/admin/32cf2626-2302-418f-8eb5-677a8a51ee0c.png",
      template_name: "collectionProduct"
    },
    search: {
      status: true,
      primaryText: "We have your results...",
      secondaryText: "GemThemes Secondary",
      anmation: "blinking",
      icon: "https://d3dfaj4bukarbm.cloudfront.net/staging/images/admin/9e8eea94-aad1-4823-871f-a6c02cf2c399.png",
      template_name: "search"
    }
  });
}

        }
        funcESWidgetLg49PkchGikfwVL()
      } catch(e) {
        console.error("Error ESWidget Id: Lg49PkchGikfwVL" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
    try {
      function triggerDToStore() {
        window.SOLID = window.SOLID || {};
        var discounts = window.SOLID.discounts || [];
        if (window.store && window.store.update) {
          window.store.update("discounts", discounts)
        }
      }
      triggerDToStore()
    } catch(e) {
      console.log("=============================== START ERROR =================================")
      console.log(e)
      console.log("===============================  END ERROR  =================================")
    }
  
    })(window.esQuery || jQuery, window.esQuery || jQuery);
  
    