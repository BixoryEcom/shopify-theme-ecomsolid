
/*
  You SHOULD NOT modify source code in this page because
  It is automatically generated from EcomSolid
  Try to edit page with the live editor.
  https://ecomsolid.com
*/

(function(jQuery, $) {
  !function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.webpackNumbers=e():t.webpackNumbers=e()}(window,(function(){return function(t){var e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(n,o,function(e){return t[e]}.bind(null,o));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/",i(i.s=17)}([function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(i(1));window.SOLID=window.SOLID||{},window.SOLID.__ES_STORE_FUNC__=window.SOLID&&window.SOLID.__ES_STORE_FUNC__||{},window.SOLID.__STORE__=window.SOLID&&window.SOLID.__STORE__||{},window.SOLID.store=new o.default,window.store={get:window.SOLID.store.getState,change:window.SOLID.store.subscribe,update:window.SOLID.store.dispatch,removeChange:window.SOLID.store.unsubscribe,reset:window.SOLID.store.destroy}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(){}return t.prototype.getState=function(t){var e=t.split("@")[0];if(window.SOLID.__STORE__)return Object(window.SOLID.__STORE__)[e]},t.prototype.dispatch=function(t,e){var i=t.split("@")[0],n=t.split("@")[1]||"all";return window.SOLID.__STORE__&&(Object(window.SOLID.__STORE__)[i]=e,function(t){for(var e=0,o="all"!==n?Object(window.SOLID.__ES_STORE_FUNC__)[i]&&Object(window.SOLID.__ES_STORE_FUNC__)[i][n]||[]:Object.values(Object(window.SOLID.__ES_STORE_FUNC__)[i]||[]).flat();e<o.length;e++){(0,o[e])(t)}}(e)),this},t.prototype.subscribe=function(t,e){var i=t.split("@")[0],n=t.split("@")[1]||"all";return Object(window.SOLID.__ES_STORE_FUNC__)[i]=Object(window.SOLID.__ES_STORE_FUNC__)[i]||{},Object(window.SOLID.__ES_STORE_FUNC__)[i][n]=Object(window.SOLID.__ES_STORE_FUNC__)[i]&&Object(window.SOLID.__ES_STORE_FUNC__)[i][n]||[],Object(window.SOLID.__ES_STORE_FUNC__)[i]&&Object(window.SOLID.__ES_STORE_FUNC__)[i][n].push(e),this},t.prototype.unsubscribe=function(t,e){var i=t.split("@")[0],n=t.split("@")[1]||"all";if(!i||!Object(window.SOLID.__ES_STORE_FUNC__)[i])return this;if("all"===n&&!e)return this.destroy(i,!1);if("all"===n&&e){for(var o in Object(window.SOLID.__ES_STORE_FUNC__)[i])for(var r=(a=Object(window.SOLID.__ES_STORE_FUNC__)[i][o]).length-1;r>=0;r--){if(a[r]===e){Object(window.SOLID.__ES_STORE_FUNC__)[i][n].splice(r,1);break}}return this}if("all"!==n&&!e)return Object(window.SOLID.__ES_STORE_FUNC__)[i]&&Object(window.SOLID.__ES_STORE_FUNC__)[i][n]?(delete Object(window.SOLID.__ES_STORE_FUNC__)[i][n],this):this;if("all"!==n&&e){var a;for(r=(a=Object(window.SOLID.__ES_STORE_FUNC__)[i]&&Object(window.SOLID.__ES_STORE_FUNC__)[i][n]||[]).length-1;r>=0;r--){if(a[r]===e){Object(window.SOLID.__ES_STORE_FUNC__)[i][n].splice(r,1);break}}return this}return this},t.prototype.destroy=function(t,e){return delete Object(window.SOLID.__ES_STORE_FUNC__)[t],e||delete Object(window.SOLID.__STORE__)[t],this},t}();e.default=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=document.head,o=n.querySelectorAll("script"),r=n.querySelectorAll("link[type='text/css']"),a=void 0;function l(t){var e=t.srcString,i=t.$availableStyle,o=t.$availableScript,r=t.isArraySrc,a=t.scriptLoadStatusList,l=t.indexScript,c=t.type;-1!==e.indexOf(".js")||"js"===c?function(t,e,i,o,r){for(var a="notAvailable",l=0;l<e.length;l++){var c=e[l];if(c.src===t){a=c.classList.contains("gt_libscript-auto-load")?"availableAutoLoad":"availablePageLoad";break}}if("notAvailable"===a){var u=document.createElement("script");u.setAttribute("type","text/javascript"),u.setAttribute("src",t),u.setAttribute("class","gt_libscript gt_libscript-auto-load"),u.setAttribute("defer",""),n.addEventListener("load",(function(e){"SCRIPT"===e.target.nodeName&&e.target.src===t&&(window.SOLID.store.dispatch("loadLibrary."+t,!0),s(i,o,r))}),!0),n.appendChild(u)}else"availableAutoLoad"===a?window.SOLID.store.getState("loadLibrary."+t)?s(i,o,r):window.SOLID.store.subscribe("loadLibrary."+t,(function(t){t&&s(i,o,r)})):(window.SOLID.store.dispatch("preloadedLibrary."+t,!0),s(i,o,r))}(e,o,r,a,l):function(t,e){for(var i=!1,o=0;o<e.length;o++){if(e[o].href===t){i=!0;break}}if(!i){var r=document.createElement("link");r.setAttribute("type","text/css"),r.setAttribute("href",t),r.setAttribute("class","gt_libscript gt_libscript-auto-load"),r.setAttribute("rel","stylesheet"),n.appendChild(r)}}(e,i)}function s(t,e,i){t&&e&&null!=i&&i>=0?(e[i]=!0,function(t){return-1===t.indexOf(!1)}(e)&&a&&a()):a&&a()}e.default=function(t,e){a=e,"string"!=typeof t?Array.isArray(t)?function(t){var e=0;t.forEach((function(t){-1!==t.indexOf(".js")&&e++}));for(var i=Array.from({length:e},(function(){return!1})),n=-1,a=0;a<t.length;a++){var s=t[a];-1!==s.indexOf(".js")&&n++,l({srcString:s,$availableScript:o,$availableStyle:r,isArraySrc:!0,scriptLoadStatusList:i,indexScript:n})}}(t):t.text&&t.type&&function(t){l({srcString:t.text,$availableScript:o,$availableStyle:r,type:t.type})}(t):function(t){l({srcString:t,$availableScript:o,$availableStyle:r})}(t)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){this.$doms=t.$doms,this.elementId=t.elementId,this.animationType=t.animationType,this.mode=t.mode}return t.prototype.convertAnimationName=function(t){t||(t="none");var e="";return t.split("-").forEach((function(t){e+=String(t[0]).toUpperCase()+String(t).slice(1)})),e},t}();e.default=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t){var e=this;this.$element=t,this.type="default",this.width=1920,this.screens=[],this.delayForceLoad=null,t.getAttribute("data-type")&&(this.type=t.getAttribute("data-type")),t.getAttribute("data-sizes")&&(this.type="sizes",this.width=this.getScreenWidth(),this.screens=this.getImageOnScreens()),this.start(),window.SOLID.store.subscribe("end-lazyload",(function(){e.calcScroll()}))}return t.prototype.start=function(){var t=this;setTimeout((function(){var e;(e="IntersectionObserver",window&&window[e])?new IntersectionObserver((function(e,i){e.forEach((function(e){(e.isIntersecting||e.intersectionRatio>0)&&(i.unobserve(e.target),t.validateVisable())}))})).observe(t.$element):(t.calcScroll(),window.addEventListener("scroll",(function(){t.calcScroll()}),{once:!0}))}),0)},t.prototype.calcScroll=function(){this.elementInViewport()&&(clearTimeout(this.delayForceLoad),this.validateVisable())},t.prototype.validateVisable=function(){var t=this,e=this.$element.style.opacity||"1",i=this.$element.style.display,n=this.$element.style.visibility;parseFloat(e)>0&&"none"!=i&&"hidden"!=n?this.startLazyload():setTimeout((function(){t.startLazyload()}),1e3)},t.prototype.startLazyload=function(){var t,e,i=this.getSrcImage(),n=this.getNearestScreen(this.width,this.screens),o=this.getSizeWrapperElement();switch(this.type){case"sizes":n?this.setSrcImage(n.src):(t=this.getScreenWidth(),i=this.replaceImageToSize(i,t+"x"),this.setSrcImage(i));break;case"auto":i=this.getSrcImageByDataAttr(),this.setSrcImage(i);break;default:o.width&&o.height?(t=this.optimizeSizeImage(o.width),e=this.optimizeSizeImage(o.height),i=this.replaceImageToSize(i,t+"x"+e)):o.width?(t=this.optimizeSizeImage(o.width),i=this.replaceImageToSize(i,t+"x")):o.height?(e=this.optimizeSizeImage(o.height),i=this.replaceImageToSize(i,"x"+e)):(t=this.getScreenWidth(),t=this.optimizeSizeImage(t),i=this.replaceImageToSize(i,t+"x")),this.setSrcImage(i)}},t.prototype.addClassLoaded=function(){this.$element.classList.add("gt_lazyloaded"),this.$element.classList.remove("gt_lazyload-width"),this.$element.classList.remove("gt_lazyload-height"),this.$element.classList.remove("gt_lazyload")},t.prototype.getSrcImage=function(){if("IMG"==this.$element.tagName)return this.$element.getAttribute("src")||"";var t=this.$element.style.backgroundImage;return t=t.replace("url(","").replace(")","").replace(/"/gi,"")},t.prototype.getSrcImageByDataAttr=function(){return this.$element.getAttribute("data-src")||""},t.prototype.setSrcImage=function(t){var e=this,i=new Image;i.onload=function(){e.setSrcAndAddClass(t)},i.onerror=function(){e.setSrcAndAddClass(t)},i.src="",i.src=t},t.prototype.setSrcAndAddClass=function(t){this.addClassLoaded(),"IMG"==this.$element.tagName?this.$element.setAttribute("src",String(t)||""):this.$element.style.backgroundImage="url("+t+")"},t.prototype.getNearestScreen=function(t,e){for(var i,n=1e6,o=0;o<e.length;o++){var r=e[o];r.width>t&&r.width<n&&(n=r.width,i=r)}return i},t.prototype.optimizeSizeImage=function(t){var e=t,i=window.clientWidth<=1200||/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);return e*=this.$element.closest(".owl-carousel")||i?3:2,(e=Math.ceil(e))>5e3&&(e=5e3),e},t.prototype.elementInViewport=function(){var t=this.$element.getBoundingClientRect();return t.top>=0&&t.bottom<=window.innerHeight+50||t.top<window.innerHeight&&t.bottom>=0},t.prototype.getImageOnScreens=function(){var t=[],e=this.$element.getAttribute("data-sizes"),i=[];if(e&&""!=e){var n=e.split(",");n&&n.length&&(i=n)}if(i&&i.length)for(var o=0;o<i.length;o++)if((e=i[o])&&""!=e&&""!=(e=e.trim())){var r=e.split(" ");if(r&&2==r.length){var a=r[1].replace("w",""),l={width:Math.ceil(parseInt(a)),src:r[0]};t.push(l)}}return t},t.prototype.getScrollBarWidth=function(){var t=document.createElement("p");t.style.width="100%",t.style.height="200px";var e=document.createElement("div");e.style.position="absolute",e.style.top="0px",e.style.left="0px",e.style.visibility="hidden",e.style.width="200px",e.style.height="150px",e.style.overflow="hidden",e.appendChild(t),document.body.appendChild(e);var i=t.offsetWidth;e.style.overflow="scroll";var n=t.offsetWidth;return i==n&&(n=e.clientWidth),document.body.removeChild(e),i-n},t.prototype.getScreenWidth=function(){var t=window.innerWidth+this.getScrollBarWidth();return Math.ceil(t)},t.prototype.getSizeWrapperElement=function(){var t={width:0,height:0},e=this.$element.style.backgroundImage;if(e&&""!=e&&"none"!=e){var i=this.getParentOfElement();if(i){var n=Math.ceil(i.offsetWidth),o=Math.ceil(i.offsetHeight);n>o?t.width=n:t.height=o}else t.width=this.getScreenWidth()}else{var r=this.getParentOfElement();t.width=r?Math.ceil(r.offsetWidth):Math.ceil(this.$element.offsetWidth)}return t},t.prototype.getParentOfElement=function(){for(var t=this.$element,e=0;e<3;e++)if((t=t.parentElement)&&!t.isSameNode(document)){var i=this.$element.clientWidth,n=t.offsetWidth,o=t.style.overflow;if(n&&i&&n>0&&n>=i&&"hidden"!=o)return t}return null},t.prototype.hasImageShopify=function(t){return!(!t||""==t)&&(-1!=t.indexOf("cdn.shopify.com/s/files/")||(-1!=t.indexOf("apps.shopifycdn.com/")||-1!=t.indexOf("cdn.shopifycdn.net/s/files/")))},t.prototype.replaceImageToSize=function(t,e){if(null==e||null==e)return t;if(this.hasImageShopify(t)){var i="",n=t.split("?");n&&n.length&&n.length>=2&&(i=n[1]);var o=n[0].split("/").pop(),r=null==o?void 0:o.split("."),a=null==r?void 0:r.pop();if(a&&-1!==["jfif"].indexOf(a))return t;var l="";if(r){var s=(l=r.join(".")).split("_");if(s&&s.length>=2){var c=s.pop(),u=new RegExp(/(\d+)x(\d+)|(\d+)x|x(\d+)/,"gm");if(c&&u.test(c))""==c.replace(u,"")&&((l=l.split("_")).pop(),l=l.join("_"))}}for(var d=t.split("?")[0].split("/"),f="",v=0;v<d.length-1;v++)f+=d[v]+"/";t=e?f+l+"_"+e+"."+a:f+l+"."+a,i&&(t=t+"?"+i)}return t},t}();e.default=function(t){return new n(t)}},function(t,e,i){"use strict";var n=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(o,r){function a(t){try{s(n.next(t))}catch(t){r(t)}}function l(t){try{s(n.throw(t))}catch(t){r(t)}}function s(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,l)}s((n=n.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var i,n,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function l(r){return function(l){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;a;)try{if(i=1,n&&(o=2&r[0]?n.return:r[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,r[1])).done)return o;switch(n=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,n=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=e.call(t,a)}catch(t){r=[6,t],n=0}finally{i=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,l])}}},r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(i(6));window.Shopify=window.Shopify||{},window.Shopify.formatMoney||(window.Shopify.formatMoney=function(t,e){var i="",n=/\{\{\s*(\w+)\s*\}\}/,o=e||this.money_format;function r(t,e){return void 0===t?e:t}function a(t,e,i,n){if(e=r(e,2),i=r(i,","),n=r(n,"."),isNaN(t)||null==t)return 0;var o=(t=(t/100).toFixed(Number(e)+1).slice(0,-1)).split(".");return o[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g,"$1"+i)+(o[1]?n+o[1]:"")}switch("string"==typeof t&&(t=t.replace(".","")),o.match(n)[1]){case"amount":i=a(t,2);break;case"amount_no_decimals":i=a(t,0);break;case"amount_with_comma_separator":i=a(t,2,".",",");break;case"amount_no_decimals_with_comma_separator":i=a(t,0,".",",")}return o.replace(n,i)}),window.SOLID.store.dispatch("cart.item_count",window.__GemSettings&&window.__GemSettings["cart.item_count"]||0),window.SOLID.cart=new a.default,window.gfTheme={addItem:function(t,e,i,n){window.SOLID.cart.AddItem(t,e,n||{}).then((function(t){i(t,null)})).catch((function(t){i(null,t)}))},addManyItems:function(t,e){window.SOLID.cart.AddManyItems(t).then((function(t){e(t,null)})).catch((function(t){e(null,t)}))},addItemFromForm:function(t,e,i){var r=this,a=jQuery(t);if(a&&a.length&&!a[0].checkValidity())return a[0].reportValidity&&a[0].reportValidity(),void("function"==typeof e&&e(null,null,{invalidate:!0,responseText:'{"description":"Please fill out the inputs!"}'}));var l=new FormData,s=a.serializeArray();$.each(s,(function(t,e){l.append(e.name,e.value)}));for(var c=a.find("input[type='file']"),u=0;u<c.length;u++){var d=c[u],f=jQuery(d).attr("name"),v=d.files;if(v&&v.length&&f)for(var p=0;p<v.length;p++)l.append(f,v[p])}fetch("/cart/add.js",{method:"POST",body:l,headers:{"x-requested-with":"XMLHttpRequest"}}).then((function(t){return n(r,void 0,void 0,(function(){var e,i,n;return o(this,(function(o){switch(o.label){case 0:return t.ok?[2,t.json()]:[3,1];case 1:return e=Error.bind,n=(i=JSON).stringify,[4,t.json()];case 2:throw new(e.apply(Error,[void 0,n.apply(i,[o.sent()])]))}}))}))})).then((function(a){return n(r,void 0,void 0,(function(){var n;return o(this,(function(o){switch(o.label){case 0:return i||(null===(n=window.SOLID.store.getState("addons"))||void 0===n?void 0:n.cart_drawer)||(r=window.SOLID.store.getState("discounts")||[],l=window.SOLID.store.getState("discountsV2")||[],r.length||l.length)?[4,window.SOLID.cart.GetCart()]:[3,2];case 1:o.sent(),o.label=2;case 2:return window.SOLID.store.dispatch("addToCartSuccess",a),"function"==typeof e&&e(a,t,null),[2]}var r,l}))}))})).catch((function(t){t={responseText:t.message},"function"==typeof e&&e(null,null,t)}))},getCart:function(t){window.SOLID.cart.GetCart().then((function(e){t(e,null)})).catch((function(e){t(null,e)}))},changeCartItem:function(t,e,i){var n=window.SOLID.store.getState("cart"),o=function(t,e){for(var i={variantName:"",line:0},n=0;n<e.length;n++){var o=e[n];o.key===t&&(i.line=n+1,i.variantName=o.title)}return i}(t,n.items),r=n.item_count,a={type:"POST",url:"/cart/change.js",data:"quantity="+e+"&line="+o.line,dataType:"json",success:function(t){if("function"==typeof i)if(r===t.item_count){var e={description:"The product "+o.variantName+" is already sold out.",message:"Cart Error",status:422},n={responseText:JSON.stringify(e)};i(t,n)}else i(t,null)},error:function(t){if("function"==typeof i){var e=window.SOLID.store.getState("cart");i(e,t)}}};jQuery.ajax(a)},updateItem:function(t,e,i){var n={type:"POST",url:"/cart/change.js",data:{quantity:e,id:t},dataType:"json",success:function(t){"function"==typeof i&&i(t,null)},error:function(t){"function"==typeof i&&i(null,t)}};jQuery.ajax(n)},updateCartQuantity:function(t,e,i,r){if(r){var a=window.SOLID.store.getState("cart"),l={variantId:t,quantity:Number(e)};s={type:"POST",url:"/cart/update.js",data:function(t,e){var i=e.quantity,n={},o=t.filter((function(t){return String(t.id)===String(e.variantId)}));return t.forEach((function(t){String(t.id)===String(e.variantId)&&(o.length<=1||!t.discounts.length)&&(i+=t.quantity)})),i<0&&(i=0),n[e.variantId]=i,{updates:n}}(a.items,l),dataType:"json",success:function(t){return n(this,void 0,void 0,(function(){return o(this,(function(e){return"function"==typeof i&&i(t,null),[2]}))}))},error:function(t){"function"==typeof i&&i(null,t)}};jQuery.ajax(s)}else{var s={type:"POST",url:"/cart/update.js",data:"updates["+t+"]="+e,dataType:"json",success:function(t){"function"==typeof i&&i(t,null)},error:function(t){"function"==typeof i&&i(null,t)}};jQuery.ajax(s)}},getProduct:function(t,e,i){var n="/products/"+t+".js",o=window.location.hostname;["localhost","app.ecomsolid.com","dev.ecomsolid.com","herokuapp.com"].some((function(t){return o.match(t)}))&&(o=window.__GemSettings.domain),o&&(n="https://"+o+"/products/"+t+".js"),jQuery.getJSON(n,(function(t){"function"==typeof e&&e(t)})).fail((function(t){"function"==typeof i&&i(t)}))},updateCartNote:function(t,e){var i,n={type:"POST",url:"/cart/update.js",data:"note="+(i=t,"string"!=typeof i&&"undefined"==(i+="")&&(i=""),jQuery.trim(i)),dataType:"json",success:function(t){"function"==typeof e&&e(t)},error:function(t){"function"==typeof e&&e(null,t)}};jQuery.ajax(n)}}},function(t,e,i){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},o=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(o,r){function a(t){try{s(n.next(t))}catch(t){r(t)}}function l(t){try{s(n.throw(t))}catch(t){r(t)}}function s(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,l)}s((n=n.apply(t,e||[])).next())}))},r=this&&this.__generator||function(t,e){var i,n,o,r,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function l(r){return function(l){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;a;)try{if(i=1,n&&(o=2&r[0]?n.return:r[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,r[1])).done)return o;switch(n=0,o&&(r=[2&r[0],o.value]),r[0]){case 0:case 1:o=r;break;case 4:return a.label++,{value:r[1],done:!1};case 5:a.label++,n=r[1],r=[0];continue;case 7:r=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==r[0]&&2!==r[0])){a=0;continue}if(3===r[0]&&(!o||r[1]>o[0]&&r[1]<o[3])){a.label=r[1];break}if(6===r[0]&&a.label<o[1]){a.label=o[1],o=r;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(r);break}o[2]&&a.ops.pop(),a.trys.pop();continue}r=e.call(t,a)}catch(t){r=[6,t],n=0}finally{i=o=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,l])}}},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var l=i(7),s=i(8),c=a(i(9)),u=function(){function t(t){this.data={debug:!1,cart:{}},this.data=n(n({},this.data),t),this.gtV3Discount=new c.default,this.init(),this.event(),this.listen()}return t.prototype.init=function(){return o(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:return[4,this.GetCart()];case 1:return t.sent(),[2]}}))}))},t.prototype.event=function(){},t.prototype.listen=function(){},t.prototype.GetCart=function(){return o(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return[4,l.GET("/cart.js").catch((function(t){throw t}))];case 1:return t=e.sent(),this.data.cart=t,window.SOLID.store.dispatch("cart",this.data.cart),window.SOLID.store.dispatch("cart.item_count",this.data.cart.item_count),this.gtV3Discount.UpdateNewCurrentDiscount(),[2,this.data.cart]}}))}))},t.prototype.UpdateCart=function(t){window.SOLID.store.dispatch("cart",t),window.SOLID.store.dispatch("cart.item_count",t.item_count),this.gtV3Discount.UpdateNewCurrentDiscount()},t.prototype.AddItem=function(t,e,i){return void 0===i&&(i={}),o(this,void 0,void 0,(function(){var n,o;return r(this,(function(r){switch(r.label){case 0:return[4,s.POST("/cart/add.js",{id:t,quantity:e||1,properties:i}).catch((function(t){throw t}))];case 1:return n=r.sent(),o=n,[4,this.mergeLineItemToCart(o)];case 2:return r.sent(),[2,o]}}))}))},t.prototype.AddManyItems=function(t){return o(this,void 0,void 0,(function(){var e,i;return r(this,(function(n){switch(n.label){case 0:return[4,s.POST("/cart/add.js",t).catch((function(t){throw t}))];case 1:return e=n.sent(),i=e,[4,this.mergeLineItemToCart(i)];case 2:return n.sent(),[2,i]}}))}))},t.prototype.mergeLineItemToCart=function(t){return o(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.GetCart()];case 1:return e.sent(),window.SOLID.store.dispatch("addToCartSuccess",t),[2]}}))}))},t}();e.default=u},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GET=void 0,e.GET=function(t,e){return new Promise((function(i,n){jQuery.ajax({type:"GET",url:t,dataType:e||"json",success:function(t){i(t)},error:function(t,e,i){n(t)}})}))}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.POST=void 0,e.POST=function(t,e,i){return new Promise((function(n,o){jQuery.ajax({type:"POST",url:t,data:e,dataType:i||"json",success:function(t){n(t)},error:function(t,e,i){o(t)}})}))}},function(t,e,i){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},o=this&&this.__spreadArrays||function(){for(var t=0,e=0,i=arguments.length;e<i;e++)t+=arguments[e].length;var n=Array(t),o=0;for(e=0;e<i;e++)for(var r=arguments[e],a=0,l=r.length;a<l;a++,o++)n[o]=r[a];return n};Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t){this.data={debug:!1},this.discounts=[],this.data=n(n({},this.data),t),this.event(),this.listen()}return t.prototype.event=function(){},t.prototype.listen=function(){var t=this;window.SOLID.store.subscribe("discounts",(function(e){var i=t.formatDataToDiscounts(e),n=window.SOLID.store.getState("discountsV2"),r=t.formatDataV2ToDiscounts(n);t.discounts=o(i,r),t.UpdateNewCurrentDiscount()})),window.SOLID.store.subscribe("discountsV2",(function(e){var i=window.SOLID.store.getState("discounts"),n=t.formatDataToDiscounts(i),r=t.formatDataV2ToDiscounts(e);t.discounts=o(n,r),t.UpdateNewCurrentDiscount()}))},t.prototype.UpdateNewCurrentDiscount=function(){var t=this.getCurrentDiscount();if(t||window.SOLID.store.dispatch("discount",{price:0,title:null}),t){var e=jQuery('[name="discount"]');if(null==e?void 0:e.length)for(var i=0;i<e.length;i++){var n=jQuery(e[i]);t?n.attr("value",t.title).val(t.title):n&&n.length&&n.attr("value","").val("")}window.SOLID.store.dispatch("discount",t)}},t.prototype.formatDataV2ToDiscounts=function(t){return void 0===t&&(t=[]),t.map((function(t){switch(t.target_selection){case"all":return{type:"quantity",selector:"all",title:t.code,value:Number(t.value),value_type:t.value_type,number:t.number,start_at:t.start_at,end_at:t.end_at};case"entitled":return{type:"quantity",selector:"products",title:t.code,value:Number(t.value),value_type:t.value_type,number:t.number,product_ids:t.product_ids,start_at:t.start_at,end_at:t.end_at}}}))},t.prototype.formatDataToDiscounts=function(t){var e,i,n=[];if(null==t?void 0:t.length)for(var o=function(o){var r=t[o],a=r.data;switch(r.type){case"quantity":if(null==a?void 0:a.length)for(var l=function(t){var o=a[t];if((null==o?void 0:o.type)&&(null===(e=null==o?void 0:o.values)||void 0===e?void 0:e.length))switch(o.type){case"all":o.values.forEach((function(t){if((null==t?void 0:t.number)&&(null==t?void 0:t.value)&&(null==t?void 0:t.value_type)&&(null==t?void 0:t.code)){var e={type:"quantity",selector:"all",title:"theme"==r.eType?"ESW-"+t.code:"ESPW-"+t.code,value:t.value,value_type:t.value_type,number:t.number};n.push(e)}}));break;case"products":(null===(i=null==o?void 0:o.ids)||void 0===i?void 0:i.length)&&o.values.forEach((function(t){if((null==t?void 0:t.number)&&(null==t?void 0:t.value)&&(null==t?void 0:t.value_type)&&(null==t?void 0:t.code)){var e={type:"quantity",selector:"products",title:"theme"==r.eType?"ESW-"+t.code:"ESPW-"+t.code,value:t.value,value_type:t.value_type,product_ids:o.ids,number:t.number};n.push(e)}}))}},s=0;s<a.length;s++)l(s)}},r=0;r<t.length;r++)o(r);return n},t.prototype.getCurrentDiscount=function(){var t,e,i=[],n=window.SOLID.store.getState("cart");if(n){var o=!1;if(n.items&&n.items.length&&(o=n.items.some((function(t){return t.hasOwnProperty("selling_plan_allocation")}))),!o){for(var r=0;r<this.discounts.length;r++){var a=this.discounts[r];if(this.isActiveDiscountQuantity(a)){var l=0,s=n.items;switch(a.selector){case"all":for(var c=0;c<s.length;c++){l+=(u=s[c]).quantity}l>=a.number&&i.push(a);break;case"products":a.cartItems=[];for(c=0;c<s.length;c++){var u=s[c];-1!=(null===(t=a.product_ids)||void 0===t?void 0:t.indexOf(null==u?void 0:u.product_id))&&(l+=u.quantity,a.cartItems.push(u))}l>=a.number&&i.push(a)}}}var d,f=0;if(null==i?void 0:i.length){var v=function(t){var e=i[t];switch(e.type){case"quantity":switch(e.selector){case"all":var o=n.total_price*(-1*e.value/100);o>=f&&(f=o,d=e);break;case"products":if(e.cartItems&&e.cartItems.length){var r=e.cartItems.reduce((function(t,i){return t+i.line_price*(-1*e.value/100)}),0);r>=f&&(f=r,d=e)}}}};for(r=0;r<i.length;r++)v(r)}return d&&((e=d).price=f),e}}},t.prototype.isActiveDiscountQuantity=function(t){return"quantity"==t.type&&(!t.start_at||t.start_at&&this.isBeforeToday(t.start_at))&&(!t.end_at||t.end_at&&!this.isBeforeToday(t.end_at))},t.prototype.isBeforeToday=function(t){return!!t&&new Date(t)<new Date},t}();e.default=r},function(t,e,i){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var r=o(i(2)),a=o(i(11)),l=o(i(4)),s=i(14);window.SOLID.library=n(n({},window.SOLID.library),{loadSource:r.default,animation:a.default,gtLazyload:l.default,gtBuyProduct:s.gtBuyProduct,gtBuyProductListenSoldOut:s.gtBuyProductListenSoldOut})},function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(i(12)),r=n(i(13));e.default=function(t){switch(t.animationType){case"block":return new o.default(t);case"text":return new r.default(t);default:return new o.default(t)}}},function(t,e,i){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(i(3)),l=window.esQuery||jQuery,s=function(t){function e(e){var i=t.call(this,e)||this;return i.timeoutPreviewNormal={},i.timeoutPreviewNormalRemove={},i.timeoutRunAnimationHover={},i.timeoutPreviewHover={},i.timeoutPreviewHoverRemove={},i.timeoutRunAnimationPress={},i.timeoutPreviewPress={},i.timeoutPreviewPressRemove={},i.timeoutPreviewScrollToRemove={},i.interactionScrollIntoView=e.interactionScrollIntoView,i.interactionNormal=e.interactionNormal,i.interactionHover=e.interactionHover,i.interactionWhilePress=e.interactionWhilePress,i.resetAnimationPreviewEvent(),i.listenEvent(),i}return o(e,t),e.prototype.resetAnimationPreviewEvent=function(){var t,e,i,n,o,r,a,l;window.SOLID.store.destroy("optimize-"+this.elementId+"-"+(null===(t=this.interactionScrollIntoView)||void 0===t?void 0:t.previewAttr)),window.SOLID.store.destroy("optimize-"+this.elementId+"-"+(null===(e=this.interactionHover)||void 0===e?void 0:e.previewAttr)),window.SOLID.store.destroy("optimize-"+this.elementId+"-"+(null===(i=this.interactionWhilePress)||void 0===i?void 0:i.previewAttr)),window.SOLID.store.destroy("optimize-"+this.elementId+"-"+(null===(n=this.interactionNormal)||void 0===n?void 0:n.previewAttr)),window.SOLID.store.destroy("preview-"+this.elementId+"-"+(null===(o=this.interactionScrollIntoView)||void 0===o?void 0:o.previewAttr)),window.SOLID.store.destroy("preview-"+this.elementId+"-"+(null===(r=this.interactionHover)||void 0===r?void 0:r.previewAttr)),window.SOLID.store.destroy("preview-"+this.elementId+"-"+(null===(a=this.interactionWhilePress)||void 0===a?void 0:a.previewAttr)),window.SOLID.store.destroy("preview-"+this.elementId+"-"+(null===(l=this.interactionNormal)||void 0===l?void 0:l.previewAttr))},e.prototype.listenEvent=function(){for(var t,e,i,n,o,r,a,s,c=this,u=function(u){var f=d.$doms[u];"production"===d.mode&&(l(f).off("mouseenter.atom-"+d.elementId).on("mouseenter.atom-"+d.elementId,(function(){c.callbackHover(f,u)})),l(f).off("mouseleave.atom-"+d.elementId).on("mouseleave.atom-"+d.elementId,(function(){var t,e=null===(t=c.interactionNormal)||void 0===t?void 0:t.value;"infinite"===(null==e?void 0:e.iterationCount)?l(f).removeAttr("style"):l(f).css("animation","none")})),l(f).off("mousedown.atom-"+d.elementId).on("mousedown.atom-"+d.elementId,(function(){c.callbackPress(f,u)}))),"production"===d.mode&&(jQuery(window).off("scroll.atom-"+d.elementId+"_"+u).on("scroll.atom-"+d.elementId+"_"+u,(function(){c.handleScroll(f,u)})),d.handleScroll(f,u));var v=function(t){c.interactionScrollIntoView.value=t,c.callbackScrollIntoView(f,u)},p=function(t){c.interactionNormal.value=t;var e=1e3;t&&t.duration>0&&(e=1e3*(Number(t.duration)+Number(t.delay))),l(f).css("animation","none"),clearTimeout(c.timeoutPreviewNormal[u]),c.timeoutPreviewNormal[u]=setTimeout((function(){var t;if(null===(t=c.interactionNormal)||void 0===t?void 0:t.value){var e=c.interactionNormal.value;if("none"!==e.name){var i="gt"+c.convertAnimationName(e.name)+" "+e.duration+"s "+e.delay+"s "+e.iterationCount;l(f).css("animation",i)}}}),10),clearTimeout(c.timeoutPreviewNormalRemove[u]),c.timeoutPreviewNormalRemove[u]=setTimeout((function(){l(f).removeAttr("style")}),e)},h=function(t){c.interactionHover.value=t;var e=1e3;t&&t.duration>0&&(e=1e3*(Number(t.duration)+Number(t.delay))),l(f).css("animation","none"),clearTimeout(c.timeoutRunAnimationHover[u]),c.timeoutRunAnimationHover[u]=setTimeout((function(){c.callbackHover(f,u),clearTimeout(c.timeoutPreviewHoverRemove[u]),c.timeoutPreviewHoverRemove[u]=setTimeout((function(){var t,e=null===(t=c.interactionNormal)||void 0===t?void 0:t.value;"infinite"===(null==e?void 0:e.iterationCount)?l(f).removeAttr("style"):l(f).css("animation","none")}),e)}),10)},m=function(t){c.interactionWhilePress.value=t,l(f).css("animation","none"),clearTimeout(c.timeoutRunAnimationPress[u]),c.timeoutRunAnimationPress[u]=setTimeout((function(){c.callbackPress(f,u)}),10)};window.SOLID.store.subscribe("preview-"+d.elementId+"-"+(null===(t=d.interactionScrollIntoView)||void 0===t?void 0:t.previewAttr),v),window.SOLID.store.subscribe("preview-"+d.elementId+"-"+(null===(e=d.interactionNormal)||void 0===e?void 0:e.previewAttr),p),window.SOLID.store.subscribe("preview-"+d.elementId+"-"+(null===(i=d.interactionHover)||void 0===i?void 0:i.previewAttr),h),window.SOLID.store.subscribe("preview-"+d.elementId+"-"+(null===(n=d.interactionWhilePress)||void 0===n?void 0:n.previewAttr),m),window.SOLID.store.subscribe("optimize-"+d.elementId+"-"+(null===(o=d.interactionScrollIntoView)||void 0===o?void 0:o.previewAttr),v),window.SOLID.store.subscribe("optimize-"+d.elementId+"-"+(null===(r=d.interactionNormal)||void 0===r?void 0:r.previewAttr),p),window.SOLID.store.subscribe("optimize-"+d.elementId+"-"+(null===(a=d.interactionHover)||void 0===a?void 0:a.previewAttr),h),window.SOLID.store.subscribe("optimize-"+d.elementId+"-"+(null===(s=d.interactionWhilePress)||void 0===s?void 0:s.previewAttr),m)},d=this,f=0;f<this.$doms.length;f++)u(f)},e.prototype.handleScroll=function(t,e){Object(jQuery(document)).scrollTop()+Object(jQuery(window)).height()>=Object(l(t)).offset().top&&(this.callbackScrollIntoView(t,e),jQuery(window).off("scroll.atom-"+this.elementId+"_"+e))},e.prototype.callbackHover=function(t,e){var i,n=this;if(null===(i=this.interactionHover)||void 0===i?void 0:i.value){var o=this.interactionHover.value;if(this.checkIsSameAnimationWithOther("hover"))return l(t).css("animation","none"),clearTimeout(this.timeoutPreviewHover[e]),void(this.timeoutPreviewHover[e]=setTimeout((function(){var e;if(null===(e=n.interactionHover)||void 0===e?void 0:e.value){var i=n.interactionHover.value,o="gt"+n.convertAnimationName(i.name)+" "+i.duration+"s "+i.delay+"s "+i.iterationCount;l(t).css("animation",o)}}),10));var r="gt"+this.convertAnimationName(o.name)+" "+o.duration+"s "+o.delay+"s "+o.iterationCount;l(t).css("animation",r)}},e.prototype.callbackPress=function(t,e){var i,n=this;if(null===(i=this.interactionWhilePress)||void 0===i?void 0:i.value){var o=this.interactionWhilePress.value,r=function(){var i,o,r,a,l=1e3,s=(null===(o=null===(i=n.interactionWhilePress)||void 0===i?void 0:i.value)||void 0===o?void 0:o.duration)||0,c=(null===(a=null===(r=n.interactionWhilePress)||void 0===r?void 0:r.value)||void 0===a?void 0:a.delay)||0;s>0&&(l=1e3*(Number(s)+Number(c))),clearTimeout(n.timeoutPreviewPressRemove[e]),n.timeoutPreviewPressRemove[e]=setTimeout((function(){n.removeStyleAnimationInDom(t)}),l)};if(this.checkIsSameAnimationWithOther("press"))return l(t).css("animation","none"),clearTimeout(this.timeoutPreviewPress[e]),this.timeoutPreviewPress[e]=setTimeout((function(){var e;if(null===(e=n.interactionWhilePress)||void 0===e?void 0:e.value){var i=n.interactionWhilePress.value;if("none"!==i.name){var o="gt"+n.convertAnimationName(i.name)+" "+i.duration+"s "+i.delay+"s "+i.iterationCount;l(t).css("animation",o)}}}),10),void r();if("none"!==o.name){var a="gt"+this.convertAnimationName(o.name)+" "+o.duration+"s "+o.delay+"s "+o.iterationCount;l(t).css("animation",a),r()}}},e.prototype.callbackScrollIntoView=function(t,e){var i,n,o,r,a,s,c=this,u=function(i){var n,o=1e3;if(i&&(null===(n=c.interactionScrollIntoView)||void 0===n?void 0:n.value)){var r=c.interactionScrollIntoView.value||0;o=1e3*(Number(r.duration)+Number(r.delay))}clearTimeout(c.timeoutPreviewScrollToRemove[e]),c.timeoutPreviewScrollToRemove[e]=setTimeout((function(){c.removeStyleAnimationInDom(t,!0)}),o)};if("none"!==(null===(i=this.interactionScrollIntoView)||void 0===i?void 0:i.value)&&(null===(n=this.interactionScrollIntoView)||void 0===n?void 0:n.value)&&"string"==typeof(null===(o=this.interactionScrollIntoView)||void 0===o?void 0:o.value)){var d="gt"+this.convertAnimationName(this.interactionScrollIntoView.value)+" 1s 0s 1 both";l(t).css("animation",d),u(!1)}else if((null===(r=this.interactionScrollIntoView)||void 0===r?void 0:r.value)&&"none"!==(null===(s=null===(a=this.interactionScrollIntoView)||void 0===a?void 0:a.value)||void 0===s?void 0:s.name)){var f=this.interactionScrollIntoView.value;d="gt"+this.convertAnimationName(f.name)+" "+f.duration+"s "+f.delay+"s "+f.iterationCount+" both";l(t).css("animation",d),u(!0)}},e.prototype.checkIsSameAnimationWithOther=function(t){var e,i,n;if((null===(e=this.interactionHover)||void 0===e?void 0:e.value)&&(null===(i=this.interactionWhilePress)||void 0===i?void 0:i.value)&&(null===(n=this.interactionNormal)||void 0===n?void 0:n.value)){var o=this.interactionHover.value,r=this.interactionNormal.value,a=this.interactionWhilePress.value;if("hover"===t)return o.name===r.name||o.name===a.name;if("press"===t)return a.name===o.name||a.name===r.name;if("normal"===t)return r.name===o.name||r.name===a.name}return!1},e.prototype.removeStyleAnimationInDom=function(t,e){var i,n;"infinite"===(null===(n=null===(i=this.interactionNormal)||void 0===i?void 0:i.value)||void 0===n?void 0:n.iterationCount)||e?l(t).removeAttr("style"):l(t).css("animation","none")},e}(a.default);e.default=s},function(t,e,i){"use strict";var n,o=this&&this.__extends||(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(i(3)),l=window.esQuery||jQuery,s=function(t){function e(e){var i=t.call(this,e)||this;return i.timeoutResetAnimation={},i.interactionScrollIntoView=e.interactionScrollIntoView,i.resetAnimationPreviewEvent(),i.listenEvent(),i}return o(e,t),e.prototype.listenEvent=function(){for(var t,e,i=this,n=function(n){var r=o.$doms[n];"production"===o.mode&&(jQuery(window).off("scroll.atom"+o.elementId+n).on("scroll.atom"+o.elementId+n,(function(){i.handleScroll(r,n)})),o.handleScroll(r,n)),window.SOLID.store.subscribe("preview-"+o.elementId+"-"+(null===(t=o.interactionScrollIntoView)||void 0===t?void 0:t.previewAttr),(function(t){window.$text=l(r);var e=l(r).find("text");e&&e.length&&(window.$text=e),window.$text.textillate("stop"),!i.interactionScrollIntoView||void 0===i.interactionScrollIntoView.value&&null===i.interactionScrollIntoView.value||(i.interactionScrollIntoView.value=t),i.callbackScrollIntoView(r,n)})),window.SOLID.store.subscribe("optimize-"+o.elementId+"-"+(null===(e=o.interactionScrollIntoView)||void 0===e?void 0:e.previewAttr),(function(t){window.$text=l(r);var e=l(r).find("text");e&&e.length&&(window.$text=e),window.$text.textillate("stop"),!i.interactionScrollIntoView||void 0===i.interactionScrollIntoView.value&&null===i.interactionScrollIntoView.value||(i.interactionScrollIntoView.value=t),i.callbackScrollIntoView(r,n)}))},o=this,r=0;r<this.$doms.length;r++)n(r)},e.prototype.resetAnimationPreviewEvent=function(){var t,e;window.SOLID.store.destroy("optimize-"+this.elementId+"-"+(null===(t=this.interactionScrollIntoView)||void 0===t?void 0:t.previewAttr)),window.SOLID.store.destroy("preview-"+this.elementId+"-"+(null===(e=this.interactionScrollIntoView)||void 0===e?void 0:e.previewAttr))},e.prototype.handleScroll=function(t,e){var i;Object(jQuery(document)).scrollTop()+Object(jQuery(window)).height()>=(null===(i=Object(l(t)).offset())||void 0===i?void 0:i.top)&&(this.callbackScrollIntoView(t,e),l(window).off("scroll.atom-"+this.elementId+"_"+e))},e.prototype.callbackScrollIntoView=function(t,e){var i=this;if(this.interactionScrollIntoView&&this.interactionScrollIntoView.value&&!this.interactionScrollIntoView.value.name&&"none"!==this.interactionScrollIntoView.value){var n="gt"+this.convertAnimationName(this.interactionScrollIntoView.value)+" 1s 0s 1 both";l(t).css({animation:n,"-webkit-animation":n}),clearTimeout(i.timeoutResetAnimation[e]),i.timeoutResetAnimation[e]=setTimeout((function(){l(t).css({animation:"none","-webkit-animation":"none"})}),1e3)}else if(this.interactionScrollIntoView&&this.interactionScrollIntoView.value&&this.interactionScrollIntoView.value.name&&!window.SOLID.store.getState("is_running_letter_gt_atom-"+this.elementId+"_"+e)&&"none"!==this.interactionScrollIntoView.value.name){var o=this.interactionScrollIntoView.value;window.SOLID.store.dispatch("is_running_letter_gt_atom-"+this.elementId+"_"+e,!0);var r=l(t);if("dev"===this.mode){var a=l(t).find("text");a&&a.length&&(r=a)}r.textillate({in:{effect:"gt"+this.convertAnimationName(o.name),effectOption:{duration:o.duration,delay:o.delay,iterationCount:o.iterationCount},callback:function(){window.SOLID.store.destroy("is_running_letter_gt_atom-"+i.elementId+"_"+e)},reverse:"reverse"===o.order,shuffle:"shuffle"===o.order}})}},e}(a.default);e.default=s},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.gtBuyProductListenSoldOut=e.gtBuyProduct=void 0;var n=function(){function t(t){this.settings=t.options,this.triggerCallback=t.triggerCallback,this.$el=t.$element,this.mode="production",t.mode&&(this.mode=t.mode),t.idButton&&(this.idButton=t.idButton)}return t.prototype.getProductJson=function(){var t,e={id:0};if(this.$el){var i=this.$el.closest("[keyword='product'], [data-keyword='product']");if(i){var n=null===(t=i.querySelector(".ProductJson"))||void 0===t?void 0:t.innerHTML;try{n&&(e=JSON.parse(n))}catch(t){console.log("Error",t)}}}return e},t.prototype.addEventButton=function(){this.settings.isButtonAddToCard?this.addItemInProductForm():this.addItemFromAction()},t.prototype.addItemInProductForm=function(){var t=this,e=this.$el.closest("form");this.startButtonATCLoading(),window.gfTheme.addItemFromForm(e,(function(e,i,n){t.callbackAddItemFromProductForm(n)}),this.settings.isStayOnPage||!1)},t.prototype.callbackAddItemFromProductForm=function(t){if(t){if(this.stopButtonATCLoading(),t.invalidate)return;this.alertErrorATC(t)}else this.buttonATCSuccessLoading();this.checkOpenCartDrawer(),window.SOLID.store.dispatch(this.triggerCallback,!0)},t.prototype.checkOpenCartDrawer=function(){if(this.settings.isStayOnPage){var t=window.SOLID.store.getState("addons");(null==t?void 0:t.cart_drawer)&&"/cart"!==window.location.pathname&&window.SOLID.store.dispatch("openCartPopup","cart_drawer")}},t.prototype.addItemFromAction=function(){var t=this;if(this.settings.value||this.settings.value.variantId){var e=this.getPropertiesFromForm(),i=e.error,n=e.properties;if(!i){var o=this.settings.value.variantId,r=this.settings.value.quantity||1;this.startButtonATCLoading(),window.gfTheme.addItem(o,r,(function(e,i){t.callbackAddItemFromAction(i)}),n)}}else window.SOLID.store.dispatch(this.triggerCallback,!0)},t.prototype.callbackAddItemFromAction=function(t){t?(this.stopButtonATCLoading(),this.alertErrorATC(t)):this.buttonATCSuccessLoading(),this.checkOpenCartDrawer(),window.SOLID.store.dispatch(this.triggerCallback,!0)},t.prototype.alertErrorATC=function(t){try{var e=JSON.parse(t.responseText);e&&e.description&&alert(e.description)}catch(t){console.log(t)}},t.prototype.buttonATCSuccessLoading=function(){window.SOLID.store.dispatch("loading-buy-now-"+this.idButton,!1)},t.prototype.stopButtonATCLoading=function(){window.SOLID.store.dispatch("loading-buy-now-"+this.idButton,"stop")},t.prototype.startButtonATCLoading=function(){window.SOLID.store.dispatch("loading-buy-now-"+this.idButton,!0)},t.prototype.addListenEventChangeVariant=function(){var t=this;if(this.settings.isButtonAddToCard){var e=this.getProductJson(),i=window.SOLID.store;e&&e.id&&i.subscribe("variant"+e.id,(function(e){if(t.$el.getAttribute("data-variant-id")&&e.id&&t.$el.setAttribute("data-variant-id",String(e.id)),null==e?void 0:e.available){t.$el.classList.remove("gt_sold_out");var i=t.settings.textAddToCard||"";if("production"===t.mode)(o=t.$el.querySelector(".gt_button-content-text-main"))&&(o.innerHTML=i),t.$el.removeAttribute("disabled");else if(n=t.$el.querySelector(".gt_button-content-text"))(o=n.querySelector("text"))&&(o.setAttribute("data-attribute","textValue"),o.innerHTML=i)}else{t.$el.classList.add("gt_sold_out");var n,o;i=t.settings.textSoldOut||"";if("production"===t.mode)(o=t.$el.querySelector(".gt_button-content-text-main"))&&(o.innerHTML=i),t.$el.setAttribute("disabled","true");else if(n=t.$el.querySelector(".gt_button-content-text"))(o=n.querySelector("text"))&&(o.setAttribute("data-attribute","textValueSoldOut"),o.innerHTML=i)}}))}},t.prototype.getPropertiesFromForm=function(){var t=$(this.$el).closest("form");if(t&&t.length&&!t[0].checkValidity())return t[0].reportValidity&&t[0].reportValidity(),{error:!0,properties:{}};var e={},i=t.find("input[name^='properties[']");if(i&&i.length)for(var n=0;n<i.length;n++){var o=$(i[n]),r=o.attr("name"),a=null==r?void 0:r.match(/\[(.+)\]/);if(a&&a.length>=2&&o.val())e[a[1]]=o.val()}return{error:!1,properties:e}},t}();e.gtBuyProduct=function(t){var e=new n({options:t.options,triggerCallback:t.triggerCallback,$element:t.$element,mode:"production",idButton:t.idButton});return e.addEventButton(),e},e.gtBuyProductListenSoldOut=function(t){var e=new n({options:t.options,triggerCallback:"",$element:t.$element,mode:t.mode,idButton:""});return e.addListenEventChangeVariant(),e}},function(t,e,i){"use strict";!function(t){function e(e,i,n,o){var r=e.text().split(i);r=r.filter((function(t){return t&&"\n"!==t&&"\r\n"!==t&&"\r"!==t}));var a="";r.length&&(t(r).each((function(t,e){a+='<span class="'+n+(t+1)+'">'+e+"</span>"+o})),e.empty().append(a))}var i={init:function(){return Object(this).each((function(){e(t(this),"","char","")}))},words:function(){return Object(this).each((function(){e(t(this)," ","word"," ")}))},lines:function(){return Object(this).each((function(){var i="eefec303079ad17405c889e092e105b0";e(t(this).children("br").replaceWith(i).end(),i,"line","")}))}};t.fn.lettering=function(e){return e&&i[e]?i[e].apply(this,[].slice.call(arguments,1)):"letters"!==e&&e?(t.error("Method "+e+" does not exist on jQuery.lettering"),this):i.init.apply(this,[].slice.call(arguments,0))}}(window.esQuery||jQuery),function(t){function e(e){return/In/.test(e)||t.inArray(e,t.fn.textillate.defaults.inEffects)>=0}function i(t){return"true"!==t&&"false"!==t?t:"true"===t}function n(e){var n=e.attributes||[],o={};return n.length?(t.each(n,(function(t,e){var n=e.nodeName.replace(/delayscale/,"delayScale");/^data-in-*/.test(n)?(o.in=o.in||{},o.in[n.replace(/data-in-/,"")]=i(e.nodeValue)):/^data-*/.test(n)&&(o[n.replace(/data-/,"")]=i(e.nodeValue))})),o):o}function o(i,n,o){var r=i.length;r?(n.shuffle&&(i=function(t){for(var e=void 0,i=void 0,n=t.length;n;e=parseInt(Math.random()*n),i=t[--n],t[n]=t[e],t[e]=i);return t}(i)),n.reverse&&(i=i.toArray().reverse()),t.each(i,(function(i,a){var l=t(a);function s(){e(n.effect)&&l.css("visibility","visible"),!(r-=1)&&o&&o()}var c=n.sync?n.delay:n.delay*i*n.delayScale;l.text()?setTimeout((function(){!function(t,e,i,n){var o=1;n.iterationCount&&(o=n.iterationCount),t.css({animation:e+" "+n.duration+"s "+n.delay+"s "+o+" both",visibility:"visible","-webkit-animation":e+" "+n.duration+"s "+n.delay+"s "+o+" both"}).show(),t.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",(function(){t.removeAttr("style"),i&&i()}))}(l,n.effect,s,n.effectOption)}),c):s()}))):o&&o()}var r=function(i,r){var a=this,l=t(i);a.init=function(){a.$texts=l.find(r.selector),a.$texts.length||(a.$texts=t('<ul class="texts"><li>'+l.html()+"</li></ul>"),l.html(a.$texts)),a.$texts.hide(),a.$current=t("<span>").html(a.$texts.find(":first-child").html()).prependTo(l),e(r.in.effect)&&a.$current.css("visibility","hidden"),a.setOptions(r),a.timeoutRun=null,setTimeout((function(){a.options.autoStart&&a.start()}),a.options.initialDelay)},a.setOptions=function(t){a.options=t},a.triggerEvent=function(e){var i=t.Event(e+".tlt");return l.trigger(i,a),i},a.in=function(i,r){i=i||0;var s=a.$texts.find(":nth-child("+((i||0)+1)+")"),c=t.extend(!0,{},a.options,s.length?n(s[0]):{});s.addClass("current"),a.triggerEvent("inAnimationBegin"),l.attr("data-active",s.data("id")),a.$current.html(s.html()).lettering("words"),"char"==a.options.type&&a.$current.find('[class^="word"]').css({display:"inline-block","-webkit-transform":"translate3d(0,0,0)","-moz-transform":"translate3d(0,0,0)","-o-transform":"translate3d(0,0,0)",transform:"translate3d(0,0,0)"}).each((function(){t(this).lettering()}));var u=a.$current.find('[class^="'+a.options.type+'"]').css("display","inline-block");e(c.in.effect)&&u.css("visibility","hidden"),a.currentIndex=i,o(u,c.in,(function(){a.$current.remove();var t=a.$texts.find("li").html();l.html(t),a.triggerEvent("inAnimationEnd"),c.in.callback&&c.in.callback(),r&&r(a)}))},a.start=function(t){setTimeout((function(){a.triggerEvent("start"),function t(e){a.in(e,(function(){var i=a.$texts.children().length;e+=1,!a.options.loop&&e>=i?(a.options.callback&&a.options.callback(),a.triggerEvent("end")):(e%=i,a.timeoutRun=setTimeout((function(){a.out((function(){t(e)}))}),a.options.minDisplayTime))}))}(t||0)}),a.options.initialDelay)},a.stop=function(){clearInterval(a.timeoutRun),a.timeoutRun=null,a.$current.remove();var t=a.$texts.find("li").html();l.html(t),a.triggerEvent("inAnimationEnd"),r.in.callback&&r.in.callback()},a.init()};t.fn.textillate=function(e,i){return this.each((function(){var o,a=t(this),l=t.extend(!0,{},t.fn.textillate.defaults,n(this),"object"==typeof e&&e),s=a.data("textillate");"string"!=typeof e?(a.data("textillate",void 0),a.data("textillate",s=new r(this,l))):s&&(null===(o=s[e])||void 0===o||o.apply(s,[].concat(i)))}))},t.fn.textillate.defaults={selector:".texts",loop:!1,minDisplayTime:2e3,initialDelay:0,in:{effect:"fadeIn",delayScale:1.5,delay:50,sync:!1,reverse:!1,shuffle:!1,callback:function(){},effectOption:{duration:1,delay:0}},autoStart:!0,inEffects:[],callback:function(){},type:"char"}}(window.esQuery||jQuery)},function(t,e,i){"use strict";!function(t,e){var i=function(){function i(e,i,n){this.$el=t(e),this.options=i,this.settings={},this.manageCallback={},this.id=n}return i.prototype.filterSameEvent=function(){for(var t=0;t<this.options.length;t++){var e=this.options[t];if(!e.isFilter){this.settings[e.event]=[],this.settings[e.event].push(e.control),e.isFilter=!0;for(var i=t+1;i<this.options.length;i++){var n=this.options[i];e.event!==n.event||n.isFilter||(this.settings[e.event].push(n.control),n.isFilter=!0)}}}},i.prototype.callbackManager=function(){var i=this;this.filterSameEvent();var n=function(n){if(o.settings.hasOwnProperty(n)){var r=o.settings[n],a=void 0;o.manageCallback[n]=[];for(var l=function(l){var s=r[l],c=void 0;if(0===l)switch(s.type){case"popup":var u="callback_eventPopup_"+s.value.id+"_"+o.id;c=function(){i.$el.off(n).on(n,(function(){var t="eventPopup_"+s.value.id;window.SOLID.store.dispatch(t,s.value.action),window.SOLID.store.dispatch(u,!0)}))},a=u,o.manageCallback[n].push(c);break;case"picklink":var d="callback_picklink_"+s.value+"_"+s.id+"_"+o.id;c=function(){i.$el.off(n).on(n,(function(n){if(n.preventDefault(),n.stopPropagation(),"/checkout"===s.value){var o=window.SOLID.store.getState("discount"),r=s.value;(null==o?void 0:o.title)&&(r+="?discount="+o.title),s.newTab?window.open(r):window.location.href=r}else if("/cart"===s.value){var a=window.SOLID.store.getState("addons");(null==a?void 0:a.cart_drawer)&&!s.customButtonAddToCart?window.SOLID.store.dispatch("openCartPopup","cart_drawer"):s.newTab?window.open(i.generateURL(s.value)):window.location.href=i.generateURL(s.value)}else if(s.value.match(/^#.+/)){var l=s.value.replace("#","");if(l&&""!=l){var c=l;c=c.replace("gt","gf");var u=t("."+l+", ."+c);if(u&&u.length){var f=u.offset().top-e(window).height()/4,v=e(window).scrollTop()||0,p=.8*Math.abs(v-f);e("html, body").animate({scrollTop:f},p)}}}else s.goToProductPage?i.goToProductPage():s.newTab?window.open(i.generateURL(s.value)):window.location.href=i.generateURL(s.value);window.SOLID.store.dispatch(d,!0)}))},a=d,o.manageCallback[n].push(c);break;case"pickproduct":var f;f=s.isButtonAddToCard?"callback_pickproduct_add_to_cart_"+s.id+"_"+o.id:"callback_pickproduct_"+s.value.id+"_"+s.id+"_"+o.id,c=function(){i.$el.off(n).on(n,(function(t){if(!window.SOLID.store.getState("loading-buy-now-"+i.id)){var e=!1;if(1===r.length&&(e=!0),s.isButtonAddToCard){t.preventDefault(),t.stopPropagation();for(var n=0;n<i.$el.length;n++)window.SOLID.library.gtBuyProduct({$element:i.$el[n],options:{isButtonAddToCard:!0,isStayOnPage:e},triggerCallback:f,idButton:i.id})}else for(n=0;n<i.$el.length;n++)window.SOLID.library.gtBuyProduct({$element:i.$el[n],options:{value:s.value,isStayOnPage:e},triggerCallback:f,idButton:i.id})}}))},a=f,o.manageCallback[n].push(c)}else switch(s.type){case"popup":var v="callback_eventPopup_"+s.value.id+"_"+o.id,p=JSON.parse(JSON.stringify(a));c=function(){window.SOLID.store.subscribe(p,(function(){var t="eventPopup_"+s.value.id;window.SOLID.store.dispatch(t,s.value.action),window.SOLID.store.dispatch(v,!0)}))},a=v,o.manageCallback[n].push(c);break;case"picklink":var h="callback_picklink_"+s.value+"_"+s.id+"_"+o.id,m=JSON.parse(JSON.stringify(a));c=function(){window.SOLID.store.subscribe(m,(function(){if("/checkout"===s.value){var n=window.SOLID.store.getState("discount"),o=s.value;(null==n?void 0:n.title)&&(o+="?discount="+n.title),s.newTab?window.open(o):window.location.href=o}else if("/cart"===s.value){var r=window.SOLID.store.getState("addons");(null==r?void 0:r.cart_drawer)&&!s.customButtonAddToCart?window.SOLID.store.dispatch("openCartPopup","cart_drawer"):s.newTab?window.open(i.generateURL(s.value)):window.location.href=i.generateURL(s.value)}else if(s.value.match(/^#.+/)){var a=s.value.replace("#","");if(a&&""!=a){var l=a;l=l.replace("gt","gf");var c=t("."+a+", ."+l);if(c&&c.length){var u=c.offset().top-e(window).height()/4,d=e(window).scrollTop()||0,f=.8*Math.abs(d-u);e("html, body").animate({scrollTop:u},f)}}}else s.goToProductPage?i.goToProductPage():s.newTab?window.open(i.generateURL(s.value)):window.location.href=i.generateURL(s.value);window.SOLID.store.dispatch(h,!0)}))},a=h,o.manageCallback[n].push(c);break;case"pickproduct":var w;w=s.isButtonAddToCard?"callback_pickproduct_add_to_cart_"+s.id+"_"+o.id:"callback_pickproduct_"+s.value.id+"_"+s.id+"_"+o.id;var y=JSON.parse(JSON.stringify(a));c=function(){window.SOLID.store.subscribe(y,(function(){if(!window.SOLID.store.getState("loading-buy-now-"+i.id))if(s.isButtonAddToCard)for(var t=0;t<i.$el.length;t++)window.SOLID.library.gtBuyProduct({$element:i.$el[t],options:{isButtonAddToCard:!0},triggerCallback:w,idButton:i.id});else for(t=0;t<i.$el.length;t++)window.SOLID.library.gtBuyProduct({$element:i.$el[t],options:{value:s.value},triggerCallback:w,idButton:i.id})}))},a=w,o.manageCallback[n].push(c)}},s=0;s<r.length;s++)l(s)}},o=this;for(var r in this.settings)n(r)},i.prototype.customEvent=function(){for(var t in this.callbackManager(),this.manageCallback){if(this.manageCallback.hasOwnProperty(t))this.manageCallback[t].forEach((function(t){t()}))}},i.prototype.goToProductPage=function(){var t,e=this.$el.closest("[keyword='product'], [data-keyword='product']").find("script.ProductJson[type='application/json']");try{if(!(t=JSON.parse(e.html())))return}catch(t){return void console.log("error: ",t)}window.location.href=this.generateURL("/products/"+t.handle)},i.prototype.generateURL=function(t){var e,i;return!t||(null==t?void 0:t.includes("/checkout"))||this.isValidHttpUrl(t)?t:((null==t?void 0:t.includes("mailto:"))||(null==t?void 0:t.includes("tel:"))?"":(null===(i=null===(e=window.Shopify)||void 0===e?void 0:e.routes)||void 0===i?void 0:i.root)||"/")+t.replace(/^\/(.+)/,"$1")},i.prototype.isValidHttpUrl=function(t){var e;try{e=new URL(t)}catch(t){return!1}return"http:"===e.protocol||"https:"===e.protocol},i}();t.fn.customEvent=function(e,n){return this.each((function(){if(void 0===t(this).data("customEvent")){var o=new i(this,e,n).customEvent();t(this).data("customEvent",o)}}))}}(window.esQuery||jQuery,window.esQuery||jQuery)},function(t,e,i){"use strict";var n;Object.defineProperty(e,"__esModule",{value:!0}),i(0),i(5),i(10),i(15),i(16),n=function(t){var e,i=this;this.onScroll=function(){var t;window.addEventListener("scroll",i.checkVisible),null===(t=null===document||void 0===document?void 0:document.querySelector("body"))||void 0===t||t.addEventListener("scroll",i.checkVisible)},this.checkVisible=function(){var t;if((e=document.querySelectorAll(".gt_animatable"))&&e.length)for(var n=0;n<e.length;n++){var o=e[n];i.isScrolledIntoView(o)&&(o.classList.add("gt_animated"),o.classList.remove("gt_animatable"))}else window.removeEventListener("scroll",i.checkVisible),null===(t=null===document||void 0===document?void 0:document.querySelector("body"))||void 0===t||t.removeEventListener("scroll",i.checkVisible)},this.isScrolledIntoView=function(t){var e=t.getBoundingClientRect();return e.top>=0&&e.bottom<=window.innerHeight+50||e.top<window.innerHeight&&e.bottom>=0},(e=document.querySelectorAll(".gt_animatable"))&&e.length&&(i.checkVisible(),i.onScroll())},window.SOLID.SectionAnimation=function(t){return new n(t)},new window.SOLID.SectionAnimation}])}));
      try {
        const funcLib19 = function() {
          (function(jQuery) {
    jQuery.gtCountDownTime = function(element, options, $) {
        var defaults = {
            classDays: null,
            classHours: null,
            classMinute: null,
            classSeconds: null,
            minute: null,
            reset: true,
            html: null,
            classAppend: null
        };
        this.settings = {};

        var $element = jQuery(element);
        var _this = this;
        var _key;
        var _endTime;
        var _loop;
        var _dataDate;
        var _totalTime;
        var _html;

        this.init = function() {
            this.settings = jQuery.extend({}, defaults, options);
            if (_this.settings.html != null) {
                _html = jQuery(_this.settings.html)
                _key = _html.attr('class');
                if (_this.settings.classAppend != null) {
                    $element.find(_this.settings.classAppend).append(_html)
                }
            }
            _this.calcTime();
        }

        this.calcTime = function() {
            let currentDate = Date.now();

            var timeCurrent = new Date();
            timeCurrent = (Date.parse(timeCurrent) / 1000);
            var dataDate = _this.settings.minute * 60;

            _endTime = new Date(currentDate + (dataDate * 1000))
            _endTime = (Date.parse(_endTime) / 1000);

            if (_this.getCookie(_key + 'futureDate') === null) {
            	if (_this.settings.mode == "production") {
            		_this.setCookie(_key + 'futureDate', _endTime);
            	}
            }

            _this.loop();
        }

        this.loop = function() {
            _loop = setInterval(function() {
                var now = new Date(Date.now());
                now = (Date.parse(now) / 1000);

                var timeLeft = 0;

                if (_this.getCookie(_key + 'futureDate') != null) {
                	if (_this.settings.mode == "production") {
                		timeLeft = Number(_this.getCookie(_key + 'futureDate')) - now;
                	}else{
                		timeLeft = _endTime - now;
                	}
                } else {
                    timeLeft = _endTime - now;
                }

                if (timeLeft > 0) {

                    var days = Math.floor(timeLeft / 86400);
                    var hours = Math.floor((timeLeft - (days * 86400)) / 3600);
                    var minutes = Math.floor((timeLeft - (days * 86400) - (hours * 3600)) / 60);
                    var seconds = Math.floor((timeLeft - (days * 86400) - (hours * 3600) - (minutes * 60)));

                    if (_this.settings.classDays == null) {
                        hours = hours + days * 24;
                    }

                    if (_this.settings.classHours == null) {
                        minutes = minutes + hours * 60;
                    }

                    if (_this.settings.classMinute == null) {
                        seconds = seconds + minutes * 60
                    }

                    if (hours < "10") {
                        hours = "0" + hours;
                    }

                    if (minutes < "10") {
                        minutes = "0" + minutes;
                    }

                    if (seconds < "10") {
                        seconds = "0" + seconds;
                    }

                    if (_this.settings.classDays != null) {
                        _html.find(_this.settings.classDays).html(days);
                    }

                    if (_this.settings.classHours != null) {
                        _html.find(_this.settings.classHours).html(hours);
                    }

                    if (_this.settings.classMinute != null) {
                        _html.find(_this.settings.classMinute).html(minutes);
                    }

                    if (_this.settings.classSeconds != null) {
                        _html.find(_this.settings.classSeconds).html(seconds);
                    }
                } else {
                    _html.find(_this.settings.classDays).html(0);
                    _html.find(_this.settings.classHours).html(0);
                    _html.find(_this.settings.classMinute).html(0);
                    _html.find(_this.settings.classSeconds).html(0);
                }
                
                if (timeLeft <= 0) {
                    if (_this.settings.reset == true) {
                        var dateReset = new Date(Date.now() + (_this.settings.minute * 60));
                        _endTime = (Date.parse(dateReset) / 1000);
                         _this.setCookie(_key + 'futureDate', _endTime);
                    } else {
                        _html.css({ 'display': 'none' })
                    }
                }
            }, 500);
        }

        this.setCookie = function(name, value, days) {
            var expires = "";
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/";
        }

        this.getCookie = function(name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        this.deleteCookie = function(name) {
            var d = new Date(); //Create an date object
            d.setTime(d.getTime() - (1000 * 60 * 60 * 24)); //Set the time to the past. 1000 milliseonds = 1 second
            var expires = "expires=" + d.toGMTString(); //Compose the expirartion date
            window.document.cookie = name + "=" + "; " + expires; //Set the cookie with name and the expiration date
        }
        this.init();
    }

    jQuery.fn.gtCountDownTime = function(options) {
        return this.each(function() {
            var plugin = new jQuery.gtCountDownTime(this, options, jQuery);
            jQuery(this).data('gtcountdowntime', plugin)
        });
    }
})(jQuery);
        }
        funcLib19();
      } catch(e) {
        console.error("Error lib id: 19" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib9 = function() {
          "use strict";

/* gtProductSwatches */
(function (jQuery) {
  var gtProductSwatches = function (element, options) {
    var defaults = {
      classCurrentValue: null,
      classItem: null,
      classInputIdHidden: null,
      classBtnSelect: null,
      classCurrentStatus: null,
    };

    this.settings = {};
    var $element = jQuery(element);
    var _this = this;
    var _productJson;

    this.init = function () {
      this.settings = jQuery.extend({}, defaults, options);
      var productJson = $element.closest("[keyword='product'], [data-keyword='product']").find(".ProductJson").text();

      try {
        if (productJson) {
          _productJson = JSON.parse(productJson);
        }
      } catch (e) {
        console.log(e);
      }

      _this.setInitVariant();
      _this.event();
      _this.listen();
    };

    this.setInitVariant = function () {
      if (_productJson) {
        var storeVariant = window.SOLID.store.getState("variant" + _productJson.id);

        if (storeVariant && storeVariant.variant_init) {
          window.store.update("variant" + _productJson.id, storeVariant);
          return;
        }

        var $productJson = $element.closest("[keyword='product'], [data-keyword='product']").find(".ProductJson");

        if ($productJson && $productJson.length) {
          var variantID = parseInt($productJson.attr("data-variant"));

          for (var i = 0; i < _productJson.variants.length; i++) {
            var currentVariant = _productJson.variants[i];

            if (currentVariant.id == variantID) {
              try {
                var newVariant = JSON.parse(JSON.stringify(currentVariant));

                // eslint-disable-next-line camelcase
                newVariant.variant_init = true;
                window.store.update("variant" + _productJson.id, newVariant);
              } catch (e) {
                console.log(e);
              }
              break;
            }
          }
        }
      }
    };

    this.event = function () {
      if (_productJson) {
        try {
          var variants = _productJson.variants;
          var $select = $element.find(_this.settings.classBtnSelect);

          $select.off("click.select").on("click.select", function () {
            var $el = jQuery(this);

            if (!$el.hasClass("gt_soldout")) {
              var name = $el.attr("data-name");
              // Update active
              var $selector = $element.find(_this.settings.classBtnSelect + '[data-name="' + name + '"]');

              if ($selector && $selector.length) {
                $selector.removeClass("gf_active");
                $selector.removeClass("gt_active");
              }
              $el.addClass("gf_active");
              $el.addClass("gt_active");
              var $actives = $element.find(_this.settings.classBtnSelect + ".gf_active," + _this.settings.classBtnSelect + ".gt_active");
              var values = [];
              var i;

              if ($actives && $actives.length) {
                for (i = 0; i < $actives.length; i++) {
                  var activeValue = jQuery($actives[i]).attr("data-value");

                  if (activeValue) {
                    values.push(activeValue);
                  }
                }
              }
              var currentVariant = {};

              if (values && values.length) {
                for (i = 0; i < variants.length; i++) {
                  var variant = variants[i];
                  var options = variant.options; // => []
                  // console.log(options, " vs ", values)

                  if (_this.compare(values, options)) {
                    currentVariant = variant;
                    break;
                  }
                }
              }
              // console.log("variants: ", variants);
              // console.log("$actives: ", $actives);
              // console.log("values: ", values);
              // console.log("currentVariant: ", currentVariant);
              if (!jQuery.isEmptyObject(currentVariant)) {
                window.store.update("variant" + _productJson.id, currentVariant);
              } else {
                // Sản phẩm không được định nghĩa
                window.store.update("variant" + _productJson.id, {
                  id: 0,
                  available: false,
                });
              }
            }
          });
        } catch (e) {
          console.log(e);
        }
      }
    };
    this.listen = function () {
      var store = window.store;

      if (_productJson) {
        var options = _productJson.options;

        store.change("variant" + _productJson.id, function (variant) {
          if (variant && variant.variant_init) {
            return;
          }
          var $product = $element.closest("[keyword='product'], [data-keyword='product']");
          var $currentStatus = $product.find(_this.settings.classCurrentStatus);

          if ($currentStatus && $currentStatus.length) {
            if (!variant.available) {
              $currentStatus.show();
              var labelSoldOut = $currentStatus.attr("data-sold-out") || "Sold Out";

              $currentStatus.addClass(_this.settings.classCurrentStatus.replace(".", "") + "--inner");
              $currentStatus.html(labelSoldOut);
            } else {
              $currentStatus.addClass(_this.settings.classCurrentStatus.replace(".", "") + "--inner");
              $currentStatus.hide();
            }
          }

          if (variant.options && variant.options.length) {
            for (var i = 0; i < variant.options.length; i++) {
              var option = variant["option" + (i + 1)];

              if (option) {
                var name;

                if (options[i]) {
                  name = options[i];
                }
                if (!name || jQuery.isPlainObject(name)) {
                  name = options[i].name;
                }
                var $item = $element.find(_this.settings.classItem + '[data-name="' + name + '"]');

                if ($item && $item.length) {
                  if (_this.settings.classCurrentValue) {
                    var $currentValue = $item.find(_this.settings.classCurrentValue);

                    if ($currentValue && $currentValue.length) {
                      $currentValue.html(option);
                    }
                  }
                  var $selectActive = $item.find(_this.settings.classBtnSelect + '[data-value="' + option.replace(/"/g, "'") + '"]');
                  var $select = $item.find(_this.settings.classBtnSelect);

                  if ($select && $select.length && $selectActive && $selectActive.length) {
                    $select.removeClass("gf_active");
                    $select.removeClass("gt_active");
                    $selectActive.addClass("gf_active");
                    $selectActive.addClass("gt_active");
                  }
                }
              }
            }
          }
          if (!jQuery.isEmptyObject(variant)) {
            if ($product && $product.length) {
              var $input = $product.find(_this.settings.classInputIdHidden);

              if ($input && $input.length) {
                $input.attr("value", variant.id).val(variant.id);
                var currentURL = window.location.href;
                var variantURL = _this.updateUrlParameter(currentURL, "variant", variant.id);

                window.history.replaceState({}, "", variantURL);
              }
            }
          }
        });
      }
    };

    this.compare = function (array, array2) {
      array.sort();
      array2.sort();
      for (var i = 0; i < array.length; i++) {
        for (var j = 0; j < array2.length; j++) {
          var val1 = array[j];
          var val2 = array2[j];

          val1 = val1.replace(/"/gm, "'");
          val2 = val2.replace(/"/gm, "'");
          if (val1 != val2) {
            return false;
          }
        }
      }
      return true;
    };

    this.updateUrlParameter = function (url, key, value) {
      var parser = document.createElement("a");

      parser.href = url;
      var newUrl = parser.protocol + "//" + parser.host + parser.pathname;
      // has parameters ?

      if (parser.search && parser.search.indexOf("?") !== -1) {
        // parameter already exists
        if (parser.search.indexOf(key + "=") !== -1) {
          // paramters to array
          var params = parser.search.replace("?", "");

          params = params.split("&");
          params.forEach(function (param, i) {
            if (param.indexOf(key + "=") !== -1) {
              if (value !== null) { params[i] = key + "=" + value; } else { delete params[i]; }
            }
          });
          if (params.length > 0) { newUrl += "?" + params.join("&"); }
        } else if (value !== null) {
          newUrl += parser.search + "&" + key + "=" + value;
        } else {
          newUrl += parser.search;
        } // skip the value (remove)
      } else if (value !== null) {
        newUrl += "?" + key + "=" + value;
      } // no parameters, create it
      newUrl += parser.hash;
      return newUrl;
    };
    this.init();
  };

  jQuery.fn.gtProductSwatches = function (options) {
    return this.each(function () {
      var plugin = new gtProductSwatches(this, options, jQuery);

      jQuery(this).data("gtproductswatches", plugin);
    });
  };
})(jQuery);

        }
        funcLib9();
      } catch(e) {
        console.error("Error lib id: 9" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib69 = function() {
          var __spreadArrays = (this && this.__spreadArrays) || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
};
/* gtVariantsStyle */
(function (jQuery) {
  /**
   * GtVariantsStyle
   * 1, Tùy chọn variant title color thì merge array colors custom vào variants.
   * 2, Tùy chọn variant title image thì merge array images custom vào variants.
   * 3, Cho phép setting hiển thị có tooltips không
   * 4, Cho phép chọn một số style tooltips
   */
  var GtVariantsStyle = /** @class */ (function () {
      /**
       * constructor
       * @param element element
       * @param options options
       */
      function GtVariantsStyle(element, options) {
          this.settings = {
              colors: [],
              colorVariantTitle: "",
              colorVariantCircle: false,
              colorVariantRadius: "3px",
              colorVariantSize: "",
              images: [],
              imageVariantTitle: "",
              imageVariantCircle: false,
              imageVariantRadius: "3px",
              imageVariantSize: "",
              variantTooltip: false,
              hideSoldOutVariants: false,
              variantSaleTag: false,
              variantSaleTagTitle: "",
              variantSaleTagFormat: "[!Value!]% off",
              variantSaleTagTextColor: "#000",
              variantSaleTagBackgroundColor: "#FDAC2B",
              variantSaleTagBorderRadius: "5px",
          };
          this.variants = [];
          this.$el = jQuery(element);
          this.settings = jQuery.extend({}, this.settings, options);
          this.variants = this.getVariants();
          this.resetFeatures();
          this.supportVariantColor();
          this.supportVariantImage();
          this.supportHideSoldOutVariants();
          this.supportVariantSaleTag();
          this.listenChangeVariantUpdateSaleTag();
      }
      /**
       * Destroy
       */
      GtVariantsStyle.prototype.Destroy = function () {
          this.resetFeatures();
      };
      /**
       * resetFeatures
       */
      GtVariantsStyle.prototype.resetFeatures = function () {
          // Code run in editor
          var $selectors = this.$el.find(".gt_swatches--select[data-name][data-value]");
          if ($selectors === null || $selectors === void 0 ? void 0 : $selectors.length) {
              for (var i = 0; i < $selectors.length; i++) {
                  var $selector = jQuery($selectors[i]);
                  $selector.attr("style", "");
                  var $childs = $selector.find("*");
                  if ($childs === null || $childs === void 0 ? void 0 : $childs.length) {
                      $childs.each(function () {
                          var _a;
                          var $child = jQuery(this);
                          if (!((_a = $child.closest(".gt_variant__tooltip, .gt_swatches--select--soldout")) === null || _a === void 0 ? void 0 : _a.length)) {
                              $child.css({
                                  "visibility": "",
                              });
                          }
                      });
                  }
                  $selector.find(".gt_variant__tooltip, .gt_variant-style-sale-tag").remove();
              }
          }
          // Run in editor
          var $variantsSoldOut = this.$el.find(".gt_swatches--select.gt_soldout");
          if ($variantsSoldOut && $variantsSoldOut.length) {
              $variantsSoldOut.removeClass("gt_soldout");
              $variantsSoldOut.css({
                  "position": "",
                  "user-select": "",
                  "cursor": "",
                  "pointer-events": "",
              });
              $variantsSoldOut.find(".gt_swatches--select--soldout").remove();
          }
      };
      /**
       * supportHideSoldOutVariants
       */
      GtVariantsStyle.prototype.supportHideSoldOutVariants = function () {
          var _a;
          if (this.settings.hideSoldOutVariants) {
              var $products = this.$el.find("[keyword=product], [data-keyword=product]");
              if ($products === null || $products === void 0 ? void 0 : $products.length) {
                  var _loop_1 = function (i) {
                      var $product = jQuery($products[i]);
                      if ($product === null || $product === void 0 ? void 0 : $product.length) {
                          var productJsonObject = void 0;
                          var productJson = $product.find(".ProductJson").text();
                          try {
                              productJsonObject = JSON.parse(productJson);
                          }
                          catch (error) {
                              console.log("error ", error);
                          }
                          var availableVariants_1 = [];
                          if ((_a = productJsonObject === null || productJsonObject === void 0 ? void 0 : productJsonObject.variants) === null || _a === void 0 ? void 0 : _a.length) {
                              for (var j = 0; j < productJsonObject.variants.length; j++) {
                                  var variant = productJsonObject.variants[j];
                                  if (variant.available != undefined && variant.available) {
                                      availableVariants_1.push(variant);
                                  }
                                  else if (variant.inventory_quantity > 0 || variant.inventory_management != "shopify") {
                                      // available
                                      availableVariants_1.push(variant);
                                  }
                              }
                          }
                          var $swatches = $product.find(".gt_product-swatches");
                          $swatches.find(".gt_product-swatches--item").each(function (index) {
                              var $lineVariants = jQuery(this);
                              var $variants = $lineVariants.find(".gt_swatches--select").not("li");
                              $variants.each(function () {
                                  var $variant = jQuery(this);
                                  var value = $variant.attr("data-value");
                                  value = value.replace(/'/gm, "\"");
                                  if (availableVariants_1 === null || availableVariants_1 === void 0 ? void 0 : availableVariants_1.length) {
                                      var found = false;
                                      for (var j = 0; j < availableVariants_1.length; j++) {
                                          var varaint = availableVariants_1[j];
                                          if ((varaint === null || varaint === void 0 ? void 0 : varaint.options[index]) == value) {
                                              found = true;
                                              break;
                                          }
                                      }
                                      if (!found) {
                                          $variant.addClass("gt_soldout");
                                      }
                                  }
                              });
                          });
                          var $variantsSoldOut = $swatches.find(".gt_swatches--select.gt_soldout");
                          if ($variantsSoldOut === null || $variantsSoldOut === void 0 ? void 0 : $variantsSoldOut.length) {
                              $variantsSoldOut.each(function () {
                                  var $variantSoldOut = jQuery(this);
                                  $variantSoldOut.find(".gt_swatches--select--soldout").remove();
                                  $variantSoldOut.css({
                                      "position": "relative",
                                      "user-select": "none",
                                      "cursor": "default",
                                      "pointer-events": "none"
                                  });
                                  var bordeRadius = $variantSoldOut.css("border-radius");
                                  var _soldOutColor = "#000";
                                  var sizeStroke = 1;
                                  $variantSoldOut.append("<svg height=\"100\" width=\"100\" preserveAspectRatio=\"none\" class=\"gt_swatches--select--soldout\"><line x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\" style=\"stroke:" + _soldOutColor + ";stroke-width:" + sizeStroke + "\" /><line x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\" style=\"stroke:" + _soldOutColor + ";stroke-width:" + sizeStroke + "\" /></svg>");
                                  $variantSoldOut.find(".gt_swatches--select--soldout").css({
                                      "position": "absolute",
                                      "width": "100%",
                                      "height": "100%",
                                      "top": "0",
                                      "left": "0",
                                      "border-radius": bordeRadius,
                                  });
                              });
                          }
                      }
                  };
                  for (var i = 0; i < $products.length; i++) {
                      _loop_1(i);
                  }
              }
          }
          return;
      };
      /**
       * supportVariantColor
       */
      GtVariantsStyle.prototype.supportVariantColor = function () {
          // support variant color
          if (this.settings.colorVariantTitle) {
              var $selectors = this.$el.find(".gt_swatches--select[data-name=\"" + this.settings.colorVariantTitle + "\"][data-value]").not("li");
              if ($selectors === null || $selectors === void 0 ? void 0 : $selectors.length) {
                  for (var i = 0; i < $selectors.length; i++) {
                      var $selector = jQuery($selectors[i]);
                      var value = $selector.attr("data-value");
                      value = value.replace(/'/gm, "\"");
                      if (value) {
                          value = value.toLowerCase();
                          for (var j = 0; j < this.variants.length; j++) {
                              var varaint = this.variants[j];
                              var variantTitle = varaint.title;
                              var languages = varaint.languages;
                              if (variantTitle) {
                                  variantTitle = variantTitle.toLowerCase();
                                  if (value == variantTitle) {
                                      this.setColorToVariant($selector, varaint);
                                  }
                                  else if (languages === null || languages === void 0 ? void 0 : languages.length) {
                                      for (var k = 0; k < languages.length; k++) {
                                          var language = languages[k].toLowerCase();
                                          if (language == value.toLowerCase()) {
                                              this.setColorToVariant($selector, varaint);
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
      };
      /**
       * setColorToVariant
       * @param $selector dom select variant
       * @param variant variant same default or custom
       */
      GtVariantsStyle.prototype.setColorToVariant = function ($selector, variant) {
          var color = variant.color;
          $selector.css({
              "background-color": color,
              "user-select": "none",
              "color": color,
              "position": "relative",
          });
          if (!this.settings.colorVariantSize) {
              $selector.css({
                  "min-width": "",
                  "width": "",
                  "min-height": "",
                  "height": "",
              });
              setTimeout(function () {
                  var height = $selector.outerHeight();
                  $selector.css({
                      "min-width": height + "px",
                      "width": height + "px",
                      "min-height": height + "px",
                      "height": height + "px",
                  });
              }, 0);
          }
          else {
              $selector.css({
                  "min-width": this.settings.colorVariantSize,
                  "width": this.settings.colorVariantSize,
                  "min-height": this.settings.colorVariantSize,
                  "height": this.settings.colorVariantSize,
              });
          }
          var $childs = $selector.find("*");
          $childs.each(function () {
              var _a;
              var $child = jQuery(this);
              if (!((_a = $child.closest(".gt_variant__tooltip, .gt_swatches--select--soldout")) === null || _a === void 0 ? void 0 : _a.length)) {
                  $child.css({
                      "visibility": "hidden",
                  });
              }
          });
          if (this.settings.colorVariantCircle) {
              $selector.css({
                  "border-radius": "100%",
              });
          }
          else {
              $selector.css({
                  "border-radius": this.settings.colorVariantRadius,
              });
          }
          this.supportTooltip($selector);
      };
      /**
       * supportVariantColor
       */
      GtVariantsStyle.prototype.supportVariantImage = function () {
          var _a, _b;
          // support variant color
          if (this.settings.imageVariantTitle) {
              var $selectors = this.$el.find(".gt_swatches--select[data-name=\"" + this.settings.imageVariantTitle + "\"][data-value]").not("li");
              if ($selectors === null || $selectors === void 0 ? void 0 : $selectors.length) {
                  for (var i = 0; i < $selectors.length; i++) {
                      var $selector = jQuery($selectors[i]);
                      var value = $selector.attr("data-value");
                      value = value.replace(/'/gm, "\"");
                      if (value) {
                          var imageUrl = void 0;
                          var $product = $selector.closest("[keyword=product], [data-keyword=product]");
                          if ($product === null || $product === void 0 ? void 0 : $product.length) {
                              var productJson = $product.find(".ProductJson").text();
                              try {
                                  var productJsonObject = JSON.parse(productJson);
                                  if (((_a = productJsonObject.variants) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                                      for (var i_1 = 0; i_1 < productJsonObject.variants.length; i_1++) {
                                          var variantProduct = productJsonObject.variants[i_1];
                                          if (variantProduct.options.includes(value) && ((_b = variantProduct.featured_image) === null || _b === void 0 ? void 0 : _b.src)) {
                                              imageUrl = variantProduct.featured_image.src;
                                              break;
                                          }
                                      }
                                  }
                              }
                              catch (error) {
                                  console.log("error ", error);
                              }
                          }
                          value = value.toLowerCase();
                          var found = false;
                          for (var j = 0; j < this.variants.length; j++) {
                              var variantTitle = this.variants[j].title;
                              var languages = this.variants[j].languages;
                              var image = this.variants[j].image;
                              if (variantTitle) {
                                  variantTitle = variantTitle.toLowerCase();
                                  if (value == variantTitle && image) {
                                      found = true;
                                      this.setImageToVariant($selector, image);
                                  }
                                  else if ((languages === null || languages === void 0 ? void 0 : languages.length) && image) {
                                      for (var k = 0; k < languages.length; k++) {
                                          var language = languages[k].toLowerCase();
                                          if (language == value.toLowerCase()) {
                                              found = true;
                                              this.setImageToVariant($selector, image);
                                          }
                                      }
                                  }
                              }
                          }
                          if (!found) {
                              this.setImageToVariant($selector, imageUrl);
                          }
                      }
                  }
              }
          }
      };
      /**
       * setImageToVariant
       * @param $selector dom select variant
       * @param imageUrl image url variant
       */
      GtVariantsStyle.prototype.setImageToVariant = function ($selector, imageUrl) {
          if (imageUrl) {
              $selector.css({
                  "position": "relative",
                  "user-select": "none",
                  "background-image": "url(\"" + imageUrl + "\")",
                  "background-repeat": "no-repeat",
                  "background-size": "contain",
                  "background-position": "center",
                  "background-color": "#fff",
              });
              var $childs = $selector.find("*");
              if ($childs === null || $childs === void 0 ? void 0 : $childs.length) {
                  $childs.each(function () {
                      var _a;
                      var $child = jQuery(this);
                      if (!((_a = $child.closest(".gt_variant__tooltip, .gt_swatches--select--soldout")) === null || _a === void 0 ? void 0 : _a.length)) {
                          $child.css({
                              "visibility": "hidden",
                          });
                      }
                  });
              }
              if (!this.settings.imageVariantSize) {
                  $selector.css({
                      "min-width": "",
                      "width": "",
                      "min-height": "",
                      "height": "",
                  });
                  setTimeout(function () {
                      var height = $selector.outerHeight();
                      $selector.css({
                          "min-width": height + "px",
                          "width": height + "px",
                          "min-height": height + "px",
                          "height": height + "px",
                      });
                  }, 0);
              }
              else {
                  $selector.css({
                      "min-width": this.settings.imageVariantSize,
                      "width": this.settings.imageVariantSize,
                      "min-height": this.settings.imageVariantSize,
                      "height": this.settings.imageVariantSize,
                  });
              }
              if (this.settings.imageVariantCircle) {
                  $selector.css({
                      "border-radius": "100%"
                  });
              }
              else {
                  $selector.css({
                      "border-radius": this.settings.imageVariantRadius,
                  });
              }
              this.supportTooltip($selector);
          }
      };
      /**
       * supportTooltip
       * @param $selector dom select variant
       */
      GtVariantsStyle.prototype.supportTooltip = function ($selector) {
          if (this.settings.variantTooltip) {
              var isCheckTooltip = $selector.find(".gt_variant__tooltip");
              if (!isCheckTooltip || !isCheckTooltip.length) {
                  var value = $selector.attr("data-value");
                  value = value.replace(/'/gm, "\"");
                  var $tooltip_1 = jQuery("<span class=\"gt_variant__tooltip\">" + value + "<span class=\"gt_variant__tooltip_arrow\"></span></span>");
                  $tooltip_1.css({
                      "position": "absolute",
                      "top": "0px",
                      "left": "50%",
                      "background": "rgba(0,0,0,0.76)",
                      "color": "#fff",
                      "transform": "translateX(-50%)",
                      "border-radius": "4px",
                      "padding": "0.4rem 0.75rem",
                      "white-space": "nowrap",
                      "transition": "visibility 0s, opacity 0.25s",
                      "visibility": "hidden",
                      "opacity": "0",
                  });
                  $tooltip_1.find(".gt_variant__tooltip_arrow").css({
                      "position": "absolute",
                      "top": "100%",
                      "left": "50%",
                      "color": "#fff",
                      "margin-left": "-6px",
                      "border-top": "solid 6px rgba(0,0,0,0.76)",
                      "border-bottom": "solid 6px transparent",
                      "border-left": "solid 6px transparent",
                      "border-right": "solid 6px transparent",
                  });
                  $selector.append($tooltip_1);
                  var height = $tooltip_1.outerHeight();
                  height = height + 10;
                  $tooltip_1.css({
                      top: "-" + height + "px"
                  });
                  $selector.off("mouseover.hoverVariant").on("mouseover.hoverVariant", function () {
                      $tooltip_1.css({
                          "visibility": "visible",
                          "opacity": "1",
                      });
                      $selector.off("mouseleave.hoverVariant").on("mouseleave.hoverVariant", function () {
                          $tooltip_1.css({
                              "visibility": "hidden",
                              "opacity": "0",
                          });
                          $selector.off("mouseleave.hoverVariant");
                      });
                  });
              }
          }
      };
      /**
       * support variant sale tag
       */
      GtVariantsStyle.prototype.supportVariantSaleTag = function () {
          var _this = this;
          // support variant color
          if (!this.settings.variantSaleTag) {
              return;
          }
          // find product
          var $products = this.$el.find("[keyword=product], [data-keyword=product]");
          if (!($products === null || $products === void 0 ? void 0 : $products.length)) {
              return;
          }
          // each product section
          $products.each(function (_, productElement) {
              var $selectors = $(productElement).find(".gt_swatches--select[data-name=\"" + _this.settings.variantSaleTagTitle + "\"][data-value]").not("li");
              if (!($selectors === null || $selectors === void 0 ? void 0 : $selectors.length)) {
                  return;
              }
              $selectors.css({
                  "position": "relative",
                  "min-width": "120px",
                  "min-height": "50px",
                  "display": "flex",
                  "align-items": "center",
                  "justify-content": "center",
                  "overflow": "visible"
              });
              $selectors.css({
                  "margin-top": "30px",
              });
              // get product json
              var productJson = $(productElement).find(".ProductJson").text();
              var productJsonObject = null;
              try {
                  productJsonObject = JSON.parse(productJson);
              }
              catch (e) {
                  console.log("error: ", e);
              }
              // get current state of other variant types
              var $otherVariantTypes = $(productElement).find(".gt_product-swatches--options").not(":has(> [data-name='" + _this.settings.variantSaleTagTitle + "'])");
              var currentOptionState = ($otherVariantTypes === null || $otherVariantTypes === void 0 ? void 0 : $otherVariantTypes.length) ? Array.from($otherVariantTypes.map(function (_, options) { return $(options).find(".gt_swatches--select.gt_active").attr("data-value"); })) : [];
              // each option in current variant type of current product
              $selectors.each(function (_, selectorElement) {
                  var $selector = $(selectorElement);
                  var value = $selector.attr("data-value").replace(/'/gm, "\"");
                  if (!value || $selector.hasClass("gt_soldout")) {
                      return;
                  }
                  // calculate sale value
                  var currentVariant = productJsonObject === null || productJsonObject === void 0 ? void 0 : productJsonObject.variants.find(function (variant) { return __spreadArrays(currentOptionState, [value]).every(function (option) { return variant.options.includes(option); }); });
                  if (!currentVariant) {
                      return;
                  }
                  var saleValue = Math.round((currentVariant.compare_at_price - currentVariant.price) / currentVariant.compare_at_price * 100);
                  if (saleValue <= 0) {
                      return;
                  }
                  // update value if sale tag has been exist
                  if ($selector.has(".gt_variant-style-sale-tag").length) {
                      $selector.find(".gt_variant-style-sale-tag").text(_this.settings.variantSaleTagFormat.replace("[!Value!]", saleValue.toString()));
                      return;
                  }
                  // create and show sale tag
                  var $saleTag = $("<div class='gt_variant-style-sale-tag'>" + _this.settings.variantSaleTagFormat.replace("[!Value!]", saleValue.toString()) + "</div>");
                  $saleTag.css({
                      "position": "absolute",
                      "top": "-20px",
                      "left": "50%",
                      "transform": "translateX(-50%)",
                      "min-width": "70px",
                      "height": "30px",
                      "background": _this.settings.variantSaleTagBackgroundColor,
                      "color": _this.settings.variantSaleTagTextColor,
                      "border-radius": _this.settings.variantSaleTagBorderRadius,
                      "display": "flex",
                      "align-items": "center",
                      "justify-content": "center",
                      "line-height": "1em",
                      "padding": "0 2px",
                  });
                  $selector.append($saleTag);
              });
          });
      };
      /**
       * listen change variant update sale tag
       */
      GtVariantsStyle.prototype.listenChangeVariantUpdateSaleTag = function () {
          var _this = this;
          var $products = this.$el.find("[keyword=product], [data-keyword=product]");
          if (!($products === null || $products === void 0 ? void 0 : $products.length)) {
              return;
          }
          $products.each(function (_, productElement) {
              var $productJson = $(productElement).find(".ProductJson");
              if (!($productJson === null || $productJson === void 0 ? void 0 : $productJson.length)) {
                  return;
              }
              window.store.change("variant" + $productJson.attr("data-id"), _this.supportVariantSaleTag.bind(_this));
          });
      };
      /**
       * getVariants
       * @returns variants
       */
      GtVariantsStyle.prototype.getVariants = function () {
          var defaultVariants = [{
                  title: "blue",
                  languages: ["xanh dương"],
                  color: "#0000FF",
                  image: ""
              },
              {
                  title: "yellow",
                  languages: ["vàng"],
                  color: "#FFFF00",
                  image: ""
              },
              {
                  title: "purple",
                  languages: ["tím"],
                  color: "#2C3544",
                  image: ""
              },
              {
                  title: "red",
                  languages: ["đỏ"],
                  color: "#f7272b",
                  image: ""
              },
              {
                  title: "silver",
                  languages: [],
                  color: "#C0C0C0",
                  image: ""
              },
              {
                  title: "gray",
                  languages: [],
                  color: "#808080",
                  image: ""
              },
              {
                  title: "black",
                  languages: [],
                  color: "#000000",
                  image: ""
              },
              {
                  title: "maroon",
                  languages: [],
                  color: "#800000",
                  image: ""
              },
              {
                  title: "olive",
                  languages: [],
                  color: "#808000",
                  image: ""
              },
              {
                  title: "lime",
                  languages: [],
                  color: "#00FF00",
                  image: ""
              },
              {
                  title: "green",
                  languages: [],
                  color: "#008000",
                  image: ""
              },
              {
                  title: "aqua",
                  languages: [],
                  color: "#00FFFF",
                  image: ""
              },
              {
                  title: "teal",
                  languages: [],
                  color: "#008080",
                  image: ""
              },
              {
                  title: "navy",
                  languages: [],
                  color: "#000080",
                  image: ""
              },
              {
                  title: "fuchsia",
                  languages: [],
                  color: "#FF00FF",
                  image: ""
              },
              {
                  title: "purple",
                  languages: [],
                  color: "#800080",
                  image: ""
              },
              {
                  title: "white",
                  languages: [],
                  color: "#ffffff",
                  image: ""
              },
          ];
          // Merge color
          var customColors = this.settings.colors;
          if (customColors === null || customColors === void 0 ? void 0 : customColors.length) {
              for (var i = 0; i < customColors.length; i++) {
                  var title = customColors[i].title;
                  var color = customColors[i].color;
                  if (title && color) {
                      title = title.toLowerCase();
                      var variant = {
                          title: title,
                          color: color,
                          languages: [],
                          image: ""
                      };
                      var found = false;
                      for (var j = 0; j < defaultVariants.length; j++) {
                          if (defaultVariants[j].title == title) {
                              found = true;
                              defaultVariants[j].color = variant.color; // replace color
                              break;
                          }
                      }
                      if (!found) {
                          defaultVariants.push(variant);
                      }
                  }
              }
          }
          // Merge image
          var customImages = this.settings.images;
          if (customImages === null || customImages === void 0 ? void 0 : customImages.length) {
              for (var i = 0; i < customImages.length; i++) {
                  var title = customImages[i].title;
                  var image = customImages[i].image;
                  if (title && image) {
                      title = title.toLowerCase();
                      var variant = {
                          title: title,
                          color: "",
                          languages: [],
                          image: image,
                      };
                      var found = false;
                      for (var j = 0; j < defaultVariants.length; j++) {
                          if (defaultVariants[j].title == title) {
                              found = true;
                              defaultVariants[j].image = variant.image; // replace image
                              break;
                          }
                      }
                      if (!found) {
                          defaultVariants.push(variant);
                      }
                  }
              }
          }
          return defaultVariants;
      };
      return GtVariantsStyle;
  }());
  /**
   * gtProductSwatchesColor
   * @param options settings
   */
  jQuery.fn.gtVariantsStyle = function (options) {
      this.each(function () {
          var plugin = new GtVariantsStyle(this, options);
          jQuery(this).data("gtvariantsstyle", plugin);
      });
  };
})(jQuery);
        }
        funcLib69();
      } catch(e) {
        console.error("Error lib id: 69" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib14 = function() {
          "use strict";

(function (jQuery) {
  var gtParallax = function (element, options) {
    // Khai bao cac tham so mac dinh trong biet *default*
    var defaults = {
      classBackgroundImage: null,
    };

    this.settings = {};
    var $element = jQuery(element);
    var _this = this;

    this.init = function () {
      this.settings = jQuery.extend({}, defaults, options);
      // Init parallax no transtion
      _this.refreshDrag();

      // Event scroll
      _this.parallaxIt();
    };
    this.parallaxIt = function () {
      var $fwindow = jQuery(window);
      var yPos = 0;
      var xPos = "50%";

      $fwindow.on("scroll.gtparallax resize.gtparallax", function () {
        _this.calcBackground(xPos, yPos);
      });
      jQuery("body").on("scroll.gtparallax resize.gtparallax", function () {
        _this.calcBackground(xPos, yPos);
      });
    };

    this.refreshDrag = function () {
      var yPos = 0;
      var xPos = "50%";
      _this.calcBackground(xPos, yPos);
    };

    this.calcBackground = function (xPos, yPos) {
      var $fwindow = jQuery(window);
      var $image = $element.find(_this.settings.classBackgroundImage);
      var speed = _this.settings.speed || 0.2;

      if ($fwindow.width() >= 992 && !/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
        if (speed == 1) {
          $image.css({
            backgroundPosition: xPos + " " + yPos + "vh",
            "background-attachment": "fixed",
            "-webkit-backface-visibility": "hidden",
            transition: "all 0.15s",
          });
        } else {
          $image.css({
            backgroundPosition: xPos + " " + yPos + "vh",
            "background-attachment": "fixed",
            "-webkit-backface-visibility": "hidden",
            transition: "all 0.15s",
          });
        }
      } else {
        $image.css({
          "backgroundPosition": "",
          "background-attachment": "",
          "-webkit-backface-visibility": "",
        });
      }
    };
    
    this.init();
  };

  jQuery.fn.gtParallax = function (options) {
    return this.each(function () {
      var plugin = new gtParallax(this, options);

      jQuery(this).data("gtparallax", plugin);
    });
  };
})(jQuery);

        }
        funcLib14();
      } catch(e) {
        console.error("Error lib id: 14" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib11 = function() {
          "use strict";

/* gtProductSaved */
(function (jQuery) {
  var gtProductSaved = function (element, options) {
    var defaults = {
      classTextPercent: null,
      classTextNumber: null,
      dataFormat: "",
      dataFormatKey: "",
      customCurrencyFormat: null,
      roundPercent: 0,
      roundNoZeroes: false,
    };

    this.settings = {};

    var $element = jQuery(element);
    var _this = this;
    var _productJson;

    this.init = function () {
      this.settings = jQuery.extend({}, defaults, options);
      var productJson = $element.closest("[keyword='product'], [data-keyword='product']").find(".ProductJson").text();

      try {
        if (productJson) {
          _productJson = JSON.parse(productJson);
        }
      } catch (e) {
        console.log(e);
      }

      _this.Init();
      _this.listen();
    };

    this.Init = function () {
      if (_productJson) {
        var variant = window.store.get("variant" + _productJson.id);
        if (variant && variant.id) {
          _this.setPriceWithVariant(variant);
        }
      }
    };

    this.listen = function () {
      var store = window.store;

      if (_productJson) {
        store.change("variant" + _productJson.id, function (variant) {
          _this.setPriceWithVariant(variant);
        });

        store.change("quantity" + _productJson.id, function () {
          _this.Init();
        });
      }

      store.change("dataCurrency", function () {
        _this.Init();
      });
    };

    this.setPriceWithVariant = function (variant) {
      if (variant.compare_at_price && variant.price && variant.compare_at_price > variant.price) {
        $element.addClass("gf_active");
        $element.addClass("gt_active");

        // Giá giảm theo %
        if (_this.settings.classTextPercent) {
          var $number = $element.find(_this.settings.classTextPercent);
          var number = _this.getPercentDiscount(variant.price, variant.compare_at_price);

          $number.html(number);
        }

        // Giá giảm theo sổ tiền
        if (_this.settings.classTextNumber) {
          var $price = $element.find(_this.settings.classTextNumber);
          var diff = variant.compare_at_price - variant.price;

          diff = _this.formatMoneyPlugin(diff);
          $price.html(diff);
        }
      } else {
        $element.removeClass("gf_active");
        $element.removeClass("gt_active");
      }
    };

    // Get price with quantity
    this.getPriceWithQuantity = function (price) {
      if (_productJson) {
        var quantityProduct = window.store.get("quantity" + _productJson.id);

        quantityProduct = Number(quantityProduct);
        if (!quantityProduct || isNaN(quantityProduct)) {
          quantityProduct = 1;
        }
        price = Number(price) * quantityProduct;
      }
      return price;
    };

    // Format price
    this.formatMoneyPlugin = function (price) {
      price = _this.getPriceWithQuantity(price);
      var dataCurrency = window.store.get("dataCurrency");
      var format = __GemSettings.money;

      if (!dataCurrency) {
        // default shopify format
        price = Shopify.formatMoney(price, format);
      } else {
        // ES addon auto currency converter
        var notApplyRoundDecimal = true; // no apply round decimal for save money

        price = Shopify.gemFormatMoney(price, dataCurrency.currency, dataCurrency.data, _this.settings.customCurrencyFormating, notApplyRoundDecimal);
      }

      if (_this.settings.dataFormat && _this.settings.dataFormatKey) {
        price = _this.settings.dataFormat.replace(_this.settings.dataFormatKey, price);
      }

      return price;
    };

    // Lấy phần trăm giảm giá
    this.getPercentDiscount = function (price, comparePrice) {
      price = parseFloat(price);
      comparePrice = parseFloat(comparePrice);
      var diff = comparePrice - price;

      diff = diff / comparePrice;
      diff = diff * 100;
      if(_this.settings.roundNoZeroes) {
        diff = _this.roundTo(diff, _this.settings.roundPercent);
      } else {
        diff = diff.toFixed(_this.settings.roundPercent);
      }
      diff += "%";

      if (_this.settings.dataFormat && _this.settings.dataFormatKey) {
        diff = _this.settings.dataFormat.replace(_this.settings.dataFormatKey, diff);
      }

      return diff;
    };

    this.roundTo = function(n, digits) {
      if (digits === undefined) {
        digits = 0;
      }
    
      var multiplicator = Math.pow(10, digits);
      n = parseFloat((n * multiplicator).toFixed(11));
      var test =(Math.round(n) / multiplicator);
      return +(test.toFixed(digits));
    }

    this.init();
  };

  jQuery.fn.gtProductSaved = function (options) {
    return this.each(function () {
      var plugin = new gtProductSaved(this, options, jQuery);

      jQuery(this).data("gtproductsaved", plugin);
    });
  };
})(jQuery);

        }
        funcLib11();
      } catch(e) {
        console.error("Error lib id: 11" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib112 = function() {
          (function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["webpackNumbers"] = factory();
	else
		root["webpackNumbers"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ({

/***/ 8:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * GtCartV5Input
 * Lăng nghe sự kiện người dùng click button plus, Minus hoặc nhập số lượng sản phẩm để tăng hoặc giảm sản phẩm trong giỏ hàng
 * Update quantity của product
 */
var GtCartV5Input = /** @class */ (function () {
    /**
     * constructor
     * @param params setting cua lib
     */
    function GtCartV5Input(params) {
        this.$element = $(params.$element);
        this.settings = __assign(__assign({}, this.settings), params.settings);
        this.event();
        this.listen();
    }
    /**
     * event
     */
    GtCartV5Input.prototype.event = function () {
        var _this = this;
        if (this.settings.classQuantityPlus) {
            var $buttonPlus = this.$element.find(this.settings.classQuantityPlus);
            if ($buttonPlus && $buttonPlus.length) {
                $buttonPlus.off("click.quantityPlus" + this.settings.id).on("click.quantityPlus" + this.settings.id, function (e) {
                    var $this = $(e.currentTarget);
                    var $item = $this.closest(_this.settings.classItemCart);
                    var key = $item.attr("data-key");
                    var $input = $item.find(_this.settings.classInputQuantity);
                    var $inputFirst = $input;
                    if ($input && $input.length >= 2) {
                        $inputFirst = jQuery($input[0]);
                    }
                    var quantity = $inputFirst.val();
                    quantity = Number(quantity) + 1;
                    // Update number
                    $input.attr("value", quantity).val(quantity);
                    _this.settings.cacheQuantity = quantity;
                    window.gfTheme.changeCartItem(key, quantity, function (cart, err) {
                        if (err) {
                            var message = "";
                            try {
                                message = JSON.parse(err.responseText).description || "Something wrong!";
                            }
                            catch (e) {
                                message = "Something wrong!";
                            }
                            alert(message);
                        }
                        window.store.update("gtCartInput", cart);
                        window.store.update("cart.item_count", cart.item_count);
                        window.SOLID.store.dispatch("cart.quantity_plus", true);
                    });
                });
            }
        }
        if (this.settings.classQuantityMinus) {
            var $buttonMinus = this.$element.find(this.settings.classQuantityMinus);
            if ($buttonMinus && $buttonMinus.length) {
                $buttonMinus.off("click.quantityMinus" + this.settings.id).on("click.quantityMinus" + this.settings.id, function (e) {
                    var $this = $(e.currentTarget);
                    var $item = $this.closest(_this.settings.classItemCart);
                    var key = $item.attr("data-key");
                    var $input = $item.find(_this.settings.classInputQuantity);
                    var $inputFirst = $input;
                    if ($input && $input.length >= 2) {
                        $inputFirst = jQuery($input[0]);
                    }
                    var quantity = $inputFirst.val();
                    quantity = Number(quantity) - 1;
                    if (quantity > 0) {
                        // Update number
                        $input.attr("value", quantity).val(quantity);
                        _this.settings.cacheQuantity = quantity;
                        window.gfTheme.changeCartItem(key, quantity, function (cart, err) {
                            if (err) {
                                var message = "";
                                try {
                                    message = JSON.parse(err.responseText).description || "Something wrong!";
                                }
                                catch (e) {
                                    message = "Something wrong!";
                                }
                                alert(message);
                            }
                            window.store.update("gtCartInput", cart);
                            window.store.update("cart.item_count", cart.item_count);
                            window.SOLID.store.dispatch("cart.quantity_minus", true);
                        });
                    }
                    else {
                        _this.confirmRemove(key, 0, null);
                    }
                });
            }
        }
        //   Lắng nghe sự kiện người dùng thay đổi giá trị số lượng sản phẩm trong ô input
        if (this.settings.classInputQuantity) {
            var $inputQuantity = this.$element.find(this.settings.classInputQuantity);
            if ($inputQuantity && $inputQuantity.length) {
                $inputQuantity.off("change.quantity" + this.settings.id).on("change.quantity" + this.settings.id, function (e) {
                    var $this = $(e.currentTarget);
                    var quantity = $this.val();
                    var key = $this.closest(_this.settings.classItemCart).attr("data-key");
                    if (quantity > 0) {
                        _this.settings.cacheQuantity = quantity;
                        $this.val(quantity);
                        window.gfTheme.changeCartItem(key, quantity, function (cart, err) {
                            if (err) {
                                var message = "";
                                try {
                                    message = JSON.parse(err.responseText).description || "Something wrong!";
                                }
                                catch (e) {
                                    message = "Something wrong!";
                                }
                                alert(message);
                            }
                            window.store.update("gtCartInput", cart);
                            window.store.update("cart.item_count", cart.item_count);
                            window.SOLID.store.dispatch("cart.quantity_change", true);
                        });
                    }
                    else {
                        _this.confirmRemove(key, _this.settings.cacheQuantity, $this);
                    }
                });
            }
        }
    };
    /**
     * confirmRemove
     * @param key key cua variant
     * @param quantityCurrent so luong
     * @param $input input dom
     */
    GtCartV5Input.prototype.confirmRemove = function (key, quantityCurrent, $input) {
        var warning = false;
        // Nếu quantity của một sản phẩm = 0 hiển thị popup xác nhận có remove sản phẩm khỏi giỏ hàng hay ko
        if (this.settings.classPopupWarning) {
            var $popupWarning_1 = this.$element.find(this.settings.classPopupWarning);
            if ($popupWarning_1 && $popupWarning_1.length) {
                warning = true;
                $popupWarning_1.addClass("gt_active");
                $popupWarning_1
                    .find(this.settings.classCancelDeleteWarning)
                    .off("click.warning" + this.settings.id)
                    .on("click.warning" + this.settings.id, function () {
                    $popupWarning_1.removeClass("gt_active");
                    if ($input) {
                        $input.val(quantityCurrent);
                    }
                });
                $popupWarning_1
                    .find(this.settings.classAgreeDeleteWarning)
                    .off("click.warning" + this.settings.id)
                    .on("click.warning" + this.settings.id, function () {
                    window.gfTheme.changeCartItem(key, 0, function (cart, err) {
                        if (err) {
                            var message = "";
                            try {
                                message = JSON.parse(err.responseText).description || "Something wrong!";
                            }
                            catch (e) {
                                message = "Something wrong!";
                            }
                            alert(message);
                        }
                        $popupWarning_1.removeClass("gt_active");
                        window.store.update("gtCartInput", cart);
                        window.store.update("cart.item_count", cart.item_count);
                        window.SOLID.store.dispatch("cart.quantity_remove", true);
                    });
                });
            }
        }
        // Nếu không có warning thì cập nhật về 0
        if (!warning) {
            window.gfTheme.changeCartItem(key, 0, function (cart, err) {
                if (err) {
                    var message = "";
                    try {
                        message = JSON.parse(err.responseText).description || "Something wrong!";
                    }
                    catch (e) {
                        message = "Something wrong!";
                    }
                    alert(message);
                }
                window.store.update("gtCartInput", cart);
                window.store.update("cart.item_count", cart.item_count);
                window.SOLID.store.dispatch("cart.quantity_remove", true);
            });
        }
    };
    /**
     * listen
     */
    GtCartV5Input.prototype.listen = function () {
        var _this = this;
        window.store.change("gtCartCallEvent", function () {
            _this.event();
        });
    };
    return GtCartV5Input;
}());
/**
 * gtCartV5Input
 * @param params setting cua lib
 * @returns lib
 */
window.SOLID.library.gtCartV5Input = function (params) {
    return new GtCartV5Input(params);
};
exports.default = {};


/***/ })

/******/ });
});
        }
        funcLib112();
      } catch(e) {
        console.error("Error lib id: 112" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib113 = function() {
          (function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["webpackNumbers"] = factory();
	else
		root["webpackNumbers"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ({

/***/ 7:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * GtCartV5RemoveItem
 */
var GtCartV5RemoveItem = /** @class */ (function () {
    /**
     * constructor ham khoi tao thu vien
     * @param params settings cua thu vien
     */
    function GtCartV5RemoveItem(params) {
        this.$element = $(params.$element);
        this.settings = __assign(__assign({}, this.settings), params.settings);
        this.event();
        this.listen();
    }
    /**
     * event cac logic khi click nut remove
     */
    GtCartV5RemoveItem.prototype.event = function () {
        var _this = this;
        if (this.settings.classRemove) {
            var $buttonRemove = this.$element.find(this.settings.classRemove);
            $buttonRemove.off("click.remove" + this.settings.id).on("click.remove" + this.settings.id, function (e) {
                var $removeButton = jQuery(e.currentTarget);
                // const variantId = $removeButton.closest(this.settings.classItemCart).attr("data-variant-id");
                var key = $removeButton.closest(_this.settings.classItemCart).attr("data-key");
                var $popupDelete = _this.$element.find(_this.settings.classPopupDeleteItem);
                // const quantity = $removeButton.closest(this.settings.classItemCart).find(this.settings.classInputQuantity).val();
                if ($popupDelete && $popupDelete.length) {
                    $popupDelete.addClass("gt_active");
                    if (_this.settings.classCancelDeleteItem) {
                        $popupDelete
                            .find(_this.settings.classCancelDeleteItem)
                            .off("click.remove" + _this.settings.id)
                            .on("click.remove" + _this.settings.id, function () {
                            $popupDelete.removeClass("gt_active");
                        });
                    }
                    if (_this.settings.classAgreeDeleteItem) {
                        $popupDelete
                            .find(_this.settings.classAgreeDeleteItem)
                            .off("click.remove" + _this.settings.id)
                            .on("click.remove" + _this.settings.id, function () {
                            window.gfTheme.changeCartItem(key, 0, function (cart, err) {
                                if (err) {
                                    var message = "";
                                    try {
                                        message = JSON.parse(err.responseText).description || "Something wrong!";
                                    }
                                    catch (e) {
                                        message = "Something wrong!";
                                    }
                                    alert(message);
                                }
                                $popupDelete.removeClass("gt_active");
                                window.store.update("gtCartInput", cart);
                                window.store.update("cart.item_count", cart.item_count);
                                window.SOLID.store.dispatch("cart.quantity_remove", true);
                            });
                        });
                    }
                }
                else {
                    window.gfTheme.changeCartItem(key, 0, function (cart, err) {
                        if (err) {
                            var message = "";
                            try {
                                message = JSON.parse(err.responseText).description || "Something wrong!";
                            }
                            catch (e) {
                                message = "Something wrong!";
                            }
                            alert(message);
                        }
                        window.store.update("gtCartInput", cart);
                        window.store.update("cart.item_count", cart.item_count);
                        window.SOLID.store.dispatch("cart.quantity_remove", true);
                    });
                }
            });
        }
    };
    /**
     * listen lang nghe khi callEvent thi chay lai ham event
     */
    GtCartV5RemoveItem.prototype.listen = function () {
        var _this = this;
        window.store.change("gtCartCallEvent", function () {
            _this.event();
        });
    };
    return GtCartV5RemoveItem;
}());
/**
 * gtCartV5RemoveItem
 * @param params cac settings cua thu vien
 * @returns gan thu vien vao fn jquery
 */
window.SOLID.library.gtCartV5RemoveItem = function (params) {
    return new GtCartV5RemoveItem(params);
};
exports.default = {};


/***/ })

/******/ });
});
        }
        funcLib113();
      } catch(e) {
        console.error("Error lib id: 113" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib111 = function() {
          (function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["webpackNumbers"] = factory();
	else
		root["webpackNumbers"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ({

/***/ 2:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * GtCartV5Discount
 * Lắng nghe sự thay đổi của gtCartInput, dataDiscounts
 * Cập nhật total discount theo total quantity trong cart, tính toán, update lại và format rồi in ra html.
 */
var GtCartV5Discount = /** @class */ (function () {
    /**
     * constructor khoi tao
     * @param params setting cua lib
     */
    function GtCartV5Discount(params) {
        this.$element = $(params.$element);
        this.settings = __assign(__assign({}, this.settings), params.settings);
        this.listen();
    }
    /**
     * listen lang nghe su kien discount
     */
    GtCartV5Discount.prototype.listen = function () {
        var _this = this;
        window.SOLID.store.subscribe("discount", function () {
            _this.checkUpdateDiscount();
        });
    };
    /**
     * checkUpdateDiscount
     */
    GtCartV5Discount.prototype.checkUpdateDiscount = function () {
        var discount = window.SOLID.store.getState("discount");
        var cart = window.SOLID.store.getState("cart");
        if (cart) {
            this.updateDiscountTotal(cart, discount);
        }
    };
    /**
     * updateDiscountTotal
     * Lấy ra tổng số lượng của các Item trong cart(nếu >= discount.number thì update lại discount)
     * Tính toán và cập nhật tiền discount
     * Format tiền discount rồi in ra html
     * @param cart cart cua trang
     * @param discount giam gia
     */
    GtCartV5Discount.prototype.updateDiscountTotal = function (cart, discount) {
        var code = "";
        if (discount && discount.title) {
            code = discount.title;
        }
        var priceMax = 0;
        if (discount && discount.price) {
            priceMax = discount.price;
        }
        // Kiểm tra auto discount
        var isAutoDiscount = false;
        if (cart && cart.items && cart.items.length) {
            if (cart.total_discount > 0) {
                isAutoDiscount = true;
                priceMax = cart.total_discount;
                var codes = [];
                for (var i = 0; i < cart.items.length; i++) {
                    var item = cart.items[i];
                    if (item && item.discounts && item.discounts.length) {
                        for (var j = 0; j < item.discounts.length; j++) {
                            var itemDiscount = item.discounts[j];
                            if (itemDiscount && itemDiscount.title && codes.indexOf(itemDiscount.title) === -1) {
                                codes.push(itemDiscount.title);
                            }
                        }
                    }
                }
                code = codes.join(", ");
            }
        }
        // Trigger price to store. Dù có không giảm giá vẫn cần trigger để cập nhật lại giá gốc
        window.store.update("gtCartDiscountPrice", {
            price: priceMax,
            cart: cart,
        });
        // Cập nhật discount code
        var $formCart = this.$element.find('form[action="/cart"]');
        if ($formCart && $formCart.length) {
            var $discount = $formCart.find('[name="discount"]');
            if (priceMax && !isAutoDiscount) {
                // Nếu có tiền và không phải là auto discount thì mới cập nhật vào form
                if ($discount && $discount.length) {
                    $discount.attr("value", code).val(code);
                }
                else {
                    $formCart.append('<input type="hidden" name="discount" value="' + code + '" />');
                }
            }
            else if ($discount && $discount.length) {
                $discount.attr("value", "").val("");
            }
            window.SOLID.store.dispatch("updateDiscountCode", true);
        }
        // Show discout code
        if (this.settings.classWrapperDiscount) {
            var $discountWrapper = this.$element.find(this.settings.classWrapperDiscount);
            if ($discountWrapper && $discountWrapper.length) {
                if (priceMax) {
                    if (this.settings.classDiscountCode) {
                        var $discountCode = this.$element.find(this.settings.classDiscountCode);
                        if ($discountCode && $discountCode.length) {
                            $discountCode.html(code);
                        }
                    }
                    if (this.settings.classDiscountPrice) {
                        var $discountPrice = this.$element.find(this.settings.classDiscountPrice);
                        if ($discountPrice && $discountPrice.length) {
                            var priceFormat = this.formatMoneyPlugin(priceMax);
                            $discountPrice.html("-" + priceFormat);
                        }
                    }
                    $discountWrapper.addClass("gt_active");
                    // trigger thay doi dom để cart drawer tính toán lại chiều cao
                    window.SOLID.store.dispatch("gtCartDiscountPriceShowDiscount", true);
                }
                else {
                    $discountWrapper.removeClass("gt_active");
                }
            }
        }
    };
    /**
     * formatMoneyPlugin
     * @param price gia can format
     * @returns gia da format
     */
    GtCartV5Discount.prototype.formatMoneyPlugin = function (price) {
        var dataCurrency = window.SOLID.store.getState("dataCurrency");
        var format = window.__GemSettings.money;
        if (dataCurrency) {
            price = window.Shopify.gemFormatMoney(price, dataCurrency.currency, dataCurrency.data);
        }
        else {
            price = window.Shopify.formatMoney(price, format);
        }
        return price;
    };
    return GtCartV5Discount;
}());
/** gtCartV5Discount
 * @param params cac setting cua thu vien
 * @returns libs
 */
window.SOLID.library.gtCartV5Discount = function (params) {
    return new GtCartV5Discount(params);
};
exports.default = {};


/***/ })

/******/ });
});
        }
        funcLib111();
      } catch(e) {
        console.error("Error lib id: 111" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib110 = function() {
          (function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["webpackNumbers"] = factory();
	else
		root["webpackNumbers"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ({

/***/ 2:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * GtCartV5
 */
var GtCartV5 = /** @class */ (function () {
    /**
     * constructor
     * @param params params truyen vao thu vien
     */
    function GtCartV5(params) {
        this.CLASS_ITEM_PRICE_DISCOUNT = "gt_item_price--auto-discount";
        this.CLASS_TOTAL_PRICE_DISCOUNT = "gt_total_item_price--auto-discount";
        /**
         * isDiscountBuyXGetY check xem co phai dang buy x get y hay khong
         * @param checkItem item can check discount
         * @param cartItems cartItems
         * @returns boolean
         */
        this.isDiscountBuyXGetY = function (checkItem, cartItems) {
            for (var idx = 0; idx < cartItems.length; idx++) {
                var compareItem = cartItems[idx];
                if (checkItem.id === compareItem.id && !compareItem.discounts.length) {
                    return true;
                }
            }
            return false;
        };
        this.$element = $(params.$element);
        this.settings = __assign(__assign({}, this.settings), params.settings);
        this.reRenderCaseDeleteItemAutoFixedDiscount = false;
        this.init();
        this.listen();
    }
    /**
     * init ham khoi tao thu vien
     */
    GtCartV5.prototype.init = function () {
        var _this = this;
        var dataCurrency = window.SOLID.store.getState("dataCurrency");
        var cart = window.SOLID.store.getState("cart");
        this.cachedCartItems = (cart === null || cart === void 0 ? void 0 : cart.items) || [];
        if (cart) {
            if (dataCurrency) {
                this.updateSaved(cart);
                this.updatePriceItem(cart);
                this.updatePriceTotal(cart);
            }
            this.updateDomForDiscountedItem();
        }
        else {
            window.gfTheme.getCart(function (cart, error) {
                if (!error) {
                    if (dataCurrency) {
                        _this.updateSaved(cart);
                        _this.updatePriceItem(cart);
                        _this.updatePriceTotal(cart);
                    }
                    _this.updateDomForDiscountedItem();
                }
            });
        }
    };
    /**
     * listen ham lang nghe cac su kien
     */
    GtCartV5.prototype.listen = function () {
        var _this = this;
        window.SOLID.store.subscribe("gtCartInput", function (cart) {
            if (_this.settings.mode == "production") {
                window.SOLID.cart.UpdateCart(cart);
                _this.checkCartAddNewItem(cart, function () {
                    _this.checkCartNotFound(cart);
                    _this.reRenderCartItems(cart);
                    _this.updateSaved(cart);
                    _this.updateNumberTotal(cart);
                    _this.updatePriceItem(cart);
                    _this.updateDomForDiscountedItem();
                    _this.updatePriceTotal(cart);
                });
            }
        });
        window.SOLID.store.subscribe("addToCartSuccess", function () {
            if (_this.settings.mode == "production") {
                var cart_1 = window.SOLID.store.getState("cart");
                window.SOLID.cart.UpdateCart(cart_1);
                _this.checkCartAddNewItem(cart_1, function () {
                    _this.checkCartNotFound(cart_1);
                    _this.reRenderCartItems(cart_1);
                    _this.updateSaved(cart_1);
                    _this.updateNumberTotal(cart_1);
                    _this.updatePriceItem(cart_1);
                    _this.updateDomForDiscountedItem();
                    _this.updatePriceTotal(cart_1);
                });
            }
        });
        window.SOLID.store.subscribe("dataCurrency", function () {
            window.gfTheme.getCart(function (cart, error) {
                if (!error) {
                    _this.checkCartAddNewItem(cart, function () {
                        _this.updateSaved(cart);
                        _this.updatePriceTotal(cart);
                        _this.updatePriceItem(cart);
                        _this.updateDomForDiscountedItem();
                    });
                }
            });
        });
        window.SOLID.store.subscribe("gtCartDiscountPrice", function (infoDiscount) {
            // { price, cart }
            _this.checkCartAddNewItem(infoDiscount.cart, function () {
                _this.updateSaved(infoDiscount.cart);
                _this.updatePriceTotal(infoDiscount.cart);
            });
        });
    };
    /**
     * checkCartNotFound check xem co cart hay khong
     * @param cart cart
     */
    GtCartV5.prototype.checkCartNotFound = function (cart) {
        if (cart && cart.items && cart.items.length) {
            this.$element.find(this.settings.classContentPage).addClass("gt_active");
            this.$element.find(this.settings.classCartEmpty).removeClass("gt_active");
        }
        else {
            // Cart not found
            this.$element.find(this.settings.classContentPage).removeClass("gt_active");
            this.$element.find(this.settings.classCartEmpty).addClass("gt_active");
        }
    };
    /**
     * checkCartAddNewItem khi add them 1 item moi
     * @param cart cart
     * @param callback ham callback khi add 1 item
     */
    GtCartV5.prototype.checkCartAddNewItem = function (cart, callback) {
        var _a, _b, _c, _d;
        var $items = this.$element.find(this.settings.classItemCart);
        var cartItems = [];
        if (cart && cart.items && cart.items.length) {
            cartItems = cart.items;
        }
        var isContinue = true;
        if ($items && $items.length && cartItems && cartItems.length) {
            var mapCheck = {};
            if (cartItems && cartItems.length) {
                for (var j = 0; j < cartItems.length; j++) {
                    var cartItem = cartItems[j];
                    mapCheck[cartItem.key] = {
                        isExisted: false,
                        quantity: cartItem.quantity,
                    };
                }
            }
            for (var i = 0; i < $items.length; i++) {
                var $item = jQuery($items[i]);
                var key = $item.attr("data-key");
                var variantId = $item.attr("data-variant-id");
                var quantity = (_b = (_a = $item.find(this.settings.classInputQuantity)) === null || _a === void 0 ? void 0 : _a.val()) !== null && _b !== void 0 ? _b : 0;
                if (((_c = mapCheck[key]) === null || _c === void 0 ? void 0 : _c.isExisted) === false && String((_d = mapCheck[key]) === null || _d === void 0 ? void 0 : _d.quantity) === String(quantity)) {
                    // so sanh ca quantity voi truong hop delete van giu nguyen items
                    mapCheck[key] = __assign(__assign({}, mapCheck[key]), { isExisted: true }); // truong hop da ton tai trong cart
                }
                else if (this.checkIsExistVariantInCart(variantId, cartItems)) {
                    mapCheck[key] = __assign(__assign({}, mapCheck[key]), { isExisted: false }); // truong hop ko co trong cart (check khi auto discount)
                }
            }
            for (var key in mapCheck) {
                if (mapCheck === null || mapCheck === void 0 ? void 0 : mapCheck.hasOwnProperty(key)) {
                    var isExisted = mapCheck[key].isExisted;
                    if (!isExisted) {
                        if (window.location.pathname !== "/cart") {
                            window.SOLID.store.dispatch("cart-refresh", cart);
                        }
                        break;
                    }
                }
            }
        }
        if (isContinue) {
            callback();
        }
    };
    /**
     * checkIsExistVariantInCart check xem variant bi xoa di co con ton tai trong cart ko ( truong hop auto discount buy x get y )
     * @param variantId variant can check
     * @param cartItems cartItems moi
     * @returns boolean
     */
    GtCartV5.prototype.checkIsExistVariantInCart = function (variantId, cartItems) {
        for (var i = 0; i < cartItems.length; i++) {
            var cartItem = cartItems[i];
            if (String(cartItem.id) === String(variantId)) {
                return true;
            }
        }
        return false;
    };
    /**
     * checkIsAddItemsCaseHaveManySameVariant
     * @param itemInNewCart new cart item
     * @param oldCartItems old cart items
     * @param newCartItems new cart items
     * @returns boolean
     */
    GtCartV5.prototype.checkIsAddItemsCaseHaveManySameVariant = function (itemInNewCart, oldCartItems, newCartItems) {
        for (var i = 0; i < oldCartItems.length; i++) {
            var oldCartItem = oldCartItems[i];
            if (String(itemInNewCart.key) !== String(oldCartItem.key) &&
                String(itemInNewCart.variant_id) === String(oldCartItem.variant_id) &&
                this.checkItemExistInCartByKeyAndVariantId(oldCartItem, newCartItems, "and") &&
                !this.checkItemExistInCartByKeyAndVariantId(itemInNewCart, oldCartItems, "and")) {
                return true;
            }
        }
        return false;
    };
    /**
     * checkItemExistInCartByKeyAndVariantId
     * @param item item can check
     * @param cartItems cart items
     * @param condition dieu kien and hoac or de check variant && key hoac variant || key
     * @returns boolean
     */
    GtCartV5.prototype.checkItemExistInCartByKeyAndVariantId = function (item, cartItems, condition) {
        for (var i = 0; i < cartItems.length; i++) {
            var cartItem = cartItems[i];
            if (condition === "and" && String(item.key) === String(cartItem.key) && String(item.variant_id) === String(cartItem.variant_id)) {
                return true;
            }
            if (condition === "or" && (String(item.key) === String(cartItem.key) || String(item.variant_id) === String(cartItem.variant_id))) {
                return true;
            }
        }
        return false;
    };
    /**
     * checkItemIsNotUpdateItemInNewCart: item không phải là item được update
     * @param oldItem item can check
     * @param newCartItems new cart items
     * @param oldCartItems old cart items
     * @returns boolean
     */
    GtCartV5.prototype.checkItemIsNotUpdateItemInNewCart = function (oldItem, newCartItems, oldCartItems) {
        var _this = this;
        var itemSameVariantDifferentKeyNewCart = this.checkItemIsSameVariantButDifferentKey(oldItem, newCartItems);
        // biến này dùng để check xem có tồn tại ít nhất 1 item có cùng variant với oldItem ở cart mới và tồn tại trong cart cũ hay không
        var isExistedAtLeastOneItemInNewcart = false;
        itemSameVariantDifferentKeyNewCart.forEach(function (item) {
            var isExisted = _this.checkItemExistInCartByKeyAndVariantId(item, oldCartItems, "and");
            if (isExisted) {
                isExistedAtLeastOneItemInNewcart = true;
            }
        });
        return !this.checkItemExistInCartByKeyAndVariantId(oldItem, newCartItems, "and") && isExistedAtLeastOneItemInNewcart;
    };
    /**
     * checkItemIsSameVariantButDifferentKey
     * @param item item need to check
     * @param cartItems cart items
     * @returns item thoa man dieu kien trong cart items
     */
    GtCartV5.prototype.checkItemIsSameVariantButDifferentKey = function (item, cartItems) {
        var listItems = [];
        for (var i = 0; i < cartItems.length; i++) {
            var cartItem = cartItems[i];
            if (String(cartItem.variant_id) === String(item.variant_id) && String(cartItem.key) !== String(item.key)) {
                listItems.push(cartItem);
            }
        }
        return listItems;
    };
    /**
     * checkDeleteItemInCaseAutoFixedDiscountAndProperties
     * @param checkItem item can check
     * @param checkItem.key key
     * @param checkItem.variant_id variant_id
     * @param newCartItems item trong cart moi
     * @returns boolean
     */
    GtCartV5.prototype.checkDeleteItemInCaseAutoFixedDiscountAndProperties = function (checkItem, newCartItems) {
        var _a;
        var item;
        this.cachedCartItems.forEach(function (oldItem) {
            if (String(checkItem.variant_id) === String(oldItem.variant_id) && String(checkItem.key) === String(oldItem.key)) {
                item = oldItem;
            }
        });
        if (!((_a = item === null || item === void 0 ? void 0 : item.discounts) === null || _a === void 0 ? void 0 : _a.length)) {
            return false;
        }
        // trường hợp auto discount theo fixed value và sản phẩm có thểm properties
        var countSameVariantItemInNewCart = 0;
        newCartItems.forEach(function (newItem) {
            var _a;
            if (String(newItem.variant_id) === String(item.variant_id) && String(newItem.key) !== String(item.key) && !((_a = newItem === null || newItem === void 0 ? void 0 : newItem.discounts) === null || _a === void 0 ? void 0 : _a.length)) {
                countSameVariantItemInNewCart++;
            }
        });
        // same variant_id item trong cart mới phải bằng 1
        if (countSameVariantItemInNewCart !== 1) {
            return false;
        }
        var countSameVariantItemInOldCart = 0;
        var isFirstSameVariantItem = false;
        var sameVariantItemHaveDiscount = true;
        this.cachedCartItems.forEach(function (oldItem) {
            var _a;
            if (String(oldItem.variant_id) === String(item.variant_id)) {
                if (!((_a = oldItem === null || oldItem === void 0 ? void 0 : oldItem.discounts) === null || _a === void 0 ? void 0 : _a.length)) {
                    sameVariantItemHaveDiscount = false;
                }
                if (oldItem.key === item.key && countSameVariantItemInOldCart === 0) {
                    isFirstSameVariantItem = true;
                }
                countSameVariantItemInOldCart++;
            }
        });
        // nếu same item bằng 2 và là item đầu tiên trong same items và same item phải có discount thì mới pass
        if (countSameVariantItemInOldCart !== 2 || !isFirstSameVariantItem || !sameVariantItemHaveDiscount) {
            return false;
        }
        this.reRenderCaseDeleteItemAutoFixedDiscount = true;
        return true;
    };
    /**
     * checkIsAddItemsInCart
     * @param itemInNewCart item need to check
     * @param oldCartItems old cart items
     * @param newCartItems new cart items
     * @returns boolean
     */
    GtCartV5.prototype.checkIsAddItemsInCart = function (itemInNewCart, oldCartItems, newCartItems) {
        return !this.checkItemExistInCartByKeyAndVariantId(itemInNewCart, oldCartItems, "or") || this.checkIsAddItemsCaseHaveManySameVariant(itemInNewCart, oldCartItems, newCartItems);
    };
    /**
     * checkIsDeleteItemsInCart
     * @param oldItem old cart item
     * @param oldItem.key key
     * @param oldItem.variant_id variant_id
     * @param newCartItems new cart items
     * @param oldCartItems old cart items
     * @returns boolean
     */
    GtCartV5.prototype.checkIsDeleteItemsInCart = function (oldItem, newCartItems, oldCartItems) {
        return (!this.checkItemExistInCartByKeyAndVariantId(oldItem, newCartItems, "or") ||
            this.checkItemIsNotUpdateItemInNewCart(oldItem, newCartItems, oldCartItems) ||
            (!this.checkItemIsNotUpdateItemInNewCart(oldItem, newCartItems, oldCartItems) && this.checkDeleteItemInCaseAutoFixedDiscountAndProperties(oldItem, newCartItems)));
    };
    /**
     * reRenderCartItems update cart khi remove 1 item trong cart
     * @param cart cart
     */
    GtCartV5.prototype.reRenderCartItems = function (cart) {
        var _this = this;
        var $items = this.$element.find(this.settings.classItemCart);
        var cartItems = [];
        var allItemExistedInDom = [];
        for (var i = 0; i < $items.length; i++) {
            var $item = jQuery($items[i]);
            var variantId = $item.attr("data-variant-id");
            var key = $item.attr("data-key");
            allItemExistedInDom.push({ key: key, variant_id: variantId });
        }
        if (cart && cart.items && cart.items.length) {
            cartItems = cart.items;
        }
        if ($items && $items.length && cartItems && cartItems.length) {
            // so sanh 2 array va tim ra item can THEM, XOA, UPDATE
            var addItems_1 = [];
            var deleteItems = [];
            var updateItems = [];
            addItems_1 = cartItems.filter(function (cartItem) {
                return _this.checkIsAddItemsInCart(cartItem, allItemExistedInDom, cartItems);
            });
            deleteItems = allItemExistedInDom.filter(function (oldCartItem) {
                return _this.checkIsDeleteItemsInCart(oldCartItem, cartItems, allItemExistedInDom);
            });
            updateItems = cartItems.filter(function (cartItem) {
                return addItems_1.indexOf(cartItem) === -1;
            });
            if (this.reRenderCaseDeleteItemAutoFixedDiscount) {
                // delete cac item ko ton tai
                deleteItems.forEach(function (cartItem) {
                    var $deleteItem = _this.$element.find(_this.settings.classItemCart + ("[data-variant-id='" + cartItem.variant_id + "'][data-key='" + cartItem.key + "']"));
                    $deleteItem.remove();
                });
            }
            // replace lai nhung item cu
            updateItems.forEach(function (cartItem) {
                var $replaceItemByVariant = _this.$element.find(_this.settings.classItemCart + ("[data-variant-id='" + cartItem.variant_id + "']"));
                if ($replaceItemByVariant && $replaceItemByVariant.length > 1) {
                    var $replaceItem = _this.$element.find(_this.settings.classItemCart + ("[data-variant-id='" + cartItem.variant_id + "'][data-key='" + cartItem.key + "']"));
                    $replaceItem.find(_this.settings.classInputQuantity).val(cartItem.quantity);
                    // update properties
                    _this.updateProperties(cartItem, $replaceItem);
                }
                else {
                    $replaceItemByVariant.attr("data-key", cartItem.key);
                    $replaceItemByVariant.find(_this.settings.classInputQuantity).val(cartItem.quantity);
                    // update properties
                    _this.updateProperties(cartItem, $replaceItemByVariant);
                }
            });
            // render item moi
            addItems_1.forEach(function (cartItem) {
                // clone 1 cart item co cung variantId de replace gia va so luong
                var $sameCartItem = _this.$element.find(_this.settings.classItemCart + ("[data-variant-id='" + cartItem.variant_id + "']"));
                if ($sameCartItem && $sameCartItem.length) {
                    var $cloneCartItemSameVariant = $($sameCartItem[0]).clone();
                    if ($cloneCartItemSameVariant && $cloneCartItemSameVariant.length) {
                        _this.resetDefaultCartItemDom($cloneCartItemSameVariant);
                        // neu co 1 cart item co cung variant
                        $cloneCartItemSameVariant.attr("data-key", cartItem.key);
                        $cloneCartItemSameVariant.find(_this.settings.classInputQuantity).val(cartItem.quantity);
                        // update properties
                        _this.updateProperties(cartItem, $cloneCartItemSameVariant);
                        $cloneCartItemSameVariant.insertAfter($($sameCartItem[0]));
                        _this.runJavaScriptOfAtomInCartItem($cloneCartItemSameVariant);
                    }
                }
                // TODO: cần cải thiện nếu sau này xảy ra trường hợp không có cart item để clone
            });
            if (!this.reRenderCaseDeleteItemAutoFixedDiscount) {
                // delete cac item ko ton tai
                deleteItems.forEach(function (cartItem) {
                    var $deleteItem = _this.$element.find(_this.settings.classItemCart + ("[data-variant-id='" + cartItem.variant_id + "'][data-key='" + cartItem.key + "']"));
                    $deleteItem.remove();
                });
            }
            // reset bien va cache cart item
            this.cachedCartItems = (cart === null || cart === void 0 ? void 0 : cart.items) || [];
            this.reRenderCaseDeleteItemAutoFixedDiscount = false;
            // call lai thu vien de ap dung voi nhung dom moi duoc them vao
            if (addItems_1.length) {
                var libParams = {
                    $element: this.$element,
                    settings: this.settings,
                };
                window.SOLID.library.gtCartV5Input(libParams);
                window.SOLID.library.gtCartV5RemoveItem(libParams);
                window.SOLID.library.gtCartV5Discount(libParams);
            }
        }
    };
    /**
     * updateProperties cập nhật properties cho 1 cart item
     * @param cartItem cartItem cần cập nhật
     * @param $domCartItem dom của cart item đó
     */
    GtCartV5.prototype.updateProperties = function (cartItem, $domCartItem) {
        if (cartItem.properties) {
            var $propertiesContainer = $domCartItem.find(this.settings.classContainerProperties);
            $propertiesContainer.children().remove();
            for (var key in cartItem.properties) {
                if (Object.prototype.hasOwnProperty.call(cartItem.properties, key)) {
                    var value = cartItem.properties[key];
                    if (value && key && !key.startsWith("_")) {
                        var $newPropertyItem = $(this.settings.htmlItemProperties);
                        $newPropertyItem.find(this.settings.classNameItemProperty).html(key + ": ");
                        $newPropertyItem.find(this.settings.classValueItemProperty).html(value);
                        $propertiesContainer.append($newPropertyItem);
                    }
                }
            }
        }
    };
    /**
     * resetDefaultCartItemDom
     * @param $cartItem cartItem dom
     */
    GtCartV5.prototype.resetDefaultCartItemDom = function ($cartItem) {
        var $discountedPriceItem = $cartItem.find(this.settings.classDiscountedPriceItem);
        var $totalDiscountedPriceItem = $cartItem.find(this.settings.classDiscountedPriceLineItem);
        var $priceItem = $cartItem.find(this.settings.classPriceItem);
        var $totalPriceItem = $cartItem.find(this.settings.classPriceLineItem);
        var $priceCompareItem = $cartItem.find(this.settings.classPriceCompareItem);
        var $totalPriceCompareItem = $cartItem.find(this.settings.classPriceCompareLineItem);
        $discountedPriceItem.addClass("gt_hidden");
        $totalDiscountedPriceItem.addClass("gt_hidden");
        $priceItem.css("text-decoration", "");
        $priceItem.removeClass(this.CLASS_ITEM_PRICE_DISCOUNT);
        $totalPriceItem.css("text-decoration", "");
        $totalPriceItem.removeClass(this.CLASS_TOTAL_PRICE_DISCOUNT);
        $priceCompareItem.removeClass("gt_hidden");
        var variantJSON = this.getVariantJSONOfCartItem($cartItem);
        if (variantJSON && variantJSON.price < variantJSON.compare_at_price) {
            $totalPriceCompareItem.removeClass("gt_hidden");
        }
    };
    /**
     * getVariantJSONOfCartItem
     * @param $item cart item dom
     * @returns variantJson
     */
    GtCartV5.prototype.getVariantJSONOfCartItem = function ($item) {
        var $variantJSON = $item.find(this.settings.classProductJson);
        var variantJSON = null;
        if ($variantJSON && $variantJSON.length) {
            try {
                variantJSON = $variantJSON.text();
                variantJSON = JSON.parse(variantJSON);
            }
            catch (e) {
                console.log(e);
            }
        }
        return variantJSON;
    };
    /**
     * runJavaScriptOfAtomInCartItem
     * @param $cartItem cart item dom
     */
    GtCartV5.prototype.runJavaScriptOfAtomInCartItem = function ($cartItem) {
        var productImageAtomId = this.getProductImageAtomIdOfCartItem($cartItem);
        window.SOLID.store.dispatch("runjs_atom_" + productImageAtomId, true);
    };
    /**
     * getProductImageOfCartItem
     * @param $cartItem cart item
     * @returns atom product image
     */
    GtCartV5.prototype.getProductImageAtomIdOfCartItem = function ($cartItem) {
        var $productImage = $cartItem.find(".gt_product-img-box").closest("[class^='gt_atom-']");
        var className = $productImage.attr("class");
        var splitClassName = className === null || className === void 0 ? void 0 : className.match(/gt_atom-([^\s]+)/);
        if ((splitClassName === null || splitClassName === void 0 ? void 0 : splitClassName.length) > 1) {
            return splitClassName[1];
        }
        return "";
    };
    /**
     * updatePriceItem: Cập nhật, format giá theo currency của các product có trong cart
     * @param cart cart
     */
    GtCartV5.prototype.updatePriceItem = function (cart) {
        var $items = this.$element.find(this.settings.classItemCart);
        var cartItems = cart.items;
        if ($items && $items.length && cartItems && cartItems.length) {
            for (var i = 0; i < $items.length; i++) {
                var $item = jQuery($items[i]);
                // const variantID = $item.attr("data-variant-id");
                var key = $item.attr("data-key");
                var cartItem = null;
                for (var j = 0; j < cartItems.length; j++) {
                    if (key) {
                        if (key == cartItems[j].key) {
                            cartItem = cartItems[j];
                            break;
                        }
                    }
                }
                var $variantJSON = $item.find(this.settings.classProductJson);
                var variantJSON = null;
                if ($variantJSON && $variantJSON.length) {
                    try {
                        variantJSON = $variantJSON.text();
                        variantJSON = JSON.parse(variantJSON);
                    }
                    catch (e) {
                        console.log(e);
                    }
                }
                if (variantJSON && cartItem) {
                    var priceItem = 0;
                    var comparePriceItem = 0;
                    var originalPriceItem = 0;
                    var linePriceItem = 0;
                    var lineComparePriceItem = 0;
                    var lineOriginalPriceItem = 0;
                    if (this.settings.priceItemDisplay == "after-discount") {
                        priceItem = this.formatMoneyPlugin(cartItem.final_price);
                    }
                    else {
                        priceItem = this.formatMoneyPlugin(cartItem.original_price);
                    }
                    comparePriceItem = this.formatMoneyPlugin(variantJSON.compare_at_price);
                    originalPriceItem = this.formatMoneyPlugin(cartItem.original_price);
                    if (this.settings.priceItemDisplay == "after-discount") {
                        linePriceItem = this.formatMoneyPlugin(cartItem.final_line_price);
                    }
                    else {
                        linePriceItem = this.formatMoneyPlugin(cartItem.original_line_price);
                    }
                    lineComparePriceItem = this.formatMoneyPlugin(variantJSON.compare_at_price * cartItem.quantity);
                    lineOriginalPriceItem = this.formatMoneyPlugin(cartItem.original_price * cartItem.quantity);
                    // Hiển thị giá bán của 1 sản phẩm ra giao diện
                    if (this.settings.classPriceItem) {
                        $item.find(this.settings.classPriceItem).html(String(priceItem));
                    }
                    // Hiển thị giá comparePrice của 1 sản phẩm ra giao diện
                    if (this.settings.classPriceCompareItem) {
                        if (variantJSON.compare_at_price && variantJSON.compare_at_price > cartItem.final_price) {
                            $item.find(this.settings.classPriceCompareItem).removeClass("gt_hidden");
                            $item.find(this.settings.classPriceCompareItem).html(String(comparePriceItem));
                        }
                        else {
                            $item.find(this.settings.classPriceCompareItem).addClass("gt_hidden");
                        }
                    }
                    // Hiển thị giá original price của 1 sản phẩm ra giao diện
                    if (this.settings.classPriceOriginalItem) {
                        if (cartItem.original_price && cartItem.original_price > cartItem.final_price) {
                            $item.find(this.settings.classPriceOriginalItem).removeClass("gt_hidden");
                            $item.find(this.settings.classPriceOriginalItem).html(String(originalPriceItem));
                        }
                        else {
                            $item.find(this.settings.classPriceOriginalItem).addClass("gt_hidden");
                        }
                    }
                    // Hiển thị tổng tiền thanh toán theo từng sản phẩm = giá bán của 1 sản phẩm * số lượng mua của sản phẩm đó
                    if (this.settings.classPriceLineItem) {
                        $item.find(this.settings.classPriceLineItem).html(String(linePriceItem));
                    }
                    // Hiển thị tổng comparePrice theo từng sản phẩm = giá bán của 1 sản phẩm * số lượng mua của sản phẩm đó
                    if (this.settings.classPriceCompareLineItem) {
                        if (variantJSON.compare_at_price && variantJSON.compare_at_price > cartItem.final_price) {
                            $item.find(this.settings.classPriceCompareLineItem).removeClass("gt_hidden");
                            $item.find(this.settings.classPriceCompareLineItem).html(String(lineComparePriceItem));
                        }
                        else {
                            $item.find(this.settings.classPriceCompareLineItem).addClass("gt_hidden");
                        }
                    }
                    // Hiển thị tổng original price theo từng sản phẩm = giá bán ban đầu của 1 sản phẩm * số lượng mua của sản phẩm đó
                    if (this.settings.classPriceOriginalLineItem) {
                        if (cartItem.original_price && cartItem.original_price > cartItem.final_price) {
                            $item.find(this.settings.classPriceOriginalLineItem).removeClass("gt_hidden");
                            $item.find(this.settings.classPriceOriginalLineItem).html(String(lineOriginalPriceItem));
                        }
                        else {
                            $item.find(this.settings.classPriceOriginalLineItem).addClass("gt_hidden");
                        }
                    }
                }
            }
        }
    };
    /**
     * updatePriceTotal Cập nhật tổng tiền khách hàng cần thanh toán ( Total Price )
     * @param cart cart
     */
    GtCartV5.prototype.updatePriceTotal = function (cart) {
        if (!cart) {
            return;
        }
        // Format giá và hiển thị dữ liệu ra giao diện
        if (this.settings.classPriceSubtotalCart) {
            var subTotal = this.getTotalComparePrice(cart);
            subTotal = this.formatMoneyPlugin(subTotal);
            this.$element.find(this.settings.classPriceSubtotalCart).html(subTotal);
        }
        var totalPrice = cart.total_price - this.getTotalDiscount(cart);
        var totalCart = this.formatMoneyPlugin(totalPrice);
        if (this.settings.classPriceTotalCart) {
            this.$element.find(this.settings.classPriceTotalCart).html(totalCart);
        }
    };
    /**
     * updateNumberTotal Cập nhật số lượng item trong cart
     * @param cart cart
     */
    GtCartV5.prototype.updateNumberTotal = function (cart) {
        if (this.settings.classCountItems) {
            this.$element.find(this.settings.classCountItems).html(String(cart.item_count));
        }
    };
    /**
     * updateSaved Cập nhật Save Money
     * @param cart cart
     */
    GtCartV5.prototype.updateSaved = function (cart) {
        if (!cart) {
            return;
        }
        var $wrapper = this.$element.find(this.settings.classWrapperSubtotal);
        var subTotal = this.getTotalComparePrice(cart);
        var totalPrice = cart.total_price - this.getTotalDiscount(cart);
        var saveMoney = subTotal - totalPrice;
        // Format Money và hiển thị dự liệu đã được tính toán ra view
        if (saveMoney > 0) {
            if (this.settings.classPriceSavedCart) {
                var $priceSaved = this.$element.find(this.settings.classPriceSavedCart);
                var notApplyRoundDecimal = true; // no apply round decimal for save money
                var priceSave = this.formatMoneyPlugin(saveMoney, notApplyRoundDecimal);
                $priceSaved.html(priceSave);
            }
            if (this.settings.classSubtotalPercent) {
                var diff = (saveMoney / subTotal) * 100;
                diff = Math.round(diff);
                var $percentSaved = this.$element.find(this.settings.classSubtotalPercent);
                $percentSaved.html(diff + "%");
            }
            if ($wrapper && $wrapper.length) {
                $wrapper.removeClass("gt_hidden");
            }
        }
        else if ($wrapper && $wrapper.length) {
            $wrapper.addClass("gt_hidden");
        }
    };
    /**
     * getTotalComparePrice Lấy tổng tiền của các sản phẩm
     * @param cart cart
     * @returns total compare price
     */
    GtCartV5.prototype.getTotalComparePrice = function (cart) {
        var totalComParePrice = 0;
        if (cart && cart.items && cart.items.length) {
            var cartItems = cart.items;
            var $items = this.$element.find(this.settings.classItemCart); // Lấy tất cả các element product html
            if ($items && $items.length) {
                for (var i = 0; i < $items.length; i++) {
                    var $item = jQuery($items[i]);
                    var variantID = $item.attr("data-variant-id");
                    var key = $item.attr("data-key");
                    var cartItem = null;
                    for (var j = 0; j < cartItems.length; j++) {
                        if (key) {
                            // TH mới
                            if (key == cartItems[j].key) {
                                cartItem = cartItems[j];
                                break;
                            }
                        }
                        else if (variantID) {
                            // HT cũ
                            if (variantID == cartItems[j].variant_id) {
                                cartItem = cartItems[j];
                                break;
                            }
                        }
                    }
                    var $variantJSON = $item.find(this.settings.classProductJson);
                    var variantJSON = null;
                    if ($variantJSON && $variantJSON.length) {
                        try {
                            variantJSON = $variantJSON.text();
                            variantJSON = JSON.parse(variantJSON);
                        }
                        catch (e) {
                            console.log(e);
                        }
                    }
                    if (variantJSON && cartItem) {
                        var comparePriceItem = cartItem.original_line_price;
                        if (variantJSON.compare_at_price && variantJSON.compare_at_price > variantJSON.price) {
                            comparePriceItem = variantJSON.compare_at_price * cartItem.quantity;
                        }
                        totalComParePrice = totalComParePrice + comparePriceItem;
                    }
                }
            }
        }
        return totalComParePrice;
    };
    /**
     * getTotalDiscount Lấy tiền discount đang được áp dụng
     * @param cart cart
     * @returns total discount
     */
    GtCartV5.prototype.getTotalDiscount = function (cart) {
        var discountCart = window.SOLID.store.getState("gtCartDiscountPrice");
        if (discountCart && discountCart.price && cart && cart.total_discount == 0) {
            return parseInt(String(discountCart.price));
        }
        return 0;
    };
    /**
     * formatMoneyPlugin ormat price
     * @param price gia
     * @param notApplyRoundDecimal ko lam tron
     * @returns format money string
     */
    GtCartV5.prototype.formatMoneyPlugin = function (price, notApplyRoundDecimal) {
        var dataCurrency = window.store.get("dataCurrency");
        var format = window.__GemSettings.money;
        if (dataCurrency) {
            price = window.Shopify.gemFormatMoney(price, dataCurrency.currency, dataCurrency.data, null, notApplyRoundDecimal);
        }
        else {
            price = window.Shopify.formatMoney(price, format);
        }
        return price;
    };
    /**
     * updateDomForDiscountedItem update price va tag discount cho nhung item dc auto discount
     */
    GtCartV5.prototype.updateDomForDiscountedItem = function () {
        if (this.settings.isCartDrawer) {
            return;
        }
        this.renderDiscountedPriceForAllCartItems();
        this.renderTagDiscountForItemBuyXGetY();
    };
    /**
     * renderDiscountedPriceForAllCartItems
     */
    GtCartV5.prototype.renderDiscountedPriceForAllCartItems = function () {
        if (this.isAutoDiscount()) {
            this.renderAutoDiscountedPriceForCartItems();
            return;
        }
        if (this.isEsDiscountPercent()) {
            this.renderEsDiscountedPriceForCartItems();
            return;
        }
        this.resetDefaultDomForCartItems();
    };
    /**
     * isAutoDiscount: check is auto discount
     * @returns boolean
     */
    GtCartV5.prototype.isAutoDiscount = function () {
        var cart = window.SOLID.store.getState("cart");
        return (cart === null || cart === void 0 ? void 0 : cart.total_discount) > 0;
    };
    /**
     * renderAutoDiscountedPriceForCartItems
     */
    GtCartV5.prototype.renderAutoDiscountedPriceForCartItems = function () {
        var _this = this;
        var cart = window.SOLID.store.getState("cart");
        cart.items.forEach(function (item) {
            var _a;
            if (!((_a = item.discounts) === null || _a === void 0 ? void 0 : _a.length)) {
                var $itemDiscount = _this.$element.find(_this.settings.classItemCart + "[data-variant-id=" + item.variant_id + "][data-key=" + JSON.stringify(item.key) + "]");
                _this.resetDefaultCartItemDom($itemDiscount);
                return;
            }
            _this.renderDiscountedPriceInDom(item);
        });
    };
    /**
     * isEsDiscountPercent: check is discount by addon es
     * @returns discount price
     */
    GtCartV5.prototype.isEsDiscountPercent = function () {
        var discount = window.SOLID.store.getState("discount");
        return (discount === null || discount === void 0 ? void 0 : discount.price) > 0 && (discount === null || discount === void 0 ? void 0 : discount.value_type) === "percentage";
    };
    /**
     * renderEsDiscountedPriceForCartItems
     * @param items cart_items
     */
    GtCartV5.prototype.renderEsDiscountedPriceForCartItems = function () {
        var _this = this;
        var calculateItems = this.calculateDiscountInItems();
        calculateItems.forEach(function (item) {
            _this.renderDiscountedPriceInDom(item);
        });
    };
    /**
     * calculateDiscountInItems
     * @returns newitems
     */
    GtCartV5.prototype.calculateDiscountInItems = function () {
        var _this = this;
        var cart = window.SOLID.store.getState("cart");
        var actualTotalPriceAfterDiscount = cart.total_price - this.getTotalDiscount(cart);
        var newItems = cart.items.map(function (item) {
            if (_this.isSatisfiedDiscount(item)) {
                var discountPriceItem = _this.getDiscountPrice(item.original_price);
                var discountPriceTotal = _this.getDiscountPrice(item.line_price);
                return __assign(__assign({}, item), { discounted_price: item.original_price - discountPriceItem, line_price: item.line_price - discountPriceTotal });
            }
            return item;
        });
        var totalPriceAfterDiscount = newItems.reduce(function (beforeVal, currEl) { return beforeVal + currEl.line_price; }, 0);
        if (totalPriceAfterDiscount !== actualTotalPriceAfterDiscount) {
            var diffPrice_1 = totalPriceAfterDiscount - actualTotalPriceAfterDiscount;
            newItems.forEach(function (item) {
                if (diffPrice_1 <= 0 || !item.discounted_price) {
                    return;
                }
                item.discounted_price = item.discounted_price - 1;
                item.line_price = item.line_price - 1;
                diffPrice_1--;
            });
        }
        return newItems;
    };
    /**
     * getDiscountPrice get discount price for es discount
     * @param totalPrice price to discount
     * @returns discount price by es
     */
    GtCartV5.prototype.getDiscountPrice = function (totalPrice) {
        var discount = window.SOLID.store.getState("discount");
        return parseInt(String(Math.abs(discount.value) / 100 * totalPrice));
    };
    /**
     * isSatisfiedDiscount check product is satisfied discount
     * @param item cartItem
     * @returns boolean
     */
    GtCartV5.prototype.isSatisfiedDiscount = function (item) {
        var _a;
        var discount = window.SOLID.store.getState("discount");
        return (discount === null || discount === void 0 ? void 0 : discount.selector) === "all" || ((discount === null || discount === void 0 ? void 0 : discount.selector) === "products" && ((_a = discount === null || discount === void 0 ? void 0 : discount.product_ids) === null || _a === void 0 ? void 0 : _a.includes(item.product_id)));
    };
    /**
     * renderDiscountedPriceInDom render discounted price trên cart item dom
     * @param item cart_item trong cart
     */
    GtCartV5.prototype.renderDiscountedPriceInDom = function (item) {
        var $itemDiscount = this.$element.find(this.settings.classItemCart + "[data-variant-id=" + item.variant_id + "][data-key=" + JSON.stringify(item.key) + "]");
        var $discountedPriceItem = $itemDiscount.find(this.settings.classDiscountedPriceItem);
        var $totalDiscountedPriceItem = $itemDiscount.find(this.settings.classDiscountedPriceLineItem);
        var $priceItem = $itemDiscount.find(this.settings.classPriceItem);
        var $totalPriceItem = $itemDiscount.find(this.settings.classPriceLineItem);
        var $priceCompareItem = $itemDiscount.find(this.settings.classPriceCompareItem);
        var $totalPriceCompareItem = $itemDiscount.find(this.settings.classPriceCompareLineItem);
        var discountedPrice = this.formatMoneyPlugin(item.discounted_price);
        var totalDiscountedPrice = this.formatMoneyPlugin(item.line_price);
        if (item.line_price >= item.original_line_price) {
            this.resetDefaultCartItemDom($itemDiscount);
            return;
        }
        $discountedPriceItem.removeClass("gt_hidden");
        $totalDiscountedPriceItem.removeClass("gt_hidden");
        $priceItem.css("text-decoration", "line-through");
        $priceItem.addClass(this.CLASS_ITEM_PRICE_DISCOUNT);
        $totalPriceItem.css("text-decoration", "line-through");
        $totalPriceItem.addClass(this.CLASS_TOTAL_PRICE_DISCOUNT);
        $discountedPriceItem.html(String(discountedPrice));
        $totalDiscountedPriceItem.html(String(totalDiscountedPrice));
        $priceCompareItem.addClass("gt_hidden");
        $totalPriceCompareItem.addClass("gt_hidden");
    };
    /**
     * resetDefaultDomForCartItems
     */
    GtCartV5.prototype.resetDefaultDomForCartItems = function () {
        var _this = this;
        var cart = window.SOLID.store.getState("cart");
        cart.items.forEach(function (item) {
            var $itemDiscount = _this.$element.find(_this.settings.classItemCart + "[data-variant-id=" + item.variant_id + "][data-key=" + JSON.stringify(item.key) + "]");
            _this.resetDefaultCartItemDom($itemDiscount);
        });
    };
    /**
     * renderTagDiscountForItemBuyXGetY them discount tag cho item buy x get y
     */
    GtCartV5.prototype.renderTagDiscountForItemBuyXGetY = function () {
        var cart = window.SOLID.store.getState("cart");
        var listDuplicateVariant = this.getListDuplicateVariantInCart(cart);
        this.removeAllTagDiscount();
        this.renderTagDiscountForDuplicateVariantItems(listDuplicateVariant);
    };
    /**
     * getListDuplicateVariantInCart tim nhung item sinh ra tu buy x get y ma co cung variant voi 1 item trong cart
     * @param cart cart
     * @returns list dupliate variant
     */
    GtCartV5.prototype.getListDuplicateVariantInCart = function (cart) {
        var listDuplicateVariant = [];
        var arrayCheck = [];
        var cartItems = cart.items || [];
        for (var i = 0; i < cartItems.length; i++) {
            var item = cartItems[i];
            if (arrayCheck[i]) {
                continue;
            }
            this.loopForwardToFindDuplicateVariantItems({ listDuplicateVariant: listDuplicateVariant, arrayCheck: arrayCheck, cartItems: cartItems, currentItem: item, currentIndex: i });
        }
        return listDuplicateVariant;
    };
    /**
     * loopForwardToFindDuplicateVariantItems getListDuplicateVariant
     * @param params params
     * @param params.listDuplicateVariant result of duplicate variant
     * @param params.arrayCheck array check xem item do da duoc loop qua chua
     * @param params.cartItems cart.items
     * @param params.currentItem item hien tai dang duoc check
     * @param params.currentIndex index cua item hien tai dang duoc check
     */
    GtCartV5.prototype.loopForwardToFindDuplicateVariantItems = function (params) {
        var listDuplicateVariant = params.listDuplicateVariant, arrayCheck = params.arrayCheck, cartItems = params.cartItems, currentItem = params.currentItem, currentIndex = params.currentIndex;
        for (var i = currentIndex + 1; i < cartItems.length; i++) {
            var compareItem = cartItems[i];
            if (currentItem.id !== compareItem.id || arrayCheck[i]) {
                continue;
            }
            if (currentItem.discounts.length) {
                arrayCheck[currentIndex] = true;
                if (this.isDiscountBuyXGetY(currentItem, cartItems)) {
                    listDuplicateVariant.push(currentItem);
                }
            }
            if (compareItem.discounts.length) {
                arrayCheck[i] = true;
                if (this.isDiscountBuyXGetY(compareItem, cartItems)) {
                    listDuplicateVariant.push(compareItem);
                }
            }
        }
    };
    /**
     * removeAllTagDiscount remove all tag discount
     */
    GtCartV5.prototype.removeAllTagDiscount = function () {
        this.$element.find(this.settings.classItemCart).find(".tag_discount").remove();
    };
    /**
     * renderTagDiscountForDuplicateVariantItems
     * @param listDuplicateVariant list duplicate variant items
     */
    GtCartV5.prototype.renderTagDiscountForDuplicateVariantItems = function (listDuplicateVariant) {
        var _this = this;
        listDuplicateVariant.forEach(function (item) {
            var $itemDiscount = _this.$element.find(_this.settings.classItemCart + "[data-variant-id=" + item.variant_id + "][data-key=" + JSON.stringify(item.key) + "]");
            var $oldTagDiscount = $itemDiscount.find(".tag_discount");
            if (!$oldTagDiscount.length) {
                var $tagDiscount = $("<div class='tag_discount'></div>");
                $itemDiscount.css("position", "relative");
                $tagDiscount.css({
                    position: "absolute",
                    width: "100px",
                    background: "#adadad",
                    "text-align": "center",
                    color: "white",
                    "border-radius": "0px 0px 5px 0px",
                    "z-index": "10",
                });
                $itemDiscount.append($tagDiscount);
            }
        });
    };
    return GtCartV5;
}());
/** gtCartV5
 * @param params cac setting cua thu vien
 * @returns libs
 */
window.SOLID.library.gtCartV5 = function (params) {
    return new GtCartV5(params);
};
exports.default = {};


/***/ })

/******/ });
});

        }
        funcLib110();
      } catch(e) {
        console.error("Error lib id: 110" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib109 = function() {
          (function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["webpackNumbers"] = factory();
	else
		root["webpackNumbers"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 10);
/******/ })
/************************************************************************/
/******/ ({

/***/ 10:
/***/ (function(module, exports) {

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
/**
 * GtVariantsStyle
 * 1, Tùy chọn variant title color thì merge array colors custom vào variants.
 * 2, Tùy chọn variant title image thì merge array images custom vào variants.
 * 3, Cho phép setting hiển thị có tooltips không
 * 4, Cho phép chọn một số style tooltips
 */
var GtVariantsStyleV2 = /** @class */ (function () {
    /**
     * constructor
     * @param params params
     */
    function GtVariantsStyleV2(params) {
        var _this = this;
        this.settings = {
            colors: [],
            colorVariantTitle: "",
            colorVariantCircle: false,
            colorVariantRadius: "3px",
            colorVariantSize: "",
            colorVariantSizeSelect: "",
            images: [],
            imageVariantTitle: "",
            imageVariantCircle: false,
            imageVariantRadius: "3px",
            imageVariantSize: "",
            imageVariantSizeSelect: "",
            variantTooltip: false,
            hideSoldOutVariants: false,
            variantSaleTag: false,
            variantSaleTagTitle: "",
            variantSaleTagFormat: "[!Value!]% off",
            variantSaleTagTextColor: "#000",
            variantSaleTagBackgroundColor: "#FDAC2B",
            variantSaleTagBorderRadius: "5px",
            hideNoneExistVariant: false,
            mode: "production",
            noCache: false,
        };
        this.variants = [];
        this.cacheActiveVariants = {};
        this.$el = jQuery(params.$element);
        this.settings = __assign(__assign({}, this.settings), params.options);
        this.variants = this.getVariants();
        this.resetFeatures();
        if (this.settings.hideNoneExistVariant || this.settings.hideSoldOutVariants) {
            this.filterNoneExistOrSoldoutVariant(function () {
                _this.supportVariantColor();
                _this.supportVariantImage();
                _this.supportVariantSaleTag();
                _this.listenChangeVariantUpdateSaleTag();
            });
        }
        else {
            this.supportVariantColor();
            this.supportVariantImage();
            this.showVariantAtom();
            this.supportVariantSaleTag();
            this.listenChangeVariantUpdateSaleTag();
        }
        this.cacheLib(params);
    }
    /**
     * Destroy
     */
    GtVariantsStyleV2.prototype.Destroy = function () {
        this.resetFeatures();
    };
    /**
     * showVariantAtom sau khi load xong support color và image thì hiển thị atom lên do lúc đầu ản ở css của addon variant style
     */
    GtVariantsStyleV2.prototype.showVariantAtom = function () {
        // show variant atom
        var $products = this.$el.find("[keyword='product'], [data-keyword='product']");
        if ($products === null || $products === void 0 ? void 0 : $products.length) {
            for (var i = 0; i < $products.length; i++) {
                var $product = jQuery($products[i]);
                var $variantsWrapper = $product.find(".gt_product-variant");
                $variantsWrapper.addClass("gt_show_product-variant");
            }
        }
    };
    /**
     * resetFeatures
     */
    GtVariantsStyleV2.prototype.resetFeatures = function () {
        // Code run in editor
        var $selectors = this.$el.find(".gt_swatches--select[data-name][data-value]");
        // voi atom dang select
        var $activeSelector = this.$el.find(".gt_product-swatches-option-selected");
        if ($selectors === null || $selectors === void 0 ? void 0 : $selectors.length) {
            for (var i = 0; i < $selectors.length; i++) {
                var $selector = jQuery($selectors[i]);
                $selector.attr("style", "");
                var $childs = $selector.find("*");
                if ($childs === null || $childs === void 0 ? void 0 : $childs.length) {
                    $childs.each(function () {
                        var _a;
                        var $child = jQuery(this);
                        if (!((_a = $child.closest(".gt_variant__tooltip, .gt_swatches--select--soldout")) === null || _a === void 0 ? void 0 : _a.length)) {
                            $child.css({
                                visibility: "",
                                display: "",
                            });
                        }
                    });
                }
                $selector.find(".gt-variant-style_custom").remove();
                // remove for variant type segment:
                $selector.find(".gt_swatches-segment-variant-style").remove();
                // remove tool tip
                $selector.find(".gt_variant__tooltip, .gt_variant-style-sale-tag").remove();
            }
        }
        if ($activeSelector === null || $activeSelector === void 0 ? void 0 : $activeSelector.length) {
            $activeSelector.find(".gt-variant-style_custom").remove();
            var $childs = $activeSelector.find("*");
            if ($childs === null || $childs === void 0 ? void 0 : $childs.length) {
                $childs.each(function () {
                    var _a;
                    var $child = jQuery(this);
                    if (!((_a = $child.closest(".gt_variant__tooltip, .gt_swatches--select--soldout")) === null || _a === void 0 ? void 0 : _a.length)) {
                        $child.css({
                            visibility: "",
                            display: "",
                        });
                    }
                });
            }
        }
        // Run in editor
        var $variantsSoldOut = this.$el.find(".gt_swatches--select");
        if ($variantsSoldOut && $variantsSoldOut.length) {
            $variantsSoldOut.removeClass("gt_soldout gt_option_variant_none_existed gt_option_variant_soldout");
        }
    };
    /**
     * supportHideSoldOutVariants
     */
    /*
    private supportHideSoldOutVariants() {
      if (this.settings.hideSoldOutVariants) {
        const $products = this.$el.find("[keyword=product], [data-keyword='product']");
        if ($products?.length) {
          for (let i = 0; i < $products.length; i++) {
            const $product = jQuery($products[i]);
            if ($product?.length) {
              let productJsonObject: ProductShopify;
              const productJson = $product.find(".ProductJson").text();
              try {
                productJsonObject = JSON.parse(productJson);
              } catch (error) {
                console.log("error ", error);
              }
  
              const availableVariants: VariantShopify[] = [];
              if (productJsonObject?.variants?.length) {
                for (let j = 0; j < productJsonObject.variants.length; j++) {
                  const variant = productJsonObject.variants[j];
  
                  if (variant.available != undefined && variant.available) {
                    availableVariants.push(variant);
                  } else if (variant.inventory_quantity > 0 || variant.inventory_management != "shopify") {
                    // available
                    availableVariants.push(variant);
                  }
                }
              }
  
              const $swatches = $product.find(".gt_product-swatches");
              $swatches.find(".gt_product-swatches--item").each(function (index) {
                const $lineVariants = jQuery(this);
                const $variants = $lineVariants.find(".gt_swatches--select").not("li");
                $variants.each(function () {
                  const $variant = jQuery(this);
                  const value = $variant.attr("data-value");
                  // value = value.replace(/'/gm, "\"");
                  if (availableVariants?.length) {
                    let found = false;
                    for (let j = 0; j < availableVariants.length; j++) {
                      const varaint = availableVariants[j];
                      if (varaint?.options[index] == value) {
                        found = true;
                        break;
                      }
                    }
                    if (!found) {
                      $variant.addClass("gt_soldout");
                    }
                  } else {
                    $variant.addClass("gt_soldout");
                  }
                });
              });
  
              const $variantsSoldOut = $swatches.find(".gt_swatches--select.gt_soldout");
              if ($variantsSoldOut?.length) {
                const typeAtomVariant = this.getTypeOfProductVariantAtom($variantsSoldOut);
                const customTypeAtomVariant = this.getTypeOfCustomVariantAtom($variantsSoldOut);
                $variantsSoldOut.each(function () {
                  const $variantSoldOut = jQuery(this);
                  $variantSoldOut.find(".gt_swatches--select--soldout").remove();
                  $variantSoldOut.css({
                    position: "relative",
                    "user-select": "none",
                    cursor: "default",
                    "pointer-events": "none",
                  });
                  if ((typeAtomVariant === "segment" && customTypeAtomVariant !== "select") || (typeAtomVariant === "select" && customTypeAtomVariant === "segment")) {
                    const bordeRadius = $variantSoldOut.css("border-radius");
                    const _soldOutColor = "#000";
                    const sizeStroke = 1;
                    $variantSoldOut.append(
                      "<svg height=\"100\" width=\"100\" preserveAspectRatio=\"none\" class=\"gt_swatches--select--soldout\"><line x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\" style=\"stroke:" +
                        _soldOutColor +
                        ";stroke-width:" +
                        sizeStroke +
                        "\" /><line x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"0%\" style=\"stroke:" +
                        _soldOutColor +
                        ";stroke-width:" +
                        sizeStroke +
                        "\" /></svg>"
                    );
                    $variantSoldOut.find(".gt_swatches--select--soldout").css({
                      position: "absolute",
                      width: "100%",
                      height: "100%",
                      top: "0",
                      left: "0",
                      "border-radius": bordeRadius,
                    });
                  } else {
                    $variantSoldOut.css("opacity", "0.5");
                  }
                });
              }
            }
          }
        }
      }
      return;
    }
    */
    /**
     * supportVariantColor
     */
    GtVariantsStyleV2.prototype.supportVariantColor = function () {
        var _this = this;
        // support variant color
        if (this.settings.colorVariantTitle) {
            var colorVariantTitleList = this.settings.colorVariantTitle.split(",");
            if (colorVariantTitleList && colorVariantTitleList.length) {
                colorVariantTitleList.forEach(function (title) {
                    var _a;
                    var titleTrim = title.trim();
                    var $selectors = _this.$el.find(".gt_swatches--select[data-name=\"" + titleTrim + "\"][data-value]").not("li");
                    var $selectActiveVariant = (_a = _this.$el
                        .find(".gt_product-swatches--item[data-name=\"" + titleTrim + "\"]")) === null || _a === void 0 ? void 0 : _a.find(".gt_product-swatches-option-selected .gt_product-variant-option--selected-text");
                    // support select active cua atom product variant select
                    if ($selectActiveVariant === null || $selectActiveVariant === void 0 ? void 0 : $selectActiveVariant.length) {
                        var valueSelect = $selectActiveVariant.attr("data-value");
                        for (var j = 0; j < _this.variants.length; j++) {
                            var varaint = _this.variants[j];
                            var variantTitle = varaint.title;
                            var languages = varaint.languages;
                            if (variantTitle) {
                                if (valueSelect.toLowerCase() == variantTitle.toLowerCase()) {
                                    _this.setColorToVariant($selectActiveVariant, varaint, valueSelect);
                                }
                                else if (languages === null || languages === void 0 ? void 0 : languages.length) {
                                    for (var k = 0; k < languages.length; k++) {
                                        var language = languages[k].toLowerCase();
                                        if (language == valueSelect.toLowerCase()) {
                                            _this.setColorToVariant($selectActiveVariant, varaint, valueSelect);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    // support variant color
                    if ($selectors === null || $selectors === void 0 ? void 0 : $selectors.length) {
                        var selectorSupportToolTip = [];
                        for (var i = 0; i < $selectors.length; i++) {
                            var $selector = jQuery($selectors[i]);
                            var value = $selector.attr("data-value");
                            // value = value.replace(/'/gm, "\"");
                            if (value) {
                                for (var j = 0; j < _this.variants.length; j++) {
                                    var varaint = _this.variants[j];
                                    var variantTitle = varaint.title;
                                    var languages = varaint.languages;
                                    if (variantTitle) {
                                        if (value.toLowerCase() == variantTitle.toLowerCase()) {
                                            _this.setColorToVariant($selector, varaint, value);
                                            selectorSupportToolTip.push($selector);
                                        }
                                        else if (languages === null || languages === void 0 ? void 0 : languages.length) {
                                            for (var k = 0; k < languages.length; k++) {
                                                var language = languages[k].toLowerCase();
                                                if (language == value.toLowerCase()) {
                                                    _this.setColorToVariant($selector, varaint, value);
                                                    selectorSupportToolTip.push($selector);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        selectorSupportToolTip.forEach(function ($selector) {
                            _this.supportTooltip($selector);
                        });
                    }
                });
            }
        }
    };
    /**
     * setColorToVariant
     * @param $selector dom select variant
     * @param variant variant same default or custom
     * @param value value cua variant option
     */
    GtVariantsStyleV2.prototype.setColorToVariant = function ($selector, variant, value) {
        var _a;
        var typeAtomVariant = this.getTypeOfProductVariantAtom($selector);
        var customAtomVariantType = this.getTypeOfCustomVariantAtom($selector);
        if ((typeAtomVariant === "select" && customAtomVariantType !== "segment") || (typeAtomVariant === "segment" && customAtomVariantType === "select")) {
            var color = variant.color;
            var $colorElement = $("<div></div>");
            $colorElement.css({
                "background-color": color,
                "user-select": "none",
                position: "relative",
            });
            if (!this.settings.colorVariantSizeSelect) {
                var height = 24;
                $colorElement.css({
                    "min-width": height + "px",
                    width: height + "px",
                    "min-height": height + "px",
                    height: height + "px",
                });
            }
            else {
                $colorElement.css({
                    "min-width": this.settings.colorVariantSizeSelect,
                    width: this.settings.colorVariantSizeSelect,
                    "min-height": this.settings.colorVariantSizeSelect,
                    height: this.settings.colorVariantSizeSelect,
                });
            }
            if (this.settings.colorVariantCircle) {
                $colorElement.css({
                    "border-radius": "100%",
                    border: "1px solid currentcolor",
                    "margin-right": "10px",
                });
            }
            else {
                $colorElement.css({
                    "border-radius": this.settings.colorVariantRadius,
                });
            }
            var $contentElement = $("<div></div>");
            $contentElement.addClass("gt-variant-style_custom-text");
            $contentElement.html(value);
            var $optionElement = $("<div></div>");
            $optionElement.append($colorElement);
            $optionElement.append($contentElement);
            $optionElement.addClass("gt-variant-style_custom");
            $optionElement.css({
                display: "flex",
                "align-items": "center",
            });
            (_a = $selector.find(".gt-variant-style_custom")) === null || _a === void 0 ? void 0 : _a.remove();
            $selector.find(".gt_variant__tooltip").remove();
            var $childs = $selector.find("*");
            $childs.each(function () {
                var _a;
                var $child = jQuery(this);
                if (!((_a = $child.closest(".gt_swatches--select--soldout")) === null || _a === void 0 ? void 0 : _a.length)) {
                    $child.css({
                        display: "none",
                    });
                }
            });
            $selector.append($optionElement);
        }
        else {
            if (!this.settings.colorVariantSize) {
                $selector.css({
                    "min-width": "",
                    width: "auto",
                    "min-height": "",
                    height: "auto",
                });
                var isNoneExistedOption = false;
                if (this.settings.hideNoneExistVariant && $selector.hasClass("gt_option_variant_none_existed")) {
                    isNoneExistedOption = true;
                    $selector.removeClass("gt_option_variant_none_existed");
                }
                var $variantsWrapper = $selector.closest(".gt_product-variant");
                if (this.settings.mode === "dev" && this.settings.hideNoneExistVariant && !$variantsWrapper.hasClass("gt_show_product-variant")) {
                    $variantsWrapper.addClass("gt_show_product-variant");
                }
                // open child to calculate height
                var $childs_1 = $selector.find("*");
                $childs_1.each(function () {
                    var _a;
                    var $child = jQuery(this);
                    if (!((_a = $child.closest(".gt_variant__tooltip, .gt_swatches--select--soldout, .gt_swatches-segment-variant-style")) === null || _a === void 0 ? void 0 : _a.length)) {
                        $child.css({
                            display: "",
                        });
                    }
                });
                // calculate height
                var height = $selector.outerHeight();
                $selector.attr("style", $selector.attr("style") + "padding: 0px !important;");
                $selector.css({
                    "min-width": height + "px",
                    width: height + "px",
                    "min-height": height + "px",
                    height: height + "px",
                });
                if (this.settings.hideNoneExistVariant && isNoneExistedOption) {
                    $selector.addClass("gt_option_variant_none_existed");
                }
                // remove child
                $childs_1.each(function () {
                    var _a;
                    var $child = jQuery(this);
                    if (!((_a = $child.closest(".gt_variant__tooltip, .gt_swatches--select--soldout, .gt_swatches-segment-variant-style")) === null || _a === void 0 ? void 0 : _a.length)) {
                        $child.css({
                            display: "none",
                        });
                    }
                });
            }
            else {
                $selector.attr("style", $selector.attr("style") + "padding: 0px !important;");
                $selector.css({
                    "min-width": this.settings.colorVariantSize,
                    width: this.settings.colorVariantSize,
                    "min-height": this.settings.colorVariantSize,
                    height: this.settings.colorVariantSize,
                });
            }
            // hidden children
            var $childs = $selector.find("*");
            $childs.each(function () {
                var _a;
                var $child = jQuery(this);
                if (!((_a = $child.closest(".gt_variant__tooltip, .gt_swatches--select--soldout")) === null || _a === void 0 ? void 0 : _a.length)) {
                    $child.css({
                        display: "none",
                    });
                }
            });
            // border radius
            if (this.settings.colorVariantCircle) {
                $selector.css({
                    "border-radius": "100%",
                });
            }
            else {
                $selector.css({
                    "border-radius": this.settings.colorVariantRadius,
                });
            }
            // set color
            var color = variant.color;
            $selector.css({
                "user-select": "none",
                position: "relative",
            });
            // custom color
            var $colorElement = $("<div class='gt_swatches-segment-variant-style'></div>");
            $colorElement.css({
                "background-color": color,
                color: color,
                width: "100%",
                height: "100%",
                "border-radius": this.settings.colorVariantCircle ? "100%" : "calc(" + this.settings.colorVariantRadius + " - 2px)",
            });
            $selector.append($colorElement);
        }
    };
    /**
     * supportVariantColor
     */
    GtVariantsStyleV2.prototype.supportVariantImage = function () {
        var _this = this;
        // support variant color
        if (this.settings.imageVariantTitle) {
            var imageVariantTitleList = this.settings.imageVariantTitle.split(",");
            if (imageVariantTitleList && imageVariantTitleList.length) {
                imageVariantTitleList.forEach(function (title) {
                    var _a;
                    var titleTrim = title.trim();
                    // support select active cua atom product variant select
                    var $selectActiveVariant = (_a = _this.$el
                        .find(".gt_product-swatches--item[data-name=\"" + titleTrim + "\"]")) === null || _a === void 0 ? void 0 : _a.find(".gt_product-swatches-option-selected .gt_product-variant-option--selected-text");
                    if ($selectActiveVariant === null || $selectActiveVariant === void 0 ? void 0 : $selectActiveVariant.length) {
                        _this.findVariantImageAndSetUrl($selectActiveVariant);
                    }
                    var $selectors = _this.$el.find(".gt_swatches--select[data-name=\"" + titleTrim + "\"][data-value]").not("li");
                    if ($selectors === null || $selectors === void 0 ? void 0 : $selectors.length) {
                        _this.findVariantImageAndSetUrl($selectors);
                    }
                });
            }
        }
    };
    /**
     * findVariantImageAndSetUrl
     * @param $selectors $selector
     */
    GtVariantsStyleV2.prototype.findVariantImageAndSetUrl = function ($selectors) {
        var _a, _b;
        for (var i = 0; i < $selectors.length; i++) {
            var $selector = jQuery($selectors[i]);
            var value = $selector.attr("data-value");
            // value = value.replace(/'/gm, "\"");
            if (value) {
                var imageUrl = void 0;
                var $product = $selector.closest("[keyword=product], [data-keyword='product']");
                if ($product === null || $product === void 0 ? void 0 : $product.length) {
                    var productJson = $product.find(".ProductJson").text();
                    try {
                        var productJsonObject = JSON.parse(productJson);
                        if (((_a = productJsonObject.variants) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                            for (var i_1 = 0; i_1 < productJsonObject.variants.length; i_1++) {
                                var variantProduct = productJsonObject.variants[i_1];
                                if (variantProduct.options.includes(value) && ((_b = variantProduct.featured_image) === null || _b === void 0 ? void 0 : _b.src)) {
                                    imageUrl = variantProduct.featured_image.src;
                                    break;
                                }
                            }
                        }
                    }
                    catch (error) {
                        console.log("error ", error);
                    }
                }
                value = value.toLowerCase();
                value = value.replace(/'/gm, "").replace(/"/gm, "");
                var found = false;
                for (var j = 0; j < this.variants.length; j++) {
                    var variantTitle = this.variants[j].title;
                    var languages = this.variants[j].languages;
                    var image = this.variants[j].image;
                    if (variantTitle) {
                        variantTitle = variantTitle.toLowerCase();
                        if (value == variantTitle && image) {
                            found = true;
                            this.setImageToVariant($selector, image);
                        }
                        else if ((languages === null || languages === void 0 ? void 0 : languages.length) && image) {
                            for (var k = 0; k < languages.length; k++) {
                                var language = languages[k].toLowerCase();
                                if (language == value.toLowerCase()) {
                                    found = true;
                                    this.setImageToVariant($selector, image);
                                }
                            }
                        }
                    }
                }
                if (!found) {
                    this.setImageToVariant($selector, imageUrl);
                }
            }
        }
        for (var i = 0; i < $selectors.length; i++) {
            var $selector = jQuery($selectors[i]);
            this.supportTooltip($selector);
        }
    };
    /**
     * setImageToVariant
     * @param $selector dom select variant
     * @param imageUrl image url variant
     */
    GtVariantsStyleV2.prototype.setImageToVariant = function ($selector, imageUrl) {
        var typeAtomVariant = this.getTypeOfProductVariantAtom($selector);
        var customAtomVariantType = this.getTypeOfCustomVariantAtom($selector);
        if ((typeAtomVariant === "select" && customAtomVariantType !== "segment") || (typeAtomVariant === "segment" && customAtomVariantType === "select")) {
            if (imageUrl) {
                var $imageElement_1 = $("<div></div>");
                $imageElement_1.css({
                    position: "relative",
                    "user-select": "none",
                    "background-image": "url(\"" + imageUrl + "\")",
                    "background-repeat": "no-repeat",
                    "background-size": "contain",
                    "background-position": "center",
                    "background-color": "#fff",
                    "margin-right": "10px",
                    border: "1px solid currentcolor",
                });
                var $childs = $selector.find("*");
                if ($childs === null || $childs === void 0 ? void 0 : $childs.length) {
                    $childs.each(function () {
                        var _a;
                        var $child = jQuery(this);
                        if (!((_a = $child.closest(".gt_swatches--select--soldout")) === null || _a === void 0 ? void 0 : _a.length)) {
                            $child.css({
                                display: "none",
                            });
                        }
                    });
                }
                if (!this.settings.imageVariantSizeSelect) {
                    $imageElement_1.css({
                        "min-width": "",
                        width: "",
                        "min-height": "",
                        height: "",
                    });
                    setTimeout(function () {
                        var height = 24;
                        $imageElement_1.css({
                            "min-width": height + "px",
                            width: height + "px",
                            "min-height": height + "px",
                            height: height + "px",
                        });
                    }, 0);
                }
                else {
                    $imageElement_1.css({
                        "min-width": this.settings.imageVariantSizeSelect,
                        width: this.settings.imageVariantSizeSelect,
                        "min-height": this.settings.imageVariantSizeSelect,
                        height: this.settings.imageVariantSizeSelect,
                    });
                }
                if (this.settings.imageVariantCircle) {
                    $imageElement_1.css({
                        "border-radius": "100%",
                    });
                }
                else {
                    $imageElement_1.css({
                        "border-radius": this.settings.imageVariantRadius,
                    });
                }
                var value = $selector.attr("data-value");
                var $contentElement = $("<div></div>");
                $contentElement.addClass("gt-variant-style_custom-text");
                $contentElement.html(value);
                var $optionElement = $("<div></div>");
                $optionElement.append($imageElement_1);
                $optionElement.append($contentElement);
                $optionElement.addClass("gt-variant-style_custom");
                $optionElement.css({
                    display: "flex",
                    "align-items": "center",
                });
                $selector.append($optionElement);
            }
        }
        else {
            if (imageUrl) {
                $selector.css({
                    position: "relative",
                    "user-select": "none",
                    "background-image": "url(\"" + imageUrl + "\")",
                    "background-repeat": "no-repeat",
                    "background-size": "contain",
                    "background-position": "center",
                    "background-color": "#fff",
                });
                var $childs = $selector.find("*");
                if ($childs === null || $childs === void 0 ? void 0 : $childs.length) {
                    $childs.each(function () {
                        var _a;
                        var $child = jQuery(this);
                        if (!((_a = $child.closest(".gt_variant__tooltip, .gt_swatches--select--soldout")) === null || _a === void 0 ? void 0 : _a.length)) {
                            $child.css({
                                visibility: "hidden",
                            });
                        }
                    });
                }
                if (!this.settings.imageVariantSize) {
                    $selector.css({
                        "min-width": "",
                        width: "",
                        "min-height": "",
                        height: "",
                    });
                    setTimeout(function () {
                        var height = $selector.outerHeight();
                        $selector.css({
                            "min-width": height + "px",
                            width: height + "px",
                            "min-height": height + "px",
                            height: height + "px",
                        });
                    }, 0);
                }
                else {
                    $selector.css({
                        "min-width": this.settings.imageVariantSize,
                        width: this.settings.imageVariantSize,
                        "min-height": this.settings.imageVariantSize,
                        height: this.settings.imageVariantSize,
                    });
                }
                if (this.settings.imageVariantCircle) {
                    $selector.css({
                        "border-radius": "100%",
                    });
                }
                else {
                    $selector.css({
                        "border-radius": this.settings.imageVariantRadius,
                    });
                }
            }
        }
    };
    /**
     * supportTooltip
     * @param $selector dom select variant
     */
    GtVariantsStyleV2.prototype.supportTooltip = function ($selector) {
        var _this = this;
        if (this.settings.variantTooltip) {
            var typeAtomVariant = this.getTypeOfProductVariantAtom($selector);
            var customAtomVariantType = this.getTypeOfCustomVariantAtom($selector);
            var isCheckTooltip = $selector.find(".gt_variant__tooltip");
            if ((!isCheckTooltip || !isCheckTooltip.length) &&
                ((typeAtomVariant === "select" && customAtomVariantType === "segment") || (typeAtomVariant === "segment" && customAtomVariantType !== "select"))) {
                var value = $selector.attr("data-value");
                // value = value.replace(/'/gm, "\"");
                var $tooltip_1 = jQuery("<span class=\"gt_variant__tooltip\">" + value + "<span class=\"gt_variant__tooltip_arrow\"></span></span>");
                $tooltip_1.css({
                    position: "absolute",
                    bottom: "calc(100% + 10px)",
                    left: "50%",
                    background: "rgba(0,0,0,0.76)",
                    color: "#fff",
                    transform: "translateX(-50%)",
                    "border-radius": "4px",
                    padding: "0.4rem 0.75rem",
                    "white-space": "nowrap",
                    transition: "visibility 0s, opacity 0.25s",
                    visibility: "hidden",
                    opacity: "0",
                });
                $tooltip_1.find(".gt_variant__tooltip_arrow").css({
                    position: "absolute",
                    top: "100%",
                    left: "50%",
                    color: "#fff",
                    "margin-left": "-6px",
                    "border-top": "solid 6px rgba(0,0,0,0.76)",
                    "border-bottom": "solid 6px transparent",
                    "border-left": "solid 6px transparent",
                    "border-right": "solid 6px transparent",
                });
                $selector.append($tooltip_1);
                this.checkTooltipPosition($tooltip_1, $selector);
                $selector.off("mouseover.hoverVariant").on("mouseover.hoverVariant", function () {
                    _this.checkTooltipPosition($tooltip_1, $selector);
                    $tooltip_1.css({
                        visibility: "visible",
                        opacity: "1",
                    });
                    $selector.off("mouseleave.hoverVariant").on("mouseleave.hoverVariant", function () {
                        $tooltip_1.css({
                            visibility: "hidden",
                            opacity: "0",
                        });
                        $selector.off("mouseleave.hoverVariant");
                    });
                });
            }
        }
    };
    /**
     * checkTooltopPosition check position tooltip get out of frame
     * @param $tooltip current check tooltip dom
     * @param $selector $selector contain $tooltip
     */
    GtVariantsStyleV2.prototype.checkTooltipPosition = function ($tooltip, $selector) {
        if ($tooltip.offset().left + $tooltip.outerWidth() > $(window).width()) {
            $tooltip.css({
                left: "initial",
                right: 0,
                transform: "translateX(0)",
            });
            $tooltip.find(".gt_variant__tooltip_arrow").css({
                left: "initial",
                right: $selector.outerWidth() / 2 + "px",
                "margin-right": "-6px",
                "margin-left": "0px",
            });
        }
        else if ($tooltip.offset().left < 0) {
            $tooltip.css({
                left: 0,
                transform: "translateX(0)",
            });
            $tooltip.find(".gt_variant__tooltip_arrow").css({
                left: $selector.outerWidth() / 2 + "px",
            });
        }
    };
    /**
     * support variant sale tag
     */
    GtVariantsStyleV2.prototype.supportVariantSaleTag = function () {
        var _this = this;
        // support variant color
        if (!this.settings.variantSaleTag) {
            return;
        }
        // find product
        var $products = this.$el.find("[keyword=product], [data-keyword='product']");
        if (!($products === null || $products === void 0 ? void 0 : $products.length)) {
            return;
        }
        // each product section
        $products.each(function (_, productElement) {
            var $selectors = $(productElement).find(".gt_swatches--select[data-name=\"" + _this.settings.variantSaleTagTitle + "\"][data-value]").not("li");
            if (!($selectors === null || $selectors === void 0 ? void 0 : $selectors.length)) {
                return;
            }
            $selectors.css({
                position: "relative",
                "min-width": "120px",
                "min-height": "50px",
                display: "flex",
                "align-items": "center",
                "justify-content": "center",
                overflow: "visible",
            });
            $selectors.css({
                "margin-top": "30px",
            });
            // get product json
            var productJson = $(productElement).find(".ProductJson").text();
            var productJsonObject = null;
            try {
                productJsonObject = JSON.parse(productJson);
            }
            catch (e) {
                console.log("error: ", e);
            }
            // get current state of other variant types
            var $otherVariantTypes = $(productElement)
                .find(".gt_product-swatches--options, .gt_product-variant--options")
                .not(":has(> [data-name='" + _this.settings.variantSaleTagTitle + "'])");
            var currentOptionState = ($otherVariantTypes === null || $otherVariantTypes === void 0 ? void 0 : $otherVariantTypes.length) ? Array.from($otherVariantTypes.map(function (_, options) { return $(options).find(".gt_swatches--select.gt_active").attr("data-value"); }))
                : [];
            // each option in current variant type of current product
            $selectors.each(function (_, selectorElement) {
                var $selector = $(selectorElement);
                var value = $selector.attr("data-value"); //.replace(/'/gm, "\"");
                if (!value || $selector.hasClass("gt_soldout")) {
                    if ($selector.has(".gt_variant-style-sale-tag").length) {
                        $selector.find(".gt_variant-style-sale-tag").remove();
                    }
                    return;
                }
                // calculate sale value
                var currentVariant = productJsonObject === null || productJsonObject === void 0 ? void 0 : productJsonObject.variants.find(function (variant) { return __spreadArrays(currentOptionState, [value]).every(function (option) { return variant.options.includes(option); }); });
                if (!currentVariant) {
                    if ($selector.has(".gt_variant-style-sale-tag").length) {
                        $selector.find(".gt_variant-style-sale-tag").remove();
                    }
                    return;
                }
                var saleValue = Math.round(((currentVariant.compare_at_price - currentVariant.price) / currentVariant.compare_at_price) * 100);
                // update value if sale tag has been exist
                if ($selector.has(".gt_variant-style-sale-tag").length) {
                    if (saleValue <= 0) {
                        $selector.find(".gt_variant-style-sale-tag").remove();
                    }
                    else {
                        $selector.find(".gt_variant-style-sale-tag").text(_this.settings.variantSaleTagFormat.replace("[!Value!]", saleValue.toString()));
                    }
                    return;
                }
                if (saleValue <= 0) {
                    return;
                }
                // create and show sale tag
                var $saleTag = $("<div class='gt_variant-style-sale-tag'>" + _this.settings.variantSaleTagFormat.replace("[!Value!]", saleValue.toString()) + "</div>");
                $saleTag.css({
                    position: "absolute",
                    top: "-20px",
                    left: "50%",
                    transform: "translateX(-50%)",
                    "min-width": "70px",
                    height: "30px",
                    background: _this.settings.variantSaleTagBackgroundColor,
                    color: _this.settings.variantSaleTagTextColor,
                    "border-radius": _this.settings.variantSaleTagBorderRadius,
                    display: "flex",
                    "align-items": "center",
                    "justify-content": "center",
                    "line-height": "1em",
                    padding: "0 2px",
                });
                $selector.append($saleTag);
            });
        });
    };
    /**
     * listen change variant update sale tag
     */
    GtVariantsStyleV2.prototype.listenChangeVariantUpdateSaleTag = function () {
        var _this = this;
        var $products = this.$el.find("[keyword='product'], [data-keyword='product']");
        if (!($products === null || $products === void 0 ? void 0 : $products.length)) {
            return;
        }
        $products.each(function (_, productElement) {
            var $productJson = $(productElement).find(".ProductJson");
            if (!($productJson === null || $productJson === void 0 ? void 0 : $productJson.length)) {
                return;
            }
            window.store.change("variant" + $productJson.attr("data-id"), _this.supportVariantSaleTag.bind(_this));
        });
    };
    /**
     * getTypeOfProductVariantAtom
     * @param $selector product variant item
     * @returns string type cua atom product variant
     */
    GtVariantsStyleV2.prototype.getTypeOfProductVariantAtom = function ($selector) {
        var _a;
        var $productSwatches = $selector.closest(".gt_product-swatches");
        return (_a = $productSwatches === null || $productSwatches === void 0 ? void 0 : $productSwatches.attr("data-type")) !== null && _a !== void 0 ? _a : "segment";
    };
    /**
     * getTypeOfCustomVariantAtom
     * @param $selector product variant item
     * @returns type cua custom type atom
     */
    GtVariantsStyleV2.prototype.getTypeOfCustomVariantAtom = function ($selector) {
        var $customSelectTypeWrapper = $selector.closest("*[data-type='custom-select-style']");
        if ($customSelectTypeWrapper && $customSelectTypeWrapper.length) {
            return "select";
        }
        var $customSegmentTypeWrapper = $selector.closest("*[data-type='custom-segment-style']");
        if ($customSegmentTypeWrapper && $customSegmentTypeWrapper.length) {
            return "segment";
        }
        return "";
    };
    /**
     * getVariants
     * @returns variants
     */
    GtVariantsStyleV2.prototype.getVariants = function () {
        var defaultVariants = [];
        // Merge color
        var customColors = this.settings.colors;
        if (customColors === null || customColors === void 0 ? void 0 : customColors.length) {
            for (var i = 0; i < customColors.length; i++) {
                var title = customColors[i].title;
                var color = customColors[i].color;
                if (title && color) {
                    title = title.toLowerCase();
                    var variant = {
                        title: title,
                        color: color,
                        languages: [],
                        image: "",
                    };
                    var found = false;
                    for (var j = 0; j < defaultVariants.length; j++) {
                        if (defaultVariants[j].title == title) {
                            found = true;
                            defaultVariants[j].color = variant.color; // replace color
                            break;
                        }
                    }
                    if (!found) {
                        defaultVariants.push(variant);
                    }
                }
            }
        }
        // Merge image
        var customImages = this.settings.images;
        if (customImages === null || customImages === void 0 ? void 0 : customImages.length) {
            for (var i = 0; i < customImages.length; i++) {
                var title = customImages[i].title;
                var image = customImages[i].image;
                if (title && image) {
                    title = title.toLowerCase();
                    var variant = {
                        title: title,
                        color: "",
                        languages: [],
                        image: image,
                    };
                    var found = false;
                    for (var j = 0; j < defaultVariants.length; j++) {
                        if (defaultVariants[j].title == title) {
                            found = true;
                            defaultVariants[j].image = variant.image; // replace image
                            break;
                        }
                    }
                    if (!found) {
                        defaultVariants.push(variant);
                    }
                }
            }
        }
        return defaultVariants;
    };
    /**
     * filterNoneExistOrSoldoutVariant ẩn các variant không tồn tại hoac soldout
     * @param callback callback khi ẩn xong các variant
     * @returns null
     */
    GtVariantsStyleV2.prototype.filterNoneExistOrSoldoutVariant = function (callback) {
        var _this = this;
        var $products = this.$el.find("[keyword='product'], [data-keyword='product']");
        if ($products === null || $products === void 0 ? void 0 : $products.length) {
            var _loop_1 = function (i) {
                var $product = jQuery($products[i]);
                if ($product === null || $product === void 0 ? void 0 : $product.length) {
                    var productJsonObject_1;
                    var productJson = $product.find(".ProductJson").text();
                    try {
                        productJsonObject_1 = JSON.parse(productJson);
                    }
                    catch (error) {
                        console.log("error ", error);
                    }
                    // if all sold out
                    if (productJsonObject_1 && productJsonObject_1.variants.length > 1 && (productJsonObject_1.options.length > 1 || this_1.settings.hideSoldOutVariants)) {
                        if (this_1.settings.mode === "dev") {
                            setTimeout(function () {
                                // cache current variant
                                _this.cacheActiveVariants["variant" + productJsonObject_1.id] = window.SOLID.store.getState("variant" + productJsonObject_1.id);
                                // hidden none exist variant init
                                _this.hideNoneExistOrSoldoutVariantInit($product, productJsonObject_1);
                                _this.listenChangeExistedVariant($product, productJsonObject_1);
                            }, 10);
                        }
                        else {
                            // cache current variant
                            this_1.cacheActiveVariants["variant" + productJsonObject_1.id] = window.SOLID.store.getState("variant" + productJsonObject_1.id);
                            // hidden none exist variant init
                            this_1.hideNoneExistOrSoldoutVariantInit($product, productJsonObject_1);
                            this_1.listenChangeExistedVariant($product, productJsonObject_1);
                        }
                    }
                    else {
                        // show variant atom
                        var $variantsWrapper = $product.find(".gt_product-variant");
                        $variantsWrapper.addClass("gt_show_product-variant");
                    }
                }
            };
            var this_1 = this;
            for (var i = 0; i < $products.length; i++) {
                _loop_1(i);
            }
        }
        callback();
    };
    /**
     * hideNoneExistOrSoldoutVariantInit: ẩn những option không tồn tại khi mới khởi tạo
     * @param $product $dom cua section product
     * @param productJson productJson
     */
    GtVariantsStyleV2.prototype.hideNoneExistOrSoldoutVariantInit = function ($product, productJson) {
        var currentVariant = window.SOLID.store.getState("variant" + productJson.id);
        this.checkDomToHiddenNoneExistOrSoldoutVariant($product, productJson, currentVariant);
        // show variant atom
        var $variantsWrapper = $product.find(".gt_product-variant");
        $variantsWrapper.addClass("gt_show_product-variant");
    };
    /**
     * checkDomToHiddenNoneExistOrSoldoutVariant check dom để ẩn những item không tồn tại
     * @param $product $dom của section product
     * @param productJson productJson
     * @param currentVariant variant hiện tại của section
     */
    GtVariantsStyleV2.prototype.checkDomToHiddenNoneExistOrSoldoutVariant = function ($product, productJson, currentVariant) {
        var $variants = $product.find(".gt_swatches--select[data-name][data-value]").not("li");
        var option1List = this.getListOptionsAvailable({ productJson: productJson, order: 1 });
        var option2List = this.getListOptionsAvailable({ productJson: productJson, order: 2, firstOption: currentVariant === null || currentVariant === void 0 ? void 0 : currentVariant.option1 });
        var option3List = this.getListOptionsAvailable({ productJson: productJson, order: 3, firstOption: currentVariant === null || currentVariant === void 0 ? void 0 : currentVariant.option1, secondOption: currentVariant === null || currentVariant === void 0 ? void 0 : currentVariant.option2 });
        // hide all variant
        $variants.addClass("gt_option_variant_none_existed");
        $variants.removeClass("gt_option_variant_existed");
        $variants.removeClass("gt_option_variant_soldout");
        option1List.forEach(function (option) {
            var $option = $product.find(".gt_swatches--select[data-name][data-value=\"" + option.name.replace(/"/g, "\\\"") + "\"]").not("li");
            $option.removeClass("gt_option_variant_none_existed");
            $option.addClass("gt_option_variant_existed");
            if (!option.available) {
                $option.addClass("gt_option_variant_soldout");
            }
        });
        option2List.forEach(function (option) {
            var $option = $product.find(".gt_swatches--select[data-name][data-value=\"" + option.name.replace(/"/g, "\\\"") + "\"]").not("li");
            $option.removeClass("gt_option_variant_none_existed");
            $option.addClass("gt_option_variant_existed");
            if (!option.available) {
                $option.addClass("gt_option_variant_soldout");
            }
        });
        option3List.forEach(function (option) {
            var $option = $product.find(".gt_swatches--select[data-name][data-value=\"" + option.name.replace(/"/g, "\\\"") + "\"]").not("li");
            $option.removeClass("gt_option_variant_none_existed");
            $option.addClass("gt_option_variant_existed");
            if (!option.available) {
                $option.addClass("gt_option_variant_soldout");
            }
        });
    };
    /**
     * getListOptionsAvailable lấy ra các option tồn tại
     * @param params params
     * @param params.productJson productJson
     * @param params.firstOption option1
     * @param params.secondOption option2
     * @param params.order thứ tự của option
     * @returns list option tồn tại
     */
    GtVariantsStyleV2.prototype.getListOptionsAvailable = function (params) {
        var optionList = [];
        params.productJson.variants.forEach(function (variant) {
            var _a, _b, _c, _d;
            if (params.order === 1) {
                if (!optionList.find(function (item) { return item.name === variant.option1; })) {
                    optionList.push({
                        name: variant.option1,
                        available: params.productJson.variants.find(function (item) { return item.option1 === variant.option1 && item.available; }) ? true : false,
                    });
                }
            }
            else if (params.order === 2 && ((_b = (_a = params.productJson) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.length) >= 2) {
                if (variant.option1 === params.firstOption) {
                    optionList.push({
                        name: variant.option2,
                        available: params.productJson.variants.find(function (item) { return item.option1 === variant.option1 && item.option2 === variant.option2 && item.available; }) ? true : false,
                    });
                }
            }
            else if (((_d = (_c = params.productJson) === null || _c === void 0 ? void 0 : _c.options) === null || _d === void 0 ? void 0 : _d.length) === 3) {
                if (variant.option1 === params.firstOption && variant.option2 == params.secondOption && variant.option3) {
                    optionList.push({
                        name: variant.option3,
                        available: variant.available,
                    });
                }
            }
        });
        return optionList;
    };
    /**
     * listenChangeExistedVariant: lắng nghe khi change variant và ẩn các none exist/soldout variant đi
     * @param $product $dom của section product
     * @param productJson productJson
     */
    GtVariantsStyleV2.prototype.listenChangeExistedVariant = function ($product, productJson) {
        var _this = this;
        window.SOLID.store.subscribe("variant" + productJson.id, function (variant) {
            var _a, _b;
            var cacheVariant = _this.cacheActiveVariants["variant" + productJson.id];
            // get active in dom trong các trường hợp variant id = 0
            var option1 = productJson.options[0];
            var option2 = productJson.options[1];
            if (_this.settings.mode === "dev") {
                option1 = (_a = productJson.options[0]) === null || _a === void 0 ? void 0 : _a.name;
                option2 = (_b = productJson.options[1]) === null || _b === void 0 ? void 0 : _b.name;
            }
            var $option1Active = $product
                .find(".gt_swatches--select[data-name=\"" + option1 + "\"][data-value].gt_active, .gt_swatches--select[data-name=\"" + option1 + "\"][data-value].gf_active")
                .not("li");
            var option1Active = $option1Active.attr("data-value");
            var $option2Active = $product
                .find(".gt_swatches--select[data-name=\"" + option2 + "\"][data-value].gt_active, .gt_swatches--select[data-name=\"" + option2 + "\"][data-value].gf_active")
                .not("li");
            var option2Active = $option2Active.attr("data-value");
            // check xem variant có tồn tại không. nếu không active tới 1 variant tồn tại
            // hoặc check xem variant có available không. nếu không active tới 1 variant available 
            if ((!_this.settings.hideSoldOutVariants && variant.id) || (_this.settings.hideSoldOutVariants && variant.available)) {
                _this.cacheActiveVariants["variant" + productJson.id] = variant;
                _this.checkDomToHiddenNoneExistOrSoldoutVariant($product, productJson, variant);
            }
            else {
                var currentCheckVariant_1;
                if ((cacheVariant === null || cacheVariant === void 0 ? void 0 : cacheVariant.option1) !== option1Active) {
                    if (option1Active && option2Active) {
                        _this.cacheActiveVariants["variant" + productJson.id] = __assign(__assign({}, variant), { option1: option1Active, option2: option2Active });
                    }
                    for (var i = 0; i < productJson.variants.length; i++) {
                        var checkVariant = productJson.variants[i];
                        if (checkVariant.option1 === option1Active && checkVariant.available) {
                            // cần set ngay để không bị nháy ở giao diện
                            window.SOLID.store.dispatch("variant" + productJson.id, checkVariant);
                            currentCheckVariant_1 = checkVariant;
                            break;
                        }
                    }
                    // nếu không phải hide sold out variant và ko tìm được variant nào available thì tìm variant tồn tại
                    if (!_this.settings.hideSoldOutVariants && !currentCheckVariant_1) {
                        for (var i = 0; i < productJson.variants.length; i++) {
                            var checkVariant = productJson.variants[i];
                            if (checkVariant.option1 === option1Active && checkVariant.id) {
                                // cần set ngay để không bị nháy ở giao diện
                                window.SOLID.store.dispatch("variant" + productJson.id, checkVariant);
                                currentCheckVariant_1 = checkVariant;
                                break;
                            }
                        }
                    }
                }
                else if ((cacheVariant === null || cacheVariant === void 0 ? void 0 : cacheVariant.option2) !== option2Active && productJson.options.length > 2) {
                    if (option1Active && option2Active) {
                        _this.cacheActiveVariants["variant" + productJson.id] = __assign(__assign({}, variant), { option1: option1Active, option2: option2Active });
                    }
                    for (var i = 0; i < productJson.variants.length; i++) {
                        var checkVariant = productJson.variants[i];
                        if (checkVariant.option1 === option1Active && checkVariant.option2 === option2Active && checkVariant.available) {
                            // cần set ngay để không bị nháy ở giao diện
                            window.SOLID.store.dispatch("variant" + productJson.id, checkVariant);
                            currentCheckVariant_1 = checkVariant;
                            break;
                        }
                    }
                    // nếu không phải hide sold out variant và ko tìm được variant nào available thì tìm variant tồn tại
                    if (!_this.settings.hideSoldOutVariants && !currentCheckVariant_1) {
                        for (var i = 0; i < productJson.variants.length; i++) {
                            var checkVariant = productJson.variants[i];
                            if (checkVariant.option1 === option1Active && checkVariant.option2 === option2Active && checkVariant.id) {
                                // cần set ngay để không bị nháy ở giao diện
                                window.SOLID.store.dispatch("variant" + productJson.id, checkVariant);
                                currentCheckVariant_1 = checkVariant;
                                break;
                            }
                        }
                    }
                }
                // trg hợp sự kiện set variant sold out có nhiều func => đảm bảo func này chạy cuối
                setTimeout(function () {
                    (currentCheckVariant_1 === null || currentCheckVariant_1 === void 0 ? void 0 : currentCheckVariant_1.available) && window.SOLID.store.dispatch("variant" + productJson.id, currentCheckVariant_1);
                }, 10);
            }
        });
    };
    /**
     * cacheLib cache function call lib gtVariantStyle for atom/section/widget call again
     * @param params params of libs
     * @returns null
     */
    GtVariantsStyleV2.prototype.cacheLib = function (params) {
        window.SOLID.public = window.SOLID.public || {};
        window.SOLID.public["addon_variant_style"] = window.SOLID.public["addon_variant_style"] || [];
        if (this.settings.noCache) {
            return;
        }
        window.SOLID.public["addon_variant_style"].push(this.createCacheFunction(params));
    };
    /**
     * createCacheFunction
     * @param params param of libs
     * @returns function cache
     */
    GtVariantsStyleV2.prototype.createCacheFunction = function (params) {
        return function () {
            new GtVariantsStyleV2({
                $element: params.$element,
                options: __assign(__assign({}, params.options), { noCache: true })
            });
        };
    };
    return GtVariantsStyleV2;
}());
/**
 * gtProductSwatchesColor
 * @param params params
 * @returns instance
 */
window.SOLID.library.gtVariantsStyleV2 = function (params) {
    return new GtVariantsStyleV2(params);
};


/***/ })

/******/ });
});
        }
        funcLib109();
      } catch(e) {
        console.error("Error lib id: 109" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib4 = function() {
          "use strict";

/* gtProductImageFeature */
(function (jQuery) {
  var gtProductFeatureImage = function (element, options) {
    var defaults = {
      classFeatureImage: null,
      classImages: null,
      carousel: null,
      owlCarousel: null,
    };

    this.settings = {};

    var $element = jQuery(element);
    var _this = this;
    var _productJson;

    this.init = function () {
      this.settings = jQuery.extend({}, defaults, options);

      var productJson = $element.closest("[keyword='product'], [data-keyword='product']").find(".ProductJson").text();

      try {
        if (productJson) {
          _productJson = JSON.parse(productJson);
        }
      } catch (e) {
        console.log(e);
      }

      if ($element.find(_this.settings.carousel) && $element.find(_this.settings.carousel).length) {
        $element.find(_this.settings.carousel).owlCarousel(_this.settings.owlCarousel);
      }

      _this.event();
      _this.listen();
    };
    this.event = function () {

    };
    this.listen = function () {
      var store = window.store;

      if (_productJson) {
        store.change("variant" + _productJson.id, function (variant) {
          if (variant && variant.variant_init) {
            return;
          }
          if (variant.featured_image && variant.featured_image.src) {
            var src = variant.featured_image.src;

            if (_this.settings.classFeatureImage) {
              $element.find(_this.settings.classFeatureImage).attr("src", src);
            }
            if (_this.settings.carousel) {
              for (var i = 0; i < $element.find(_this.settings.classImages).length; i++) {
                var $img = $element.find(_this.settings.classImages).eq(i);
                var id = $img.attr("data-id");

                if (id == variant.featured_image.id) {
                  if (_this.settings.carousel) {
                    $element.find(_this.settings.carousel).trigger("to.owl.carousel", [i, 200, true]);
                  }
                  break;
                }
              }
            }
          }
        });
      }
    };

    this.init();
  };

  jQuery.fn.gtProductFeatureImage = function (options) {
    return this.each(function () {
      var plugin = new gtProductFeatureImage(this, options, jQuery);

      jQuery(this).data("gtproductfeatureimage", plugin);
    });
  };
})(jQuery);

        }
        funcLib4();
      } catch(e) {
        console.error("Error lib id: 4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib115 = function() {
          (function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["webpackNumbers"] = factory();
	else
		root["webpackNumbers"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ({

/***/ 3:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * GtAnimationsV2
 * Animation cho accordion (slideUp, slideDown)
 * Update quantity của product
 */
var GtAnimationsV2 = /** @class */ (function () {
    /**
     * constructor
     * @param params setting cua lib
     */
    function GtAnimationsV2(params) {
        this.$element = $(params.$element);
        this.settings = __assign(__assign({}, this.settings), params.settings);
        this.init();
    }
    /**
     * slideUp
     * @param callback callback when transition end
     */
    GtAnimationsV2.prototype.slideUp = function (callback) {
        var _this = this;
        this.$element.css({
            "max-height": this.getMaxHeight(),
        });
        this.$element
            .off("webkitTransitionEnd oTransitionEnd transitionend msTransitionEnd")
            .on("webkitTransitionEnd oTransitionEnd transitionend msTransitionEnd", function () {
            callback && callback();
            _this.$element.css({
                padding: "",
                margin: "",
                transition: "",
            });
        });
        setTimeout(function () {
            _this.$element.css({
                "max-height": "0px",
                padding: "0px",
                margin: "0px",
                transition: "all " + _this.settings.duration + "s",
            });
        }, 5);
    };
    /**
     * slideDown
     * @param callback callback when transition end
     */
    GtAnimationsV2.prototype.slideDown = function (callback) {
        var _this = this;
        var maxHeight = this.getMaxHeight();
        this.$element.css({
            "max-height": "0px",
            padding: "0px",
            margin: "0px",
        });
        this.$element
            .off("webkitTransitionEnd oTransitionEnd transitionend msTransitionEnd")
            .on("webkitTransitionEnd oTransitionEnd transitionend msTransitionEnd", function () {
            callback && callback();
            _this.$element.css({
                transition: "",
            });
        });
        setTimeout(function () {
            _this.$element.css({
                "max-height": maxHeight,
                padding: "",
                margin: "",
                transition: "all " + _this.settings.duration + "s",
            });
        }, 5);
    };
    /**
     * init: function init when call libs
     */
    GtAnimationsV2.prototype.init = function () {
        // add transition
        if (this.$element && this.$element.length) {
            this.$element.css({
                overflow: "hidden",
            });
        }
    };
    /**
     * getMaxHeight get max height of element
     * @returns maxheight
     */
    GtAnimationsV2.prototype.getMaxHeight = function () {
        return "calc(" + this.$element.get(0).scrollHeight + "px + " + this.$element.css("margin-top") + " + " + this.$element.css("margin-bottom") + " + " + this.$element.css("padding-top") + " + " + this.$element.css("padding-bottom") + ")";
    };
    return GtAnimationsV2;
}());
/**
 * GtAnimationsV2
 * @param params setting cua lib
 * @returns lib
 */
window.SOLID.library.gtAnimationsV2 = function (params) {
    return new GtAnimationsV2(params);
};
exports.default = {};


/***/ })

/******/ });
});
        }
        funcLib115();
      } catch(e) {
        console.error("Error lib id: 115" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib7 = function() {
          "use strict";

/* gtProductPrice */
(function (jQuery) {
  var gtProductPrice = function (element, options) {
    var defaults = {
      classCurrentPrice: null,
      classComparePrice: null,
      syncQuantityPrice: true, // if syncQuantityPrice is true, change quantity trigger change price
      syncQuantityComparePrice: true,
      replacePriceForCurrentPrice: true,
      replacePriceForComparePrice: true,
      hideZeroPrice: false,
    };

    this.settings = {};

    var $element = jQuery(element).parent();
    var _this = this;
    var _productJson;

    this.init = function () {
      this.settings = jQuery.extend({}, defaults, options);

      var productJson = $element.closest("[keyword='product'], [data-keyword='product']").find(".ProductJson").text();

      try {
        if (productJson) {
          _productJson = JSON.parse(productJson);
          _this.Init();
          _this.listen();
        }
      } catch (e) {
        console.log(e);
      }
    };

    this.Init = function () {
      var $currentPrice = $element.find(_this.settings.classCurrentPrice);
      var $comparePrice = $element.find(_this.settings.classComparePrice);
      var priceDefaults = $currentPrice.attr("data-currentprice");
      if (_this.settings.classCurrentPrice && _this.settings.replacePriceForCurrentPrice) {
        var price = _this.formatMoneyForSpecificPriceType(priceDefaults, "price");
        $currentPrice.html(price);
      }
      if (_this.settings.classComparePrice && _this.settings.replacePriceForComparePrice) {
        var $comparePrice = $element.find(_this.settings.classComparePrice);
        if ($comparePrice && $comparePrice.length) {
          var comparePriceDefaults = $comparePrice.attr("data-currentprice");
          var comparePrice = _this.formatMoneyForSpecificPriceType(comparePriceDefaults, "comparePrice");
          // so sanh comparePrice với price, chỉ hiển thị comparePrice khi comparePrice > price
          if (comparePrice && (!_this.settings.classCurrentPrice || parseFloat(comparePriceDefaults) > parseFloat(priceDefaults))) {
            $comparePrice.addClass("gf_active");
            $comparePrice.addClass("gt_active");
            $comparePrice.html(comparePrice);
          }
        }
      }
      if (_this.settings.hideZeroPrice) {
        if (parseFloat(priceDefaults)>0) {
          $currentPrice.show();
        } else {
          $currentPrice.hide();
          $comparePrice.hide();
        }
      }
    };

    this.listen = function () {
      var store = window.store;
      if (_productJson) {
        store.change("variant" + _productJson.id, function (variant) {
          var price = variant.price;
          price = _this.formatMoneyForSpecificPriceType(price, "price");
          var $currentPrice = $element.find(_this.settings.classCurrentPrice);
          var $comparePrice = $element.find(_this.settings.classComparePrice);
          if (_this.settings.classCurrentPrice && _this.settings.replacePriceForCurrentPrice) {
            // Trong trường hợp khi code section/addon muốn thay đổi giá trị và ko muốn tự update lại giá theo store thì thêm class dontChangePrice vào classCurrentPrice
            // VD: Tính năng Price Display Logic = Only each trong Bundle Section 9169
            if ($currentPrice && $currentPrice.length && !$currentPrice.hasClass("dontChangePrice")) {
              $currentPrice.attr("data-currentprice", variant.price);
              $currentPrice.html(price);
            }
          }

          if (_this.settings.classComparePrice && _this.settings.replacePriceForComparePrice) {
            if ($comparePrice && $comparePrice.length) {
              if (variant.compare_at_price && variant.compare_at_price - variant.price > 0) {
                var comparePrice = variant.compare_at_price;
                comparePrice = _this.formatMoneyForSpecificPriceType(comparePrice, "comparePrice");
                $comparePrice.addClass("gf_active");
                $comparePrice.addClass("gt_active");
                $comparePrice.html(comparePrice);
                $comparePrice.attr("data-currentprice", variant.compare_at_price);
              } else {
                $comparePrice.removeClass("gf_active");
                $comparePrice.removeClass("gt_active");
              }
            }
          }

          if (_this.settings.hideZeroPrice) {
            if (parseFloat($currentPrice.attr("data-currentprice"))>0) {
              $currentPrice.show();
            } else {
              $currentPrice.hide();
              $comparePrice.hide();
            }
          }
        });

        store.change("quantity" + _productJson.id, function () {
          _this.Init();
        });
      }

      store.change("dataCurrency", function () {
        _this.Init();
      });
    };

    // Get price with quantity
    this.getPriceWithQuantity = function (price) {
      if (_productJson) {
        var quantityProduct = window.store.get("quantity" + _productJson.id);
        quantityProduct = Number(quantityProduct);
        if (!quantityProduct || isNaN(quantityProduct)) {
          quantityProduct = 1;
        }
        price = Number(price) * quantityProduct;
      }
      return price;
    };

    // Format price
    this.formatMoneyForSpecificPriceType = function (price, type) {
      if ((type === "price" && _this.settings.syncQuantityPrice) || (type === "comparePrice" && _this.settings.syncQuantityComparePrice)) {
        price = _this.getPriceWithQuantity(price);
      } else {
        price = Number(price);
      }
      var dataCurrency = window.store.get("dataCurrency");
      var format = __GemSettings.money;
      if (dataCurrency) {
        price = Shopify.gemFormatMoney(price, dataCurrency.currency, dataCurrency.data);
      } else {
        price = Shopify.formatMoney(price, format);
      }
      return price;
    };
    this.init();
  };

  jQuery.fn.gtProductPrice = function (options) {
    return this.each(function () {
      var plugin = new gtProductPrice(this, options, jQuery);
      jQuery(this).data("gtproductprice", plugin);
    });
  };
})(jQuery);

        }
        funcLib7();
      } catch(e) {
        console.error("Error lib id: 7" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib68 = function() {
          "use strict";

/* gtCartV3 */
(function (jQuery) {
  var gtCartV3 = function (element, options) {
    var defaults = {
      id: null, // id secton
      mode: null, // dev or production
      htmlItemCart: null, // html line_item

      htmlItemProperties: null, // html properties
      classContainerProperties: null, // thẻ wapper của properties
      classNameItemProperty: null, // name của một property
      classValueItemProperty: null, // value của một property

      classContainer: null, // class bao ngoài của các line_item và total
      classCartEmpty: null, // class cart empty
      classCountItems: null, // số lượng item trong cart
      classItemCart: null, // class của một line_item
      classProductJson: null, // class chứa variant json
      classContentPage: null, // class bao ngoài cả cart cả title giúp chuyển sang dạng empty
      classImage: null, // image của một line_item
      classTitle: null, // title của một line_item
      classUrlItem: null, // href của một product ở line_item
      classVariants: null, // variant của một line_item
      classInputQuantity: null, // input của một line_item
      priceItemDisplay: null, // chế độ hiển thị after discount hoặc compare price
      classPriceItem: null, // price của một line_item
      classPriceCompareItem: null, // compare price của một line_item
      classPriceOriginalItem: null, // original price của một line_item
      classPriceLineItem: null, // total price của một line_item
      classPriceCompareLineItem: null, // total compare của một line_item
      classPriceOriginalLineItem: null, // total compare của một line_item

      classPriceTotalCart: null, // total cart
      classWapperSubtotal: null, // thẻ bao ngoài của subTotal giúp ẩn khi giá subTotal bằng total
      classPriceSubtotalCart: null, // subtotal cart
      classSubtotalPercent: null, // phân trăm giảm giá (subtotal - total) cart
      classPriceSavedCart: null, // tiền giảm được (subtotal - total) cart
    };

    this.settings = {};

    var $element = jQuery(element);
    var _this = this;
    var _formatMoney;

    this.init = function () {
      this.settings = jQuery.extend({}, defaults, options);
      _formatMoney = __GemSettings.money;

      var dataCurrency = window.SOLID.store.getState("dataCurrency");

      var cart = window.SOLID.store.getState("cart");
      // if (dataCurrency) {
      //   if (cart) {
      //     _this.updateSaved(cart);
      //     _this.updatePriceItem(cart);
      //     _this.updatePriceTotal(cart);
      //   } else {
      //     gfTheme.getCart(function (cart, error) {
      //       if (!error) {
      //         _this.updateSaved(cart);
      //         _this.updatePriceTotal(cart);
      //         _this.updatePriceItem(cart);
      //         _this.disableItemDiscountBuyXGetY(cart);
      //       }
      //     });
      //   }
      // }
      if (cart) {
        if (dataCurrency) {
          _this.updateSaved(cart);
          _this.updatePriceItem(cart);
          _this.updatePriceTotal(cart);
        }
        _this.disableItemDiscountBuyXGetY(cart);
      } else {
        gfTheme.getCart(function (cart, error) {
          if (!error) {
            if (dataCurrency) {
              _this.updateSaved(cart);
              _this.updatePriceItem(cart);
              _this.updatePriceTotal(cart);
            }
            _this.disableItemDiscountBuyXGetY(cart);
          }
        });
      }
      _this.listen();
    };

    this.listen = function () {
      window.SOLID.store.subscribe("gtCartInput", function (cart) {
        if (_this.settings.mode == "production") {
          window.SOLID.cart.UpdateCart(cart);
          _this.checkCartAddNewItem(cart, function () {
            _this.checkCartNotFound(cart);
            _this.updateRemoveItem(cart);
            _this.disableItemDiscountBuyXGetY(cart);
            _this.updateSaved(cart);
            _this.updateNumberTotal(cart);
            _this.updatePriceItem(cart);
            _this.updatePriceTotal(cart);
          });
        }
      });

      window.SOLID.store.subscribe("dataCurrency", function () {
        gfTheme.getCart(function (cart, error) {
          if (!error) {
            _this.checkCartAddNewItem(cart, function () {
              _this.updateSaved(cart);
              _this.updatePriceTotal(cart);
              _this.updatePriceItem(cart);
            });
          }
        });
      });

      window.SOLID.store.subscribe("gtCartDiscountPrice", function (infoDiscount) {
        // { price, cart }
        _this.checkCartAddNewItem(infoDiscount.cart, function () {
          _this.updateSaved(infoDiscount.cart);
          _this.updatePriceTotal(infoDiscount.cart);
        });
      });
    };

    this.checkCartNotFound = function (cart) {
      if (cart && cart.items && cart.items.length) {
        $element.find(_this.settings.classContentPage).addClass("gt_active");
        $element.find(_this.settings.classCartEmpty).removeClass("gt_active");
      } else {
        // Cart not found
        $element.find(_this.settings.classContentPage).removeClass("gt_active");
        $element.find(_this.settings.classCartEmpty).addClass("gt_active");
      }
    };

    this.checkCartAddNewItem = function (cart, callback) {
      var $items = $element.find(_this.settings.classItemCart);
      var cartItems = [];
      if (cart && cart.items && cart.items.length) {
        cartItems = cart.items;
      }
      var isContinue = true;
      if ($items && $items.length && cartItems && cartItems.length) {
        var mapCheck = {};
        if (cartItems && cartItems.length) {
          for (var j = 0; j < cartItems.length; j++) {
            var cartItem = cartItems[j];
            mapCheck[cartItem.key] = false;
          }
        }
        for (var i = 0; i < $items.length; i++) {
          var $item = jQuery($items[i]);
          var key = $item.attr("data-key");
          if (mapCheck[key] === false) {
            mapCheck[key] = true; // truong hop da ton tai trong cart
          } else {
            mapCheck[key] = false; // truong hop ko co trong cart
          }
        }

        for (var key in mapCheck) {
          if (mapCheck.hasOwnProperty(key)) {
            var value = mapCheck[key];
            if (!value) {
              if (window.location.pathname == "/cart") {
                // Nếu là cart thì reload
                isContinue = false;
                var $overlay = jQuery(
                  '<div style="position: absolute;width: 100%;height: 100%;background: white;opacity: 0.5;"></div>'
                );
                $items.css("position", "relative");
                $items.append($overlay);
                window.location.reload();
              } else {
                window.SOLID.store.dispatch("cart-refresh", cart);
              }
            }
          }
        }
      }
      if (isContinue) {
        callback();
      }
    };

    this.updateRemoveItem = function (cart) {
      var $items = $element.find(_this.settings.classItemCart);
      var cartItems = [];

      if (cart && cart.items && cart.items.length) {
        cartItems = cart.items;
      }
      if ($items && $items.length && cartItems && cartItems.length) {
        for (var i = 0; i < $items.length; i++) {
          var $item = jQuery($items[i]);
          var variantID = $item.attr("data-variant-id");
          var key = $item.attr("data-key");
          var cartItem = null;

          if (cartItems && cartItems.length) {
            for (var j = 0; j < cartItems.length; j++) {
              /**
               * [
               *    {key: 1, va: 1},
               *    {key: 2, va: 1}
               * ]
               *
               * TH mới: Có key và có varaint id
               * TH cũ: không có key và có varaint id
               */
              if (key) {
                // TH mới
                if (key == cartItems[j].key) {
                  cartItem = cartItems[j];
                  break;
                }
              } else if (variantID) {
                // HT cũ
                if (variantID == cartItems[j].variant_id) {
                  cartItem = cartItems[j];
                  break;
                }
              }
            }
          }
          // Không còn tồn tại thì xóa bỏ
          if (!cartItem) {
            $item.remove();
          } else {
            $item.find("input[name='quantity']").val(cartItems[j].quantity);
          }
        }
      }
    };

    // Cập nhật, format giá theo currency của các product có trong cart
    this.updatePriceItem = function (cart) {
      var $items = $element.find(_this.settings.classItemCart);
      var cartItems = cart.items;

      if ($items && $items.length && cartItems && cartItems.length) {
        for (var i = 0; i < $items.length; i++) {
          var $item = jQuery($items[i]);
          var variantID = $item.attr("data-variant-id");
          var key = $item.attr("data-key");
          var cartItem = null;

          for (var j = 0; j < cartItems.length; j++) {
            if (key) {
              // TH mới
              if (key == cartItems[j].key) {
                cartItem = cartItems[j];
                break;
              }
            } else if (variantID) {
              // HT cũ
              if (variantID == cartItems[j].variant_id) {
                cartItem = cartItems[j];
                break;
              }
            }
          }

          var $variantJSON = $item.find(_this.settings.classProductJson);
          var variantJSON = null;

          if ($variantJSON && $variantJSON.length) {
            try {
              variantJSON = $variantJSON.text();
              variantJSON = JSON.parse(variantJSON);
            } catch (e) {
              console.log(e);
            }
          }
          if (variantJSON && cartItem) {
            var priceItem = 0;
            var comparePriceItem = 0;
            var originalPriceItem = 0;

            var linePriceItem = 0;
            var lineComparePriceItem = 0;
            var lineOriginalPriceItem = 0;

            if (_this.settings.priceItemDisplay == "after-discount") {
              priceItem = _this.formatMoneyPlugin(cartItem.final_price);
            } else {
              priceItem = _this.formatMoneyPlugin(cartItem.original_price);
            }

            comparePriceItem = _this.formatMoneyPlugin(variantJSON.compare_at_price);
            originalPriceItem = _this.formatMoneyPlugin(cartItem.original_price);

            if (_this.settings.priceItemDisplay == "after-discount") {
              linePriceItem = _this.formatMoneyPlugin(cartItem.final_line_price);
            } else {
              linePriceItem = _this.formatMoneyPlugin(cartItem.original_line_price);
            }
            lineComparePriceItem = _this.formatMoneyPlugin(variantJSON.compare_at_price * cartItem.quantity);
            lineOriginalPriceItem = _this.formatMoneyPlugin(cartItem.original_price * cartItem.quantity);

            // Hiển thị giá bán của 1 sản phẩm ra giao diện
            if (_this.settings.classPriceItem) {
              $item.find(_this.settings.classPriceItem).html(priceItem);
            }

            // Hiển thị giá comparePrice của 1 sản phẩm ra giao diện
            if (_this.settings.classPriceCompareItem) {
              if (variantJSON.compare_at_price && variantJSON.compare_at_price > cartItem.final_price) {
                $item.find(_this.settings.classPriceCompareItem).removeClass("gt_hidden");
                $item.find(_this.settings.classPriceCompareItem).html(comparePriceItem);
              } else {
                $item.find(_this.settings.classPriceCompareItem).addClass("gt_hidden");
              }
            }

            // Hiển thị giá original price của 1 sản phẩm ra giao diện
            if (_this.settings.classPriceOriginalItem) {
              if (cartItem.original_price && cartItem.original_price > cartItem.final_price) {
                $item.find(_this.settings.classPriceOriginalItem).removeClass("gt_hidden");
                $item.find(_this.settings.classPriceOriginalItem).html(originalPriceItem);
              } else {
                $item.find(_this.settings.classPriceOriginalItem).addClass("gt_hidden");
              }
            }

            // Hiển thị tổng tiền thanh toán theo từng sản phẩm = giá bán của 1 sản phẩm * số lượng mua của sản phẩm đó
            if (_this.settings.classPriceLineItem) {
              $item.find(_this.settings.classPriceLineItem).html(linePriceItem);
            }

            // Hiển thị tổng comparePrice theo từng sản phẩm = giá bán của 1 sản phẩm * số lượng mua của sản phẩm đó
            if (_this.settings.classPriceCompareLineItem) {
              if (variantJSON.compare_at_price && variantJSON.compare_at_price > cartItem.final_price) {
                $item.find(_this.settings.classPriceCompareLineItem).removeClass("gt_hidden");
                $item.find(_this.settings.classPriceCompareLineItem).html(lineComparePriceItem);
              } else {
                $item.find(_this.settings.classPriceCompareLineItem).addClass("gt_hidden");
              }
            }

            // Hiển thị tổng original price theo từng sản phẩm = giá bán ban đầu của 1 sản phẩm * số lượng mua của sản phẩm đó
            if (_this.settings.classPriceOriginalLineItem) {
              if (cartItem.original_price && cartItem.original_price > cartItem.final_price) {
                $item.find(_this.settings.classPriceOriginalLineItem).removeClass("gt_hidden");
                $item.find(_this.settings.classPriceOriginalLineItem).html(lineOriginalPriceItem);
              } else {
                $item.find(_this.settings.classPriceOriginalLineItem).addClass("gt_hidden");
              }
            }
          }
        }
      }
    };

    // Cập nhật tổng tiền khách hàng cần thanh toán ( Total Price )
    this.updatePriceTotal = function (cart) {
      if (!cart) {
        return;
      }
      // Format giá và hiển thị dữ liệu ra giao diện
      if (_this.settings.classPriceSubtotalCart) {
        var subTotal = _this.getTotalComparePrice(cart);
        subTotal = _this.formatMoneyPlugin(subTotal);
        $element.find(_this.settings.classPriceSubtotalCart).html(subTotal);
      }

      var totalPrice = cart.total_price - _this.getTotalDiscount(cart);
      var totalCart = _this.formatMoneyPlugin(totalPrice);

      if (_this.settings.classPriceTotalCart) {
        $element.find(_this.settings.classPriceTotalCart).html(totalCart);
      }
    };

    // Cập nhật số lượng item trong cart
    this.updateNumberTotal = function (cart) {
      if (_this.settings.classCountItems) {
        $element.find(_this.settings.classCountItems).html(cart.item_count);
      }
    };

    // Cập nhật Save Money
    this.updateSaved = function (cart) {
      if (!cart) {
        return;
      }
      var $wrapper = $element.find(_this.settings.classWapperSubtotal);
      var subTotal = _this.getTotalComparePrice(cart);
      var totalPrice = cart.total_price - _this.getTotalDiscount(cart);
      var saveMoney = subTotal - totalPrice;

      // Format Money và hiển thị dự liệu đã được tính toán ra view
      if (saveMoney > 0) {
        if (_this.settings.classPriceSavedCart) {
          var $priceSaved = $element.find(_this.settings.classPriceSavedCart);
          var notApplyRoundDecimal = true; // no apply round decimal for save money
          var priceSave = _this.formatMoneyPlugin(saveMoney, notApplyRoundDecimal);

          $priceSaved.html(priceSave);
        }
        if (_this.settings.classSubtotalPercent) {
          var diff = (saveMoney / subTotal) * 100;

          diff = Math.round(diff);
          var $percentSaved = $element.find(_this.settings.classSubtotalPercent);

          $percentSaved.html(diff + "%");
        }
        if ($wrapper && $wrapper.length) {
          $wrapper.removeClass("gt_hidden");
        }
      } else if ($wrapper && $wrapper.length) {
        $wrapper.addClass("gt_hidden");
      }
    };

    // Lấy tổng tiền của các sản phẩm
    this.getTotalComparePrice = function (cart) {
      var totalComParePrice = 0;
      if (cart && cart.items && cart.items.length) {
        var cartItems = cart.items;
        var $items = $element.find(_this.settings.classItemCart); // Lấy tất cả các element product html
        if ($items && $items.length) {
          for (var i = 0; i < $items.length; i++) {
            var $item = jQuery($items[i]);
            var variantID = $item.attr("data-variant-id");
            var key = $item.attr("data-key");
            var cartItem = null;

            for (var j = 0; j < cartItems.length; j++) {
              if (key) {
                // TH mới
                if (key == cartItems[j].key) {
                  cartItem = cartItems[j];
                  break;
                }
              } else if (variantID) {
                // HT cũ
                if (variantID == cartItems[j].variant_id) {
                  cartItem = cartItems[j];
                  break;
                }
              }
            }

            var $variantJSON = $item.find(_this.settings.classProductJson);
            var variantJSON = null;

            if ($variantJSON && $variantJSON.length) {
              try {
                variantJSON = $variantJSON.text();
                variantJSON = JSON.parse(variantJSON);
              } catch (e) {
                console.log(e);
              }
            }

            if (variantJSON && cartItem) {
              var comparePriceItem = cartItem.original_line_price;
              if (variantJSON.compare_at_price && variantJSON.compare_at_price > variantJSON.price) {
                comparePriceItem = variantJSON.compare_at_price * cartItem.quantity;
              }
              totalComParePrice = totalComParePrice + comparePriceItem;
            }
          }
        }
      }
      return totalComParePrice;
    };

    // Lấy tiền discount đang được áp dụng
    this.getTotalDiscount = function (cart) {
      // gtCartDiscountPrice = {
      //   price: priceMax,
      //   cart: cart
      // }
      var discountCart = window.SOLID.store.getState("gtCartDiscountPrice");
      if (discountCart && discountCart.price && cart && cart.total_discount == 0) {
        // Nếu có discount và không có mã auto discount
        return discountCart.price;
      }
      return 0;
    };

    // Format price
    this.formatMoneyPlugin = function (price, notApplyRoundDecimal) {
      var dataCurrency = window.store.get("dataCurrency");
      var format = __GemSettings.money;

      if (dataCurrency) {
        price = Shopify.gemFormatMoney(price, dataCurrency.currency, dataCurrency.data, null, notApplyRoundDecimal);
      } else {
        price = Shopify.formatMoney(price, format);
      }

      return price;
    };

    // disable nhung san pham discount tu buy x get y Shopify
    this.disableItemDiscountBuyXGetY = function (cart) {
      var cartItems = cart.items || [];
      var listVariantDuplicate = [];
      var arrayCheck = [];
      for (var i = 0; i < cartItems.length; i++) {
        var item = cartItems[i];
        if (!arrayCheck[i]) {
          for (var j = i + 1; j < cartItems.length; j++) {
            var compareItem = cartItems[j];
            if (item.id === compareItem.id && !arrayCheck[j]) {
              arrayCheck[j] = true;
              if (item.discounts.length) {
                listVariantDuplicate.push(item);
              } else if (compareItem.discounts.length) {
                listVariantDuplicate.push(compareItem);
              }
            }
          }
        }
      }
      listVariantDuplicate.forEach(function (item) {
        var $itemDiscount = $element.find(
          _this.settings.classItemCart +
            "[data-variant-id=" +
            item.variant_id +
            "][data-key=" +
            JSON.stringify(item.key) +
            "]"
        );
        var $oldOverlay = $itemDiscount.find(".overlay_discount");
        var $oldTagDiscount = $itemDiscount.find(".tag_discount");
        if ($oldOverlay && !$oldOverlay.length && $oldTagDiscount && !$oldTagDiscount.length) {
          var $overlay = jQuery(
            '<div class="overlay_discount" style="position: absolute;width: 100%;height: 100%;background: white;opacity: 0.5;"></div>'
          );
          $itemDiscount.css("position", "relative");
          $itemDiscount.append($overlay);
          var $tagDisocunt =
            '<div class="tag_discount" style="position: absolute;top: 16px;width: 100px;background: gray;text-align: center;color: white;border-radius: 0px 5px 5px 0px;z-index: 10;">DISCOUNT</div>';
          $itemDiscount.append($tagDisocunt);
        }
      });
    };

    this.init();
  };

  jQuery.fn.gtCartV3 = function (options) {
    return this.each(function () {
      if (undefined == jQuery(this).data("gtcartv3")) {
        var plugin = new gtCartV3(this, options, jQuery);

        jQuery(this).data("gtcartv3", plugin);
      }
    });
  };
})(jQuery);

        }
        funcLib68();
      } catch(e) {
        console.error("Error lib id: 68" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib64 = function() {
          "use strict";

/* gtCartV2RemoveItem */
(function (jQuery) {
  jQuery.gtCartV2RemoveItem = function (element, options, $) {
    var defaults = {
      id: null,
      mode: null,
      classRemove: null,
      classItemCart: null,
      classProductJson: null,
      classPopupDeleteItem: null,
      classAgreeDeleteItem: null,
      classCancelDeleteItem: null,
    };

    this.settings = {};
    var $element = jQuery(element);
    var _this = this;

    this.init = function () {
      this.settings = jQuery.extend({}, defaults, options);
      _this.event();
      _this.listen();
    };
    this.event = function () {
      if (_this.settings.classRemove) {
        var $buttonRemove = $element.find(_this.settings.classRemove);

        $buttonRemove
          .off("click.remove" + _this.settings.id)
          .on("click.remove" + _this.settings.id, function () {
            var $this = jQuery(this);
            var key = $this
              .closest(_this.settings.classItemCart)
              .attr("data-key");
            var $popupDelete = $element.find(
              _this.settings.classPopupDeleteItem
            );

            if ($popupDelete && $popupDelete.length) {
              $popupDelete.addClass("gt_active");

              if (_this.settings.classCancelDeleteItem) {
                $popupDelete
                  .find(_this.settings.classCancelDeleteItem)
                  .off("click.remove" + _this.settings.id)
                  .on("click.remove" + _this.settings.id, function (e) {
                    $popupDelete.removeClass("gt_active");
                  });
              }

              if (_this.settings.classAgreeDeleteItem) {
                $popupDelete
                  .find(_this.settings.classAgreeDeleteItem)
                  .off("click.remove" + _this.settings.id)
                  .on("click.remove" + _this.settings.id, function () {
                    window.gfTheme.updateCartQuantity(key, 0, function (cart) {
                      $popupDelete.removeClass("gt_active");

                      window.store.update("gtCartInput", cart);
                      window.store.update("cart.item_count", cart.item_count);
                    });
                  });
              }
            } else {
              window.gfTheme.updateCartQuantity(key, 0, function (cart) {
                window.store.update("gtCartInput", cart);
                window.store.update("cart.item_count", cart.item_count);
              });
            }
          });
      }
    };
    this.listen = function () {
      window.store.change("gtCartCallEvent", function () {
        _this.event();
      });
    };
    this.init();
  };
  jQuery.fn.gtCartV2RemoveItem = function (options) {
    return this.each(function () {
      var plugin = new jQuery.gtCartV2RemoveItem(this, options, jQuery);

      jQuery(this).data("gtcartv2removeitem", plugin);
    });
  };
})(jQuery);

        }
        funcLib64();
      } catch(e) {
        console.error("Error lib id: 64" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib8 = function() {
          "use strict";

/* gtProductButton */
(function (jQuery) {
  jQuery.gtProductButton = function (element, options) {
    var defaults = {
      type: null, //  null or ajax
      classText: null,
      button: null,
      TextSuccessfully: null,
      classTextSuccessfully: null,
      mode: "production",
      // loadingType: "filled" // "outlined"
    };

    this.settings = {};

    var $element = jQuery(element);
    var _this = this;
    var _productJson;

    this.init = function () {
      this.settings = jQuery.extend({}, defaults, options);
      var productJson = $element
        .closest("[keyword='product'], [data-keyword='product']")
        .find(".ProductJson")
        .text();

      try {
        if (productJson) {
          _productJson = JSON.parse(productJson);
        }
      } catch (e) {
        console.log(e);
      }
      _this.event();
      _this.listen();
    };
    this.event = function () {
      
      $element
        .find(_this.settings.classButton)
        .off("click.addtocart")
        .on("click.addtocart", addToCartHandler);

      function addToCartHandler(e) {
        var addons = window.SOLID.store.getState("addons");
        var cartDrawer;

        if (addons && addons.cart_drawer) {
          cartDrawer = addons.cart_drawer;
        }
        if (_this.settings.type == "ajax" || cartDrawer) {
          e.preventDefault();
          if (!$element.data("isBuying")) {
            var $product = $element.closest("[keyword='product'], [data-keyword='product']");
            var $buttonAddToCart = jQuery(this);
            var heightBtnAddToCart = $buttonAddToCart.outerHeight();

            $buttonAddToCart.css("position", "relative");
            $buttonAddToCart.css("height", heightBtnAddToCart + "px");
            var $loading = jQuery(
              '<div class="atom-button-loading-circle-loader"><div class="atom-button-loading-check-mark atom-button-loading-check-mark-draw"></div></div>'
            );
            var $styleLoading = jQuery("head").find("#gt_add-to-cart-animation--loading");

            if (!$styleLoading || !$styleLoading.length) {
              $styleLoading = jQuery(
                "<style type=\"text/css\" id=\"gt_add-to-cart-animation--loading\">\n" +
                ".atom-button-loading-circle-loader {\n" +
                "  position: absolute;\n" +
                "  left: calc(50% - 0.5em);\n" +
                "  top: calc(50% - 0.5em);\n" +
                "  border: 2px solid rgba(0, 0, 0, 0);\n" +
                "  border-left-color: currentColor;\n" +
                "  border-bottom-color: currentColor;\n" +
                "  animation: loader-spin 0.6s infinite linear;\n" +
                "  vertical-align: top;\n" +
                "  border-radius: 50%;\n" +
                "  width: 1em;\n" +
                "  height: 1em;\n" +
                "  border-width: calc(1em / 10);\n" +
                "}\n" +
                "\n" +
                ".load-complete {\n" +
                "  -webkit-animation: none;\n" +
                "  animation: none;\n" +
                "  border-color: currentColor;\n" +
                "  transition: border 500ms ease-out;\n" +
                "}\n" +
                "\n" +
                ".atom-button-loading-check-mark {\n" +
                "  display: none;\n" +
                "}\n" +
                "\n" +
                ".atom-button-loading-check-mark.atom-button-loading-check-mark-draw:after {\n" +
                "  animation-duration: 800ms;\n" +
                "  animation-timing-function: ease;\n" +
                "  animation-name: atom-button-loading-check-mark;\n" +
                "  transform: scaleX(-1) rotate(135deg);\n" +
                "}\n" +
                "\n" +
                ".atom-button-loading-check-mark:after {\n" +
                "  opacity: 1;\n" +
                "  transform-origin: left top;\n" +
                "  border-right: 2px solid #fff;\n" +
                "  border-top: 2px solid #fff;\n" +
                "  border-color: currentColor;\n" +
                "  content: '';\n" +
                "  position: absolute;\n" +
                "  border-width: calc(1em / 10);\n" +
                "  width: calc(1em / 4);\n" +
                "  height: calc(1em / 2);\n" +
                "  left: calc(1em / 4 - 1em / 10);\n" +
                "  top: calc(1em / 2 - 1em / 16);\n" +
                "}\n" +
                "\n" +
                "@keyframes loader-spin {\n" +
                "  0% {\n" +
                "    transform: rotate(0deg);\n" +
                "  }\n" +
                "\n" +
                "  100% {\n" +
                "    transform: rotate(360deg);\n" +
                "  }\n" +
                "}\n" +
                "\n" +
                "@keyframes atom-button-loading-check-mark {\n" +
                "  0% {\n" +
                "    height: 0px;\n" +
                "    width: 0px;\n" +
                "    opacity: 1;\n" +
                "  }\n" +
                "\n" +
                "  20% {\n" +
                "    height: 0px;\n" +
                "    width: calc(1em / 4);\n" +
                "    opacity: 1;\n" +
                "  }\n" +
                "\n" +
                "  40% {\n" +
                "    height: calc(1em / 2);\n" +
                "    width: calc(1em / 4);\n" +
                "    opacity: 1;\n" +
                "  }\n" +
                " \n" +
                "  100% {\n" +
                "    height: calc(1em / 2);\n" +
                "    width: calc(1em / 4);\n" +
                "    opacity: 1;\n" +
                "  }\n" +
                "}\n" +
                "</style>"
              );
              jQuery("head").append($styleLoading);
            }
            var $cacheButtonHtml = $buttonAddToCart.html();

            $buttonAddToCart.html($loading);
            $element.data("isBuying", true);
            var $form = $element.closest("form");

            window.gfTheme.addItemFromForm($form, function (item, form, error) {
              window.store.update("addToCart", item);
              if (error) {
                try {
                  var responseText = JSON.parse(error.responseText);

                  if (responseText && responseText.description) {
                    // eslint-disable-next-line no-alert
                    alert(responseText.description);
                  }
                } catch (e) {
                  console.log(e);
                }
                $buttonAddToCart.css("position", "");
                $buttonAddToCart.css("height", "");
                $buttonAddToCart.html($cacheButtonHtml);
                $element.data("isBuying", false);
              } else {
                if (
                  _this.settings.classTextSuccessfully &&
                  _this.settings.TextSuccessfully
                ) {
                  $product
                    .find(_this.settings.classTextSuccessfully)
                    .text(_this.settings.TextSuccessfully);
                } else {
                  var $loadingEl = $buttonAddToCart.find(
                    ".atom-button-loading-circle-loader"
                  );

                  clearTimeout(window.timeoutLoading);
                  /* display tick button */
                  $loadingEl.addClass("load-complete");
                  $loadingEl
                    .find(".atom-button-loading-check-mark")
                    .css("display", "block");
                  /* remove tick button and display text*/
                  window.timeoutLoading = setTimeout(function () {
                    $buttonAddToCart.css("position", "");
                    $buttonAddToCart.css("height", "");
                    $buttonAddToCart.html($cacheButtonHtml);
                    $element.data("isBuying", false);
                  }, 2000);
                }
                if (cartDrawer) {
                  // mo cart drawer thi cartPopup = "cart_drawer"
                  window.SOLID.store.dispatch("openCartPopup", "cart_drawer");
                }
              }
            }, true);
          }
          return false;
        }
      }
    };
    this.listen = function () {
      var store = window.store;

      if (_productJson) {
        var currentVariant = store.get("variant" + _productJson.id);

        if (!currentVariant.available) {
          $element.find(_this.settings.classButton).attr("disabled", true);
        } else {
          $element.find(_this.settings.classButton).attr("disabled", false);
        }

        store.change("variant" + _productJson.id, function (variant) {
          if (variant.available) {
            $element.removeClass("gf_soldout");
            $element.removeClass("gt_soldout");
            var textAddToCart = $element.attr("data-addtocart");

            if (_this.settings.classText) {
              $element.find(_this.settings.classText).html(textAddToCart);
            }

            if (_this.settings.classButton) {
              $element.find(_this.settings.classButton).attr("disabled", false);
            }
          } else {
            $element.addClass("gf_soldout");
            $element.addClass("gt_soldout");
            var text = $element.attr("data-soldout");

            if (_this.settings.classText) {
              $element.find(_this.settings.classText).html(text);
            }

            if (_this.settings.classButton && _this.settings.mode === "production") {
              $element.find(_this.settings.classButton).attr("disabled", true);
            }
          }
        });
      }
    };
    this.init();
  };

  jQuery.fn.gtProductButton = function (options) {
    return this.each(function () {
      var plugin = new jQuery.gtProductButton(this, options, jQuery);

      jQuery(this).data("gtproductbutton", plugin);
    });
  };
})(jQuery);

        }
        funcLib8();
      } catch(e) {
        console.error("Error lib id: 8" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib63 = function() {
          "use strict";

/*
* Lăng nghe sự kiện người dùng click button plus, Minus hoặc nhập số lượng sản phẩm để tăng hoặc giảm sản phẩm trong giỏ hàng
* Update quantity của product
*/
(function (jQuery) {
  var gtCartV2Input = function (element, options) {
    var defaults = {
      id: null,
      mode: null,
      classItemCart: null,
      classQuantityPlus: null,
      classQuantityMinus: null,
      classInputQuantity: null,
      classContentPage: null,
      classCartEmpty: null,
      classPopupWarning: null,
      classAgreeDeleteWarning: null,
      classCancelDeleteWarning: null,
    };

    this.settings = {};
    var $element = jQuery(element);
    var _this = this;

    this.init = function () {
      this.settings = jQuery.extend({}, defaults, options);
      _this.event();
      _this.listen();
    };
    this.event = function () {
      if (_this.settings.classQuantityPlus) {
        var $buttonPlus = $element.find(_this.settings.classQuantityPlus);

        if ($buttonPlus && $buttonPlus.length) {
          $buttonPlus.off("click.quantityPlus" + _this.settings.id).on("click.quantityPlus" + _this.settings.id, function () {
            var $this = jQuery(this);
            var $item = $this.closest(_this.settings.classItemCart);
            var key = $item.attr("data-key");
            var $input = $item.find(_this.settings.classInputQuantity);
            var $inputFirst = $input;

            if ($input && $input.length >= 2) {
              $inputFirst = jQuery($input[0]);
            }
            var quantity = $inputFirst.val();

            quantity = Number(quantity) + 1;

            // Update number
            $input.attr("value", quantity).val(quantity);
            window.gfTheme.updateCartQuantity(key, quantity, function (cart) {
              window.store.update("gtCartInput", cart);
              window.store.update("cart.item_count", cart.item_count);
            });
          });
        }
      }

      if (_this.settings.classQuantityMinus) {
        var $buttonMinus = $element.find(_this.settings.classQuantityMinus);

        if ($buttonMinus && $buttonMinus.length) {
          $buttonMinus.off("click.quantityMinus" + _this.settings.id).on("click.quantityMinus" + _this.settings.id, function () {
            var $this = jQuery(this);
            var $item = $this.closest(_this.settings.classItemCart);
            var key = $item.attr("data-key");
            var $input = $item.find(_this.settings.classInputQuantity);
            var $inputFirst = $input;

            if ($input && $input.length >= 2) {
              $inputFirst = jQuery($input[0]);
            }
            var quantity = $inputFirst.val();

            quantity = Number(quantity) - 1;

            if (quantity > 0) {
              // Update number
              $input.attr("value", quantity).val(quantity);
              window.gfTheme.updateCartQuantity(key, quantity, function (cart) {
                window.store.update("gtCartInput", cart);
                window.store.update("cart.item_count", cart.item_count);
              });
            } else {
              _this.confirmRemove(key, 0, null);
            }
          });
        }
      }

      //   Lắng nghe sự kiện người dùng thay đổi giá trị số lượng sản phẩm trong ô input
      if (_this.settings.classInputQuantity) {
        var $inputQuantity = $element.find(_this.settings.classInputQuantity);

        if ($inputQuantity && $inputQuantity.length) {
          var quantityCurrent = $inputQuantity.val();

          $inputQuantity.off("change.quantity" + _this.settings.id).on("change.quantity" + _this.settings.id, function () {
            var $this = jQuery(this);
            var quantity = $this.val();
            var key = $this.closest(_this.settings.classItemCart).attr("data-key");

            if (quantity > 0) {
              window.gfTheme.updateCartQuantity(key, quantity, function (cart) {
                window.store.update("gtCartInput", cart);
                window.store.update("cart.item_count", cart.item_count);
              });
            } else {
              _this.confirmRemove(key, quantityCurrent, $this);
            }
          });
        }
      }
    };

    this.confirmRemove = function (key, quantityCurrent, $input) {
      var warining = false;

      // Nếu quantity của một sản phẩm = 0 hiển thị popup xác nhận có remove sản phẩm khỏi giỏ hàng hay ko
      if (_this.settings.classPopupWarning) {
        var $popupWarning = $element.find(_this.settings.classPopupWarning);

        if ($popupWarning && $popupWarning.length) {
          warining = true;
          $popupWarning.addClass("gt_active");
          $popupWarning.find(_this.settings.classCancelDeleteWarning).off("click.warning" + _this.settings.id).on("click.warning" + _this.settings.id, function () {
            $popupWarning.removeClass("gt_active");
            if ($input) {
              $input.val(quantityCurrent);
            }
          });

          $popupWarning.find(_this.settings.classAgreeDeleteWarning).off("click.warning" + _this.settings.id).on("click.warning" + _this.settings.id, function () {
            window.gfTheme.updateCartQuantity(key, 0, function (cart) {
              $popupWarning.removeClass("gt_active");
              window.store.update("gtCartInput", cart);
              window.store.update("cart.item_count", cart.item_count);
            });
          });
        }
      }
      // Nếu không có warining thì cập nhật về 0
      if (!warining) {
        window.gfTheme.updateCartQuantity(key, 0, function (cart) {
          window.store.update("gtCartInput", cart);
          window.store.update("cart.item_count", cart.item_count);
        });
      }
    };

    this.listen = function () {
      window.store.change("gtCartCallEvent", function () {
        _this.event();
      });
    };
    this.init();
  };

  jQuery.fn.gtCartV2Input = function (options) {
    return this.each(function () {
      var plugin = new gtCartV2Input(this, options, jQuery);

      jQuery(this).data("gtcartv2input", plugin);
    });
  };
})(jQuery);

        }
        funcLib63();
      } catch(e) {
        console.error("Error lib id: 63" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib66 = function() {
          (function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["webpackNumbers"] = factory();
	else
		root["webpackNumbers"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/libs/gtCartV5Discount.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/libs/gtCartV5Discount.ts":
/*!**************************************!*\
  !*** ./src/libs/gtCartV5Discount.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * GtCartV5Discount
 * Lắng nghe sự thay đổi của gtCartInput, dataDiscounts
 * Cập nhật total discount theo total quantity trong cart, tính toán, update lại và format rồi in ra html.
 */
var GtCartV5Discount = /** @class */ (function () {
    /**
     * constructor khoi tao
     * @param params setting cua lib
     */
    function GtCartV5Discount(params) {
        this.$element = $(params.$element);
        this.settings = __assign(__assign({}, this.settings), params.settings);
        this.listen();
    }
    /**
     * listen lang nghe su kien discount
     */
    GtCartV5Discount.prototype.listen = function () {
        var _this = this;
        window.SOLID.store.subscribe("discount", function () {
            _this.checkUpdateDiscount();
        });
    };
    /**
     * checkUpdateDiscount
     */
    GtCartV5Discount.prototype.checkUpdateDiscount = function () {
        var discount = window.SOLID.store.getState("discount");
        var cart = window.SOLID.store.getState("cart");
        if (cart) {
            this.updateDiscountTotal(cart, discount);
        }
    };
    /**
     * updateDiscountTotal
     * Lấy ra tổng số lượng của các Item trong cart(nếu >= discount.number thì update lại discount)
     * Tính toán và cập nhật tiền discount
     * Format tiền discount rồi in ra html
     * @param cart cart cua trang
     * @param discount giam gia
     */
    GtCartV5Discount.prototype.updateDiscountTotal = function (cart, discount) {
        var code = "";
        if (discount && discount.title) {
            code = discount.title;
        }
        var priceMax = 0;
        if (discount && discount.price) {
            priceMax = discount.price;
        }
        // Kiểm tra auto discount
        var isAutoDiscount = false;
        if (cart && cart.items && cart.items.length) {
            if (cart.total_discount > 0) {
                isAutoDiscount = true;
                priceMax = cart.total_discount;
                var codes = [];
                for (var i = 0; i < cart.items.length; i++) {
                    var item = cart.items[i];
                    if (item && item.discounts && item.discounts.length) {
                        for (var j = 0; j < item.discounts.length; j++) {
                            var itemDiscount = item.discounts[j];
                            if (itemDiscount && itemDiscount.title && codes.indexOf(itemDiscount.title) === -1) {
                                codes.push(itemDiscount.title);
                            }
                        }
                    }
                }
                code = codes.join(", ");
            }
        }
        // Kiểm tra selling plan
        var isSellingPlan = false;
        if ((cart === null || cart === void 0 ? void 0 : cart.items) && cart.items.length) {
            isSellingPlan = cart.items.some(function (item) { return item.hasOwnProperty("selling_plan_allocation"); });
        }
        // Trigger price to store. Dù có không giảm giá vẫn cần trigger để cập nhật lại giá gốc
        window.store.update("gtCartDiscountPrice", {
            price: priceMax,
            cart: cart,
        });
        // Cập nhật discount code
        var $formCart = this.$element.find('form[action="/cart"]');
        if ($formCart && $formCart.length) {
            var $discount = $formCart.find('[name="discount"]');
            if (priceMax && !isAutoDiscount && !isSellingPlan) {
                // Nếu có tiền, không phải là auto discount và không có selling plan thì mới cập nhật vào form
                if ($discount && $discount.length) {
                    $discount.attr("value", code).val(code);
                }
                else {
                    $formCart.append('<input type="hidden" name="discount" value="' + code + '" />');
                }
            }
            else if ($discount && $discount.length) {
                $discount.attr("value", "").val("");
            }
            window.SOLID.store.dispatch("updateDiscountCode", true);
        }
        // Show discout code
        if (this.settings.classWrapperDiscount && !isSellingPlan) {
            var $discountWrapper = this.$element.find(this.settings.classWrapperDiscount);
            if ($discountWrapper && $discountWrapper.length) {
                if (priceMax) {
                    if (this.settings.classDiscountCode) {
                        var $discountCode = this.$element.find(this.settings.classDiscountCode);
                        if ($discountCode && $discountCode.length) {
                            $discountCode.html(code);
                        }
                    }
                    if (this.settings.classDiscountPrice) {
                        var $discountPrice = this.$element.find(this.settings.classDiscountPrice);
                        if ($discountPrice && $discountPrice.length) {
                            var priceFormat = this.formatMoneyPlugin(priceMax);
                            $discountPrice.html("-" + priceFormat);
                        }
                    }
                    $discountWrapper.addClass("gt_active");
                    // trigger thay doi dom để cart drawer tính toán lại chiều cao
                    window.SOLID.store.dispatch("gtCartDiscountPriceShowDiscount", true);
                }
                else {
                    $discountWrapper.removeClass("gt_active");
                }
            }
        }
    };
    /**
     * formatMoneyPlugin
     * @param price gia can format
     * @returns gia da format
     */
    GtCartV5Discount.prototype.formatMoneyPlugin = function (price) {
        var dataCurrency = window.SOLID.store.getState("dataCurrency");
        var format = window.__GemSettings.money;
        if (dataCurrency) {
            price = window.Shopify.gemFormatMoney(price, dataCurrency.currency, dataCurrency.data);
        }
        else {
            price = window.Shopify.formatMoney(price, format);
        }
        return price;
    };
    return GtCartV5Discount;
}());
/** gtCartV5Discount
 * @param params cac setting cua thu vien
 * @returns libs
 */
window.SOLID.library.gtCartV5Discount = function (params) {
    return new GtCartV5Discount(params);
};
exports.default = {};


/***/ })

/******/ });
});
        }
        funcLib66();
      } catch(e) {
        console.error("Error lib id: 66" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib107 = function() {
          (function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["webpackNumbers"] = factory();
	else
		root["webpackNumbers"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ({

/***/ 5:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * GtProductImagesV2
 */
var GtProductImagesV2 = /** @class */ (function () {
    /**
     * constructor
     * @param params setting truyen vao thu vien
     */
    function GtProductImagesV2(params) {
        this.$element = $(params.$element);
        this.settings = __assign(__assign({}, this.settings), params.settings);
        this.init();
    }
    /**
     * init ham khoi tao thu vien
     */
    GtProductImagesV2.prototype.init = function () {
        var productJson = this.$element.closest("[keyword='product'], [data-keyword='product']").find(".ProductJson").text();
        try {
            if (productJson) {
                this._productJson = JSON.parse(productJson);
            }
        }
        catch (e) {
            console.log("error: ", e);
        }
        this.findElementId();
        this.clearActiveImage();
        this.initSwiperSlide();
        this.setCurrentVariant();
        this.event();
        this.listen();
    };
    GtProductImagesV2.prototype.findElementId = function () {
        var _a;
        this.elementId = this.$element.attr("data-atom-id") || ((_a = this.$element.attr("class")) === null || _a === void 0 ? void 0 : _a.replaceAll(" ", "-")) || "undefined";
    };
    /**
     * Khởi tạo thư viện swiper slide
     */
    GtProductImagesV2.prototype.initSwiperSlide = function () {
        var _this_1 = this;
        var _a, _b, _c, _d, _e, _f;
        var carousel = this.$element.find(this.settings.classSwiperContainer);
        var productImagesSwiper;
        if (carousel && carousel.length) {
            this.$carousel = carousel[0];
            if (this.$carousel.swiper) {
                this.$carousel.swiper.destroy();
            }
            var extraSwiperProductListSetting = ((_b = (_a = window.SOLID.extraSettings) === null || _a === void 0 ? void 0 : _a[this.elementId]) === null || _b === void 0 ? void 0 : _b.swiperSetting) || {};
            var swiperProductListSetting = __assign(__assign({}, this.settings.swiperSetting), extraSwiperProductListSetting);
            productImagesSwiper = new window.Swiper(this.$carousel, swiperProductListSetting);
        }
        var $featureCarousel = this.$element.find(this.settings.classFeatureSwiperContainer);
        if (this.settings.featureSwiperSetting && $featureCarousel && $featureCarousel.length) {
            if ($featureCarousel && $featureCarousel.length) {
                if (productImagesSwiper) {
                    this.settings.featureSwiperSetting.thumbs = {
                        swiper: productImagesSwiper,
                    };
                }
                var cacheEventImageReady_1 = (_d = (_c = this.settings.featureSwiperSetting) === null || _c === void 0 ? void 0 : _c.once) === null || _d === void 0 ? void 0 : _d.imagesReady;
                this.settings.featureSwiperSetting.once = {
                    imagesReady: function () {
                        if (cacheEventImageReady_1) {
                            cacheEventImageReady_1();
                        }
                        _this_1.activeProductImageByFeatureImage($featureCarousel);
                    },
                };
                this.$featureCarousel = $featureCarousel[0];
                // neu co roi thi destroy
                if (this.$featureCarousel.swiper) {
                    this.$featureCarousel.swiper.destroy();
                }
                // khoi tao swiper
                var extraSwiperFeatureSetting = ((_f = (_e = window.SOLID.extraSettings) === null || _e === void 0 ? void 0 : _e[this.elementId]) === null || _f === void 0 ? void 0 : _f.featureSwiperSetting) || {};
                var swiperFeatureSetting = __assign(__assign({}, this.settings.featureSwiperSetting), extraSwiperFeatureSetting);
                var featureSwiper = new window.Swiper(this.$featureCarousel, swiperFeatureSetting);
                // them su kien change slide cho product img swiper
                this.eventFeatureSwiper(featureSwiper, $featureCarousel);
            }
        }
        else {
            if (carousel && carousel.length) {
                var imageId = this.$element.find(this.settings.classFeatureImage).attr("data-id");
                this.activeImage(imageId);
            }
            // if(this.settings.initShowFeatureImage) {
            // }
        }
    };
    /**
     * onProductImageSlideChange: sự kiện thay đổi slide của swiper cho product imgs
     * @param swiper swiper can them su kien
     * @param $carousel carousel can them su kien
     */
    GtProductImagesV2.prototype.eventFeatureSwiper = function (swiper, $carousel) {
        var _this_1 = this;
        swiper.on("slideChangeTransitionEnd", function () {
            _this_1.activeProductImageByFeatureImage($carousel);
        });
    };
    /**
     * activeProductImageByFeatureImage: thay đổi slide active ở imageList theo feature image swiper
     * @param $carousel $featureCarousel
     */
    GtProductImagesV2.prototype.activeProductImageByFeatureImage = function ($carousel) {
        var $imageActive = $carousel.find(".swiper-slide.swiper-slide-active img");
        var imageId = $imageActive.attr("data-id");
        this.updateStoreVariantByImageID(imageId);
        this.activeImage(imageId);
    };
    /**
     * Lấy dữ liệu gtCurrentVariant ID đã được cache
     */
    GtProductImagesV2.prototype.setCurrentVariant = function () {
        var _this_1 = this;
        if (this._productJson) {
            var variantIDCache = this.getVariantIDCacheByDom();
            if (variantIDCache) {
                this._variantID = variantIDCache;
                var storeVariant = window.SOLID.store.getState("variant" + this._productJson.id);
                if (storeVariant && storeVariant.id == this._variantID && storeVariant.variant_init) {
                    return;
                }
                else {
                    var variantData = this._productJson.variants.find(function (item) {
                        return Number(item.id) === Number(_this_1._variantID);
                    });
                    if (variantData) {
                        try {
                            var newVariant = JSON.parse(JSON.stringify(variantData));
                            // eslint-disable-next-line camelcase
                            newVariant.variant_init = true;
                            window.SOLID.store.dispatch("variant" + this._productJson.id, newVariant);
                        }
                        catch (e) {
                            console.log(e);
                        }
                    }
                }
            }
        }
    };
    /**
     * event
     */
    GtProductImagesV2.prototype.event = function () {
        // Click to image item in slide image
        if (this.settings.classSwiperItemsImage) {
            var $carouseItemImages_1 = this.$element.find(this.settings.classSwiperItemsImage);
            var _this_2 = this;
            $carouseItemImages_1.off("click.selectImage").on("click.selectImage", function () {
                var $img = jQuery(this);
                var imageId = $img.attr("data-id");
                var imageUrl = $img.attr("src");
                $carouseItemImages_1.removeClass("gt_active");
                $img.addClass("gt_active");
                _this_2.updateFeatureImage(imageUrl, imageId);
                _this_2.updateStoreVariantByImageID(imageId);
            });
        }
        // Click to feature arrow
        if (this.settings.classFeatureArrow) {
            var $featureArrow = this.$element.find(this.settings.classFeatureArrow);
            var _this_3 = this;
            if ($featureArrow && $featureArrow.length) {
                $featureArrow.off("click.imageArrow").on("click.imageArrow", function () {
                    var isLeftArrow = $(this).hasClass("gt_product-img-nav--left");
                    var $currentActiveImage = $(_this_3.$carousel).find(".swiper-slide img.gt_active");
                    if (!$currentActiveImage || !$currentActiveImage.length) {
                        return;
                    }
                    var index = $currentActiveImage.closest(".swiper-slide").attr("aria-label").split(" / ");
                    var currentIndex = parseInt(index[0]);
                    var total = parseInt(index[1]);
                    if (isLeftArrow) {
                        currentIndex = currentIndex == 1 ? total : currentIndex - 1;
                    }
                    else {
                        currentIndex = currentIndex == total ? 1 : currentIndex + 1;
                    }
                    var newIndex = currentIndex + " / " + total;
                    var $newActiveImage = $(_this_3.$carousel).find(".swiper-slide[aria-label='" + newIndex + "'] img");
                    if ($newActiveImage && $newActiveImage.length) {
                        $newActiveImage.trigger("click");
                        _this_3.$carousel.swiper.slideTo(currentIndex - 1, 200, true);
                    }
                });
            }
        }
    };
    /**
     * listen
     */
    GtProductImagesV2.prototype.listen = function () {
        var _this_1 = this;
        var store = window.SOLID.store;
        if (this._productJson && this._productJson.id) {
            store.subscribe("variant" + this._productJson.id, function (variant) {
                if (variant &&
                    variant.variant_init &&
                    (_this_1.settings.initShowFeatureImage || _this_1.settings.initShow3DModel || _this_1.settings.initShowExVideo || _this_1.settings.initShowOtherVideo)) {
                    return;
                }
                _this_1.updateDataCacheAttr(variant.id);
                _this_1.updateImage(variant);
            });
        }
    };
    /**
     * getVariantIDCacheByDom
     * @returns current variant id
     */
    GtProductImagesV2.prototype.getVariantIDCacheByDom = function () {
        var variantID = this.$element.attr("data-variant-id") || "";
        return variantID;
    };
    /**
     * Cập nhật variant id trong attr của element khi giá trị store variant thay đổi
     * @param variantID current variant id
     */
    GtProductImagesV2.prototype.updateDataCacheAttr = function (variantID) {
        var dataCache = this.$element.attr("data-variant-id");
        if (dataCache && variantID) {
            this.$element.attr("data-variant-id", variantID);
        }
    };
    /**
     * Cập nhật new variant
     * @param imageId id của image đang được active
     */
    GtProductImagesV2.prototype.updateStoreVariantByImageID = function (imageId) {
        var variants = [];
        if (this._productJson) {
            try {
                variants = this._productJson.variants;
            }
            catch (e) {
                console.log(e);
            }
        }
        if (variants.length) {
            var beforeActiveVariant_1 = window.SOLID.store.getState("variant" + this._productJson.id);
            // check variant hiện tại có feature image là imageid cần check hay không
            var beforeVariantHasImageId = variants.find(function (item) { var _a, _b; return String(item.id) === String(beforeActiveVariant_1 === null || beforeActiveVariant_1 === void 0 ? void 0 : beforeActiveVariant_1.id) && (((_a = item === null || item === void 0 ? void 0 : item.featured_media) === null || _a === void 0 ? void 0 : _a.id) == imageId || ((_b = item === null || item === void 0 ? void 0 : item.featured_image) === null || _b === void 0 ? void 0 : _b.id) == imageId); });
            if (beforeVariantHasImageId) {
                return;
            }
            // find variant with image id
            var currentVariant = variants.find(function (item) { return item.featured_image && item.featured_image.id && item.featured_image.id == imageId; });
            if (!currentVariant) {
                // nếu không tìm thấy theo imageId thì tìm theo mediaId
                currentVariant = variants.find(function (item) { return item.featured_media && item.featured_media.id == imageId; });
            }
            if (String(currentVariant === null || currentVariant === void 0 ? void 0 : currentVariant.id) === String(beforeActiveVariant_1 === null || beforeActiveVariant_1 === void 0 ? void 0 : beforeActiveVariant_1.id)) {
                return;
            }
            if (currentVariant) {
                window.SOLID.store.dispatch("variant" + this._productJson.id, currentVariant);
            }
        }
    };
    /**
     * Cập nhật ảnh của feature image theo ảnh đang được active trong slider image
     * @param url link ảnh đang được active trong slide images
     * @param imageId id cua feature image active
     * @param mediaId id cua feature media active
     */
    GtProductImagesV2.prototype.updateFeatureImage = function (url, imageId, mediaId) {
        if (!this.settings.featureSwiperSetting) {
            url = this.replaceImageToSize(url, "");
            if (this.settings.classFeatureImage) {
                this.$element.find(this.settings.classFeatureImage).attr("src", url);
            }
        }
        else {
            var $carouselFeatureImages = this.$element.find(this.settings.classFeatureSwiperItemsImage);
            var $carouselFeatureImageActive = this.$element.find(this.settings.classFeatureSwiperItemsImage + "[data-id=\"" + imageId + "\"]");
            if ($carouselFeatureImages && $carouselFeatureImageActive && $carouselFeatureImages.length && $carouselFeatureImageActive.length) {
                var indexActive = $carouselFeatureImages.index($carouselFeatureImageActive);
                this.$featureCarousel.swiper.slideTo(indexActive, 200, true);
            }
            else {
                // nếu không tìm thấy imageId thì tìm theo mediaId
                var $carouselFeatureMediaActive = this.$element.find(this.settings.classFeatureSwiperItemsImage + "[data-id=\"" + mediaId + "\"]");
                if ($carouselFeatureImages && $carouselFeatureMediaActive && $carouselFeatureImages.length && $carouselFeatureMediaActive.length) {
                    var indexActive = $carouselFeatureImages.index($carouselFeatureMediaActive);
                    this.$featureCarousel.swiper.slideTo(indexActive, 200, true);
                }
            }
        }
    };
    /**
     * Cập nhật lại trạng thái active của slide và feature image với variant tương ứng
     * @param variant dữ liệu của variant đang select
     */
    GtProductImagesV2.prototype.updateImage = function (variant) {
        var _a, _b;
        if (!this._productJson)
            return;
        if (!variant)
            variant = window.SOLID.store.getState("variant" + this._productJson.id);
        if (!variant || !variant.featured_image || !variant.featured_image.src || !this.settings.classSwiperItemsImage) {
            return;
        }
        this.updateFeatureImage(variant.featured_image.src, variant.featured_image.id, (_a = variant.featured_media) === null || _a === void 0 ? void 0 : _a.id);
        this.activeImage(variant.featured_image.id, (_b = variant.featured_media) === null || _b === void 0 ? void 0 : _b.id);
    };
    /**
     * active and scroll to image active
     * @param imageId  featured_image id current variant selected
     * @param mediaId  featured_media id current variant selected
     */
    GtProductImagesV2.prototype.activeImage = function (imageId, mediaId) {
        var $carouselImages = this.$element.find(this.settings.classSwiperItemsImage);
        var _this = this;
        var isFindActiveImage = false;
        $carouselImages.each(function (index) {
            $(this).removeClass("gt_active");
            $(this).removeClass("gf_active");
            var id = $(this).attr("data-id");
            if (id == imageId && _this.settings.swiperSetting) {
                _this.$carousel.swiper.slideTo(index, 200, true);
                $(this).addClass("gt_active");
                $(this).addClass("gf_active");
                isFindActiveImage = true;
            }
        });
        // support với media nếu không tìm thấy imageId
        if (!isFindActiveImage) {
            $carouselImages.each(function (index) {
                $(this).removeClass("gt_active");
                $(this).removeClass("gf_active");
                var id = $(this).attr("data-id");
                if (id == mediaId && _this.settings.swiperSetting) {
                    _this.$carousel.swiper.slideTo(index, 200, true);
                    $(this).addClass("gt_active");
                    $(this).addClass("gf_active");
                }
            });
        }
    };
    /**
     * clearActiveImage
     */
    GtProductImagesV2.prototype.clearActiveImage = function () {
        var $carouselImages = this.$element.find(this.settings.classSwiperItemsImage);
        $carouselImages.each(function () {
            $(this).removeClass("gt_active");
            $(this).removeClass("gf_active");
        });
    };
    /**
     * Kiểm tra xem có phải link ảnh trên shopify app hay ko
     * @param url link ảnh
     * @returns true or false
     */
    GtProductImagesV2.prototype.hasImageShopify = function (url) {
        if (!url || url == "") {
            return false;
        }
        if (url.indexOf("cdn.shopify.com/s/files/") != -1) {
            return true;
        }
        else if (url.indexOf("apps.shopifycdn.com/") != -1) {
            return true;
        }
        return false;
    };
    /**
     * replaceImageToSize
     * @param url link image
     * @param expectImageSize expectImageSize
     * @returns string
     */
    GtProductImagesV2.prototype.replaceImageToSize = function (url, expectImageSize) {
        if (expectImageSize == undefined || expectImageSize == null) {
            return url;
        }
        if (this.hasImageShopify(url)) {
            var ignore = ["jfif"];
            var params = "";
            var splitParams = url.split("?");
            if (splitParams && splitParams.length && splitParams.length >= 2) {
                params = splitParams[1];
            }
            var arrImage = splitParams[0].split("/").pop();
            var slugName = arrImage.split(".");
            var strExtention = slugName.pop();
            if (ignore.indexOf(strExtention) !== -1) {
                return url;
            }
            var nameImage = slugName.join(".");
            var arrayNames = nameImage.split("_");
            if (arrayNames && arrayNames.length >= 2) {
                var sizeCurrent = arrayNames.pop();
                var reg = new RegExp(/(\d+)x(\d+)|(\d+)x|x(\d+)/, "gm");
                if (sizeCurrent && reg.test(sizeCurrent)) {
                    var trimReg = sizeCurrent.replace(reg, "");
                    if (trimReg == "") {
                        var nameImages = nameImage.split("_");
                        nameImages.pop();
                        nameImage = nameImages.join("_");
                    }
                }
            }
            var srcImageSplit = url.split("?")[0].split("/");
            var smallSrc = "";
            for (var j = 0; j < srcImageSplit.length - 1; j++) {
                smallSrc += srcImageSplit[j] + "/";
            }
            if (expectImageSize) {
                url = smallSrc + nameImage + "_" + expectImageSize + "." + strExtention;
            }
            else {
                url = smallSrc + nameImage + "." + strExtention;
            }
            if (params) {
                url = url + "?" + params;
            }
        }
        return url;
    };
    return GtProductImagesV2;
}());
/**
 * gtProductImagesV2
 * @param params setting lib product gtProductImagesV2
 * @returns gtProductImagesV2
 */
window.SOLID.library.gtProductImagesV2 = function (params) {
    return new GtProductImagesV2(params);
};
exports.default = {};


/***/ })

/******/ });
});

        }
        funcLib107();
      } catch(e) {
        console.error("Error lib id: 107" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib105 = function() {
          (function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["webpackNumbers"] = factory();
	else
		root["webpackNumbers"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ({

/***/ 6:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * GtProductSwatchesV2
 */
var GtProductSwatchesV2 = /** @class */ (function () {
    /**
     * constructor
     * @param params settings class and element
     */
    function GtProductSwatchesV2(params) {
        this.$element = $(params.$element);
        this.classCurrentValue = params.settings.classCurrentValue;
        this.classItem = params.settings.classItem;
        this.classInputIdHidden = params.settings.classInputIdHidden;
        this.classBtnSelect = params.settings.classBtnSelect;
        this.classCurrentStatus = params.settings.classCurrentStatus;
        this.classVariantValueInTitle = params.settings.classVariantValueInTitle;
        this.init();
    }
    /* private methods */
    /**
     * init: function khoi tao lib
     */
    GtProductSwatchesV2.prototype.init = function () {
        var productJson = this.$element.closest("[keyword='product'], [data-keyword='product']").find(".ProductJson").text();
        try {
            if (productJson) {
                this._productJson = JSON.parse(productJson);
            }
        }
        catch (e) {
            console.log("error: ", e);
        }
        this.setCurrentVariant();
        this.event();
        this.listen();
    };
    /**
     * setInitVariant: tim ra variant dang active
     */
    GtProductSwatchesV2.prototype.setCurrentVariant = function () {
        if (this._productJson) {
            var storeVariant = window.SOLID.store.getState("variant" + this._productJson.id);
            if (storeVariant && storeVariant.variant_init) {
                window.SOLID.store.dispatch("variant" + this._productJson.id, storeVariant);
                return;
            }
            // const $productJson = this.$element.closest("[keyword='product']").find(".ProductJson");
            // if ($productJson && $productJson.length) {
            // const variantID: number = parseInt($productJson.attr("data-variant"));
            var variantIDCache = this.getVariantIDCacheByDom();
            if (variantIDCache) {
                for (var i = 0; i < this._productJson.variants.length; i++) {
                    var currentVariant = this._productJson.variants[i];
                    if (currentVariant.id == variantIDCache) {
                        try {
                            var newVariant = JSON.parse(JSON.stringify(currentVariant));
                            // eslint-disable-next-line camelcase
                            newVariant.variant_init = true;
                            window.SOLID.store.dispatch("variant" + this._productJson.id, newVariant);
                        }
                        catch (e) {
                            console.log(e);
                        }
                        break;
                    }
                }
            }
            // }
        }
    };
    /**
     * event: thêm sự kiện click cho các variants
     */
    GtProductSwatchesV2.prototype.event = function () {
        if (this._productJson) {
            try {
                var variants_1 = this._productJson.variants;
                var $select = this.$element.find(this.classBtnSelect);
                var _this_1 = this;
                $select.off("click.select").on("click.select", function () {
                    var $el = jQuery(this);
                    if (!$el.hasClass("gt_soldout")) {
                        var name_1 = $el.attr("data-name");
                        // Update active
                        var $selector = _this_1.$element.find(_this_1.classBtnSelect + "[data-name=\"" + name_1 + "\"]");
                        if ($selector && $selector.length) {
                            $selector.removeClass("gf_active");
                            $selector.removeClass("gt_active");
                        }
                        $el.addClass("gf_active");
                        $el.addClass("gt_active");
                        var $actives = _this_1.$element.find(_this_1.classBtnSelect + ".gf_active," + _this_1.classBtnSelect + ".gt_active");
                        var values = [];
                        var i = void 0;
                        if ($actives && $actives.length) {
                            for (i = 0; i < $actives.length; i++) {
                                var activeValue = jQuery($actives[i]).attr("data-value");
                                if (activeValue) {
                                    values.push(activeValue);
                                }
                            }
                        }
                        var currentVariant = {};
                        if (values && values.length) {
                            for (i = 0; i < variants_1.length; i++) {
                                var variant = variants_1[i];
                                var options = variant.options; // => []
                                // console.log(options, " vs ", values)
                                if (_this_1.compare(values, options)) {
                                    currentVariant = variant;
                                    break;
                                }
                            }
                        }
                        if (!jQuery.isEmptyObject(currentVariant)) {
                            window.SOLID.store.dispatch("variant" + _this_1._productJson.id, currentVariant);
                        }
                        else {
                            // Sản phẩm không được định nghĩa
                            window.SOLID.store.dispatch("variant" + _this_1._productJson.id, {
                                id: 0,
                                available: false,
                            });
                        }
                    }
                });
            }
            catch (e) {
                console.log(e);
            }
        }
    };
    /**
     * listen: lắng nghe khi có variant active thay đổi
     */
    GtProductSwatchesV2.prototype.listen = function () {
        var _this_1 = this;
        var store = window.SOLID.store;
        if (this._productJson) {
            var options_1 = this._productJson.options;
            store.subscribe("variant" + this._productJson.id, function (variant) {
                if (variant && variant.variant_init) {
                    return;
                }
                _this_1.updateDataCacheAttr(variant.id);
                var $product = _this_1.$element.closest("[keyword='product'], [data-keyword='product']");
                var $currentStatus = $product.find(_this_1.classCurrentStatus);
                if ($currentStatus && $currentStatus.length) {
                    if (!variant.available) {
                        $currentStatus.show();
                        var labelSoldOut = $currentStatus.attr("data-sold-out") || "Sold Out";
                        $currentStatus.addClass(_this_1.classCurrentStatus.replace(".", "") + "--inner");
                        $currentStatus.html(labelSoldOut);
                    }
                    else {
                        $currentStatus.addClass(_this_1.classCurrentStatus.replace(".", "") + "--inner");
                        $currentStatus.hide();
                    }
                }
                if (variant.options && variant.options.length) {
                    for (var i = 0; i < variant.options.length; i++) {
                        var option = variant["option" + (i + 1)];
                        if (option) {
                            var name_2 = void 0;
                            if (options_1[i]) {
                                name_2 = options_1[i];
                            }
                            if (!name_2 || jQuery.isPlainObject(name_2)) {
                                name_2 = options_1[i].name;
                            }
                            var $item = _this_1.$element.find(_this_1.classItem + "[data-name=\"" + name_2 + "\"]");
                            if ($item && $item.length) {
                                var $titleValue = $item.find(_this_1.classVariantValueInTitle);
                                $titleValue.html(option);
                                var $select = $item.find(_this_1.classBtnSelect);
                                var $selectActive = $item.find(_this_1.classBtnSelect + "[data-value=\"" + option.replace(/"/g, "\\\"") + "\"]");
                                if (_this_1.classCurrentValue) {
                                    var $currentValue = $item.find(_this_1.classCurrentValue);
                                    if ($currentValue && $currentValue.length) {
                                        var $contentSelectActive = $selectActive.html();
                                        $currentValue.html($contentSelectActive);
                                        $currentValue.attr("data-value", option);
                                    }
                                }
                                if ($select && $select.length && $selectActive && $selectActive.length) {
                                    $select.removeClass("gf_active");
                                    $select.removeClass("gt_active");
                                    $selectActive.addClass("gf_active");
                                    $selectActive.addClass("gt_active");
                                }
                            }
                        }
                    }
                }
                if (!jQuery.isEmptyObject(variant)) {
                    if ($product && $product.length) {
                        var $input = $product.find(_this_1.classInputIdHidden);
                        if ($input && $input.length) {
                            $input.attr("value", variant.id).val(variant.id);
                            var currentURL = window.location.href;
                            var variantURL = _this_1.updateUrlParameter(currentURL, "variant", variant.id);
                            window.history.replaceState({}, "", variantURL);
                        }
                    }
                }
            });
        }
    };
    /**
     * getVariantIDCacheByDom
     * @returns current variant id
     */
    GtProductSwatchesV2.prototype.getVariantIDCacheByDom = function () {
        var variantID = this.$element.attr("data-variant-id") || "";
        return variantID;
    };
    /**
     * Cập nhật variant id trong attr của element khi giá trị store variant thay đổi
     * @param variantID current variant id
     */
    GtProductSwatchesV2.prototype.updateDataCacheAttr = function (variantID) {
        var dataCache = this.$element.attr("data-variant-id");
        if (dataCache && variantID) {
            this.$element.attr("data-variant-id", variantID);
        }
    };
    /**
     * compare: compare 2 array
     * @param array array1
     * @param array2 array 2
     * @returns boolean
     */
    GtProductSwatchesV2.prototype.compare = function (array, array2) {
        array.sort();
        array2.sort();
        for (var i = 0; i < array.length; i++) {
            for (var j = 0; j < array2.length; j++) {
                var val1 = array[j];
                var val2 = array2[j];
                val1 = val1.replace(/"/gm, "'");
                val2 = val2.replace(/"/gm, "'");
                if (val1 != val2) {
                    return false;
                }
            }
        }
        return true;
    };
    /**
     * updateUrlParameter: update params
     * @param url current url window.location.href
     * @param key "variant"
     * @param value variant id
     * @returns string
     */
    GtProductSwatchesV2.prototype.updateUrlParameter = function (url, key, value) {
        var parser = document.createElement("a");
        parser.href = url;
        var newUrl = parser.protocol + "//" + parser.host + parser.pathname;
        // has parameters ?
        if (parser.search && parser.search.indexOf("?") !== -1) {
            // parameter already exists
            if (parser.search.indexOf(key + "=") !== -1) {
                // paramters to array
                var params_1 = parser.search.replace("?", "");
                params_1 = params_1.split("&");
                params_1.forEach(function (param, i) {
                    if (param.indexOf(key + "=") !== -1) {
                        if (value !== null) {
                            params_1[i] = key + "=" + value;
                        }
                        else {
                            delete params_1[i];
                        }
                    }
                });
                if (params_1.length > 0) {
                    newUrl += "?" + params_1.join("&");
                }
            }
            else if (value !== null) {
                newUrl += parser.search + "&" + key + "=" + value;
            }
            else {
                newUrl += parser.search;
            } // skip the value (remove)
        }
        else if (value !== null) {
            newUrl += "?" + key + "=" + value;
        } // no parameters, create it
        newUrl += parser.hash;
        return newUrl;
    };
    return GtProductSwatchesV2;
}());
/**
 * gtProductSwatchesV2
 * @param params setting lib product swatches
 * @returns gtProductSwatchesV2
 */
window.SOLID.library.gtProductSwatchesV2 = function (params) {
    return new GtProductSwatchesV2(params);
};
exports.default = {};


/***/ })

/******/ });
});
        }
        funcLib105();
      } catch(e) {
        console.error("Error lib id: 105" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib106 = function() {
          (function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["webpackNumbers"] = factory();
	else
		root["webpackNumbers"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ({

/***/ 4:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * GtProductQuantityV2
 */
var GtProductQuantityV2 = /** @class */ (function () {
    /**
     * constructor
     * @param params settings class and element
     */
    function GtProductQuantityV2(params) {
        this.$element = $(params.$element);
        this.classInput = params.settings.classInput;
        this.classPlus = params.settings.classPlus;
        this.classMinus = params.settings.classMinus;
        this.mode = params.settings.mode || "production";
        this.init();
    }
    /* private methods */
    /**
     * init: function khoi tao lib
     */
    GtProductQuantityV2.prototype.init = function () {
        var productJson = this.$element.closest("[keyword='product'], [data-keyword='product']").find(".ProductJson").text();
        try {
            if (productJson) {
                this._productJson = JSON.parse(productJson);
            }
        }
        catch (e) {
            console.log("error: ", e);
        }
        this.event();
        this.listen();
    };
    /**
     * event: thêm sự kiện click cho các variants
     */
    GtProductQuantityV2.prototype.event = function () {
        var _this = this;
        if (this._productJson) {
            if (this.classMinus) {
                this.$element
                    .find(this.classMinus)
                    .off("click.minus")
                    .on("click.minus", function () {
                    if (!_this.$element.hasClass("gt_soldout")) {
                        var value = _this.$element.find(_this.classInput).val();
                        value = parseInt(value) - 1;
                        if (value <= 1) {
                            value = 1;
                        }
                        _this.$element.find(_this.classInput).attr("value", value).val(value);
                        window.SOLID.store.dispatch("quantity" + _this._productJson.id, value);
                    }
                });
            }
            if (this.classPlus) {
                this.$element
                    .find(this.classPlus)
                    .off("click.plus")
                    .on("click.plus", function () {
                    if (!_this.$element.hasClass("gt_soldout")) {
                        var value = _this.$element.find(_this.classInput).val();
                        value = parseInt(value) + 1;
                        if (value <= 1) {
                            value = 1;
                        }
                        _this.$element.find(_this.classInput).attr("value", value).val(value);
                        window.SOLID.store.dispatch("quantity" + _this._productJson.id, value);
                    }
                });
            }
            if (this.classInput) {
                var $input = this.$element.find(this.classInput);
                if (this.mode !== "production") {
                    var quantityStore = window.SOLID.store.getState("quantity" + this._productJson.id) || 1;
                    $input.val(quantityStore);
                }
                $input.off("change.inputQuantity").on("change.inputQuantity", function (e) {
                    var $target = $(e.currentTarget);
                    var quantity = $target.val();
                    if (quantity == 0) {
                        $target.val(1);
                        quantity = 1;
                    }
                    window.SOLID.store.dispatch("quantity" + _this._productJson.id, quantity);
                });
            }
        }
    };
    /**
     * listen: lắng nghe khi có variant active thay đổi
     */
    GtProductQuantityV2.prototype.listen = function () {
        var _this = this;
        var store = window.SOLID.store;
        if (this._productJson) {
            store.subscribe("variant" + this._productJson.id, function (variant) {
                _this.updateDataCacheAttr(variant.id);
                if (variant.available) {
                    _this.$element.removeClass("gf_soldout");
                    _this.$element.removeClass("gt_soldout");
                    if (_this.classInput) {
                        _this.$element.find(_this.classInput).removeAttr("disabled");
                    }
                }
                else {
                    // Nếu là soldout update quantity về 1 và disable input thay đổi quantity
                    _this.$element.addClass("gf_soldout");
                    _this.$element.addClass("gt_soldout");
                    window.SOLID.store.dispatch("quantity" + _this._productJson.id, 1);
                    if (_this.classInput) {
                        jQuery(_this.classInput).attr("value", 1).val(1);
                        _this.$element.find(_this.classInput).attr("disabled", "disabled");
                    }
                }
            });
            store.subscribe("quantity" + this._productJson.id, function (quantity) {
                _this.$element.find(_this.classInput).attr("value", quantity).val(quantity);
            });
        }
    };
    /**
     * Cập nhật variant id trong attr của element khi giá trị store variant thay đổi
     * @param variantID current variant id
     */
    GtProductQuantityV2.prototype.updateDataCacheAttr = function (variantID) {
        var dataCache = this.$element.attr("data-variant-id");
        if (dataCache && variantID) {
            this.$element.attr("data-variant-id", variantID);
        }
    };
    return GtProductQuantityV2;
}());
/**
 * gtProductQuantity
 * @param params setting lib product quantity
 * @returns gtProductQuantity
 */
window.SOLID.library.gtProductQuantityV2 = function (params) {
    return new GtProductQuantityV2(params);
};
exports.default = {};


/***/ })

/******/ });
});
        }
        funcLib106();
      } catch(e) {
        console.error("Error lib id: 106" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib108 = function() {
          (function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["webpackNumbers"] = factory();
	else
		root["webpackNumbers"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 10);
/******/ })
/************************************************************************/
/******/ ({

/***/ 10:
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * GtProductSaveV2
 */
var GtProductSaveV2 = /** @class */ (function () {
    /**
     * constructor
     * @param params setting truyen vao thu vien
     */
    function GtProductSaveV2(params) {
        this.$element = $(params.$element);
        this.settings = {
            roundNoZeroes: false,
            roundPercent: 0,
            classTextPercent: "",
            classTextNumber: "",
            dataFormat: "",
            dataFormatKey: "",
            customCurrencyFormat: "",
        };
        this.settings = __assign(__assign({}, this.settings), params.settings);
        this.init();
    }
    /**
     * init ham khoi tao thu vien
     */
    GtProductSaveV2.prototype.init = function () {
        var productJson = this.$element
            .closest("[keyword='product'], [data-keyword='product']")
            .find(".ProductJson")
            .text();
        try {
            if (productJson) {
                this._productJson = JSON.parse(productJson);
            }
        }
        catch (e) {
            console.log("error: ", e);
        }
        this.setCurrentVariant();
        this.listen();
    };
    /**
     * Lấy dữ liệu gtCurrentVariant ID đã được cache
     */
    GtProductSaveV2.prototype.setCurrentVariant = function () {
        var _this = this;
        if (this._productJson) {
            var variantIDCache = this.getVariantIDCacheByDom();
            if (variantIDCache) {
                this._variantID = Number(variantIDCache);
                var storeVariant = window.SOLID.store.getState("variant" + this._productJson.id);
                if (storeVariant &&
                    storeVariant.id == this._variantID &&
                    storeVariant.variant_init) {
                    this.setPriceWithVariant(storeVariant);
                    return;
                }
                else {
                    var variantData = this._productJson.variants.find(function (item) { return item.id === _this._variantID; });
                    if (variantData) {
                        try {
                            var newVariant = JSON.parse(JSON.stringify(variantData));
                            this.setPriceWithVariant(newVariant);
                            // eslint-disable-next-line camelcase
                            newVariant.variant_init = true;
                            window.SOLID.store.dispatch("variant" + this._productJson.id, newVariant);
                        }
                        catch (e) {
                            console.log(e);
                        }
                    }
                }
            }
        }
    };
    /**
     * listen
     */
    GtProductSaveV2.prototype.listen = function () {
        var _this = this;
        var store = window.SOLID.store;
        if (this._productJson && this._productJson.id) {
            store.subscribe("variant" + this._productJson.id, function (variant) {
                if (variant && variant.variant_init) {
                    return;
                }
                _this.updateDataCacheAttr(variant.id);
                _this.setPriceWithVariant(variant);
            });
            store.subscribe("quantity" + this._productJson.id, function () {
                var variant = window.store.get("variant" + _this._productJson.id);
                if (variant && variant.id) {
                    _this.setPriceWithVariant(variant);
                }
            });
            store.subscribe("dataCurrency", function () {
                var variant = window.store.get("variant" + _this._productJson.id);
                if (variant && variant.id) {
                    _this.setPriceWithVariant(variant);
                }
            });
        }
    };
    /**
     * getVariantIDCacheByDom
     * @returns current variant id
     */
    GtProductSaveV2.prototype.getVariantIDCacheByDom = function () {
        var variantID = this.$element.attr("data-variant-id") || "";
        return variantID;
    };
    /**
     * Cập nhật variant id trong attr của element khi giá trị store variant thay đổi
     * @param variantID current variant id
     */
    GtProductSaveV2.prototype.updateDataCacheAttr = function (variantID) {
        var dataCache = this.$element.attr("data-variant-id");
        if (dataCache && variantID) {
            this.$element.attr("data-variant-id", variantID);
        }
    };
    /**
     * setPriceWithVariant
     * @param variant variant
     */
    GtProductSaveV2.prototype.setPriceWithVariant = function (variant) {
        if (variant.compare_at_price &&
            variant.price &&
            variant.compare_at_price > variant.price) {
            this.$element.addClass("gt_active");
            // Giá giảm theo %
            if (this.settings.classTextPercent) {
                var $number = this.$element.find(this.settings.classTextPercent);
                var number = this.getPercentDiscount(variant.price, variant.compare_at_price);
                $number.html(number);
            }
            // Giá giảm theo sổ tiền
            if (this.settings.classTextNumber) {
                var $price = this.$element.find(this.settings.classTextNumber);
                var diff = variant.compare_at_price - variant.price;
                var diffFormat = this.formatMoneyPlugin(diff);
                $price.html(diffFormat);
            }
        }
        else {
            this.$element.removeClass("gt_active");
        }
    };
    /**
     * Format Money
     * @param price price
     * @returns Format Money
     */
    GtProductSaveV2.prototype.formatMoneyPlugin = function (price) {
        price = this.getPriceWithQuantity(price);
        var dataCurrency = window.store.get("dataCurrency");
        var format = window.__GemSettings.money;
        var priceFormat = price.toString();
        if (!dataCurrency) {
            // default shopify format
            priceFormat = window.Shopify.formatMoney(price, format);
        }
        else {
            // ES addon auto currency converter
            var notApplyRoundDecimal = true; // no apply round decimal for save money
            priceFormat = window.Shopify.gemFormatMoney(price, dataCurrency.currency, dataCurrency.data, this.settings.customCurrencyFormat, notApplyRoundDecimal);
        }
        if (this.settings.dataFormat && this.settings.dataFormatKey) {
            priceFormat = this.settings.dataFormat.replace(this.settings.dataFormatKey, priceFormat);
        }
        return priceFormat;
    };
    /**
     * getPriceWithQuantity
     * @param price price
     * @returns price
     */
    GtProductSaveV2.prototype.getPriceWithQuantity = function (price) {
        if (this._productJson) {
            var quantityProduct = window.store.get("quantity" + this._productJson.id);
            quantityProduct = Number(quantityProduct);
            if (!quantityProduct || isNaN(quantityProduct)) {
                quantityProduct = 1;
            }
            price = Number(price) * quantityProduct;
        }
        return price;
    };
    /**
     * trả về phần trăm giảm giá
     * @param price giá bán
     * @param comparePrice giá gốc
     * @returns trăm giảm giá
     */
    GtProductSaveV2.prototype.getPercentDiscount = function (price, comparePrice) {
        var diff = comparePrice - price;
        diff = diff / comparePrice;
        diff = diff * 100;
        var diffString = diff.toString();
        if (this.settings.roundNoZeroes) {
            diffString = this.roundTo(diff, this.settings.roundPercent);
        }
        else {
            diffString = diff.toFixed(this.settings.roundPercent);
        }
        diffString += "%";
        if (this.settings.dataFormat && this.settings.dataFormatKey) {
            diffString = this.settings.dataFormat.replace(this.settings.dataFormatKey, diffString);
        }
        return diffString;
    };
    /**
     * Làm tròn số tới hàng thập phân thứ n bỏ O ở cuối string nếu có
     * @param n giá trị cần làm tròn
     * @param digits Làm tròn số tới hàng thập phân thứ
     * @returns string
     */
    GtProductSaveV2.prototype.roundTo = function (n, digits) {
        if (digits === undefined) {
            digits = 0;
        }
        var multiplicator = Math.pow(10, digits);
        n = parseFloat((n * multiplicator).toFixed(11));
        var test = Math.round(n) / multiplicator;
        return test.toFixed(digits);
    };
    return GtProductSaveV2;
}());
/**
 * gtProductSaveV2
 * @param params setting lib product gtProductSaveV2
 * @returns gtProductSaveV2
 */
window.SOLID.library.gtProductSaveV2 = function (params) {
    return new GtProductSaveV2(params);
};
exports.default = {};


/***/ })

/******/ });
});
        }
        funcLib108();
      } catch(e) {
        console.error("Error lib id: 108" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib65 = function() {
          "use strict";
(function () {
  window.SOLID = window.SOLID || {};
  var Countdown = function (options) {
    var _settings = {
      id: "",
      key: "",
      endDate: null,
      distance: 100,
      coutdown: true,
      outputFormat: "week|day|hour|minute|second",

      // The callback
      onStart: function () {},
      onStop: function () {},
      onInterval: function () {},
    };
    var fn = {};
    var _this = this;

    var decisecond = 100;
    var second = decisecond * 10;
    var minute = second * 60;
    var hour = minute * 60;
    var day = hour * 24;
    var week = day * 7;
    var uniqueKey = "";

    var init = function () {
      _settings = _this.extend({}, _settings, options);
      uniqueKey = "_delayInterval" + _settings.id;
      clearInterval(window[uniqueKey]);


      if (_settings.coutdown && _settings.endDate) {
        _this.start();
      }
    };
    // Public function

    fn.start = function () {
      _settings.coutdown = true;
      if (_settings.endDate) {
        _this.start();
      }
    };
    fn.stop = function () {
      _settings.coutdown = false;
      _this.stop();
    };

    // Private function
    this.extend = function (out) {
      out = out || {};

      for (var i = 1; i < arguments.length; i++) {
        if (!arguments[i]) { continue; }

        for (var key in arguments[i]) {
          if (arguments[i].hasOwnProperty(key)) { out[key] = arguments[i][key]; }
        }
      }

      return out;
    };
    this.start = function () {
      _settings.onStart();
      _this.interval();
    };
    this.stop = function () {
      clearInterval(window[uniqueKey]);
      _settings.onStop();
    };
    this.interval = function () {
      var distance = _this.getRemainingTime(_settings.endDate);

      if (distance <= 0) {
        _this.stop();
        return;
      }

      clearInterval(window[uniqueKey]);
      window[uniqueKey] = setInterval(function () {
        var objectTime = _this.formatOutput(distance, _settings.outputFormat);

        _settings.onInterval(objectTime);
        distance = distance - _settings.distance;
        if (distance <= 0) {
          _this.stop();
          return;
        }
      }, _settings.distance);
    };

    /**
     * Calculates remaining time and returns a distance between the endDate and time now
     * @param {Number, Date} endDate
     */
    this.getRemainingTime = function (endDate) {
      var now = new Date().getTime();
      var endTime = new Date(endDate).getTime();
      var distance = endTime - now;

      return distance;
    };

    /**
     * Turn the remaining time into an object with information in the format
     * @param {Number} distance
     * @param {String} format 'week|day|hour|minute|second|decisecond'
     */
    this.formatOutput = function (distance, format) {
      var objectReturn = {
        weeks: 0,
        days: 0,
        hours: 0,
        minutes: 0,
        seconds: 0,
        deciseconds: 0,
      };

      distance = Math.ceil(distance);
      var formatItems = format.split("|");

      if (formatItems.indexOf("week") != -1) {
        objectReturn.weeks = Math.floor(distance / (week));
        distance = distance % week;
      }
      if (formatItems.indexOf("day") != -1) {
        objectReturn.days = Math.floor(distance / (day));
        distance = distance % day;
      }
      if (formatItems.indexOf("hour") != -1) {
        objectReturn.hours = Math.floor(distance / (hour));
        distance = distance % hour;
      }
      if (formatItems.indexOf("minute") != -1) {
        objectReturn.minutes = Math.floor(distance / (minute));
        distance = distance % minute;
      }
      if (formatItems.indexOf("second") != -1) {
        objectReturn.seconds = Math.floor(distance / (second));
        distance = distance % second;
      }
      if (formatItems.indexOf("decisecond") != -1) {
        objectReturn.deciseconds = Math.floor(distance / (decisecond));
        distance = distance % decisecond;
      }
      return objectReturn;
    };

    init();
    return fn;
  };

  window.SOLID.Countdown = function (options) {
    return new Countdown(options);
  };
})();

        }
        funcLib65();
      } catch(e) {
        console.error("Error lib id: 65" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcLib17 = function() {
          "use strict";
/* gfProductZoomImage */
(function (jQuery) {
  var GfProductZoomImage = function (element, options, $) {
    var defaults = {
      classHoverItem: null,
      scale: 1.5,
      htmlZoom: '<div class="gt_product-zoom"></div>',
      classSection: null,
    };

    this.settings = {};

    var $element = jQuery(element);
    var _this = this;
    var _url;
    var _$html;

    this.init = function () {
      const checkDevice = _this.getDeviceType();
      if (checkDevice !== "desktop") {
        return;
      }
      this.settings = jQuery.extend({}, defaults, options);
      var $itemHover = $element.closest(_this.settings.classHoverItem);

      if ($itemHover && $itemHover.length > 0) {
        var classElement = $itemHover.attr("class");
        // gt_product-image--feature gt_product-image
        var res = classElement.split(" ");

        if (_this.settings.classSection != null) {
          var cssClassName = "css-" + _this.settings.classSection;
          var css = '<style type="text/css" class="' + cssClassName + '">';

          css += _this.settings.classSection + " ." + res.join(".") + "{position:relative;overflow:hidden}";
          css += _this.settings.classSection + " .gt_product-img-box div.gt_product-zoom{display: none;position:absolute;top:0;left:0;width:100%;height:100%;background-color: #fff;background-repeat:no-repeat;background-position:center;background-size:cover;transition:transform .5s ease-out}";
          css += "</style>";
          if (!jQuery(cssClassName) || jQuery(cssClassName).length == 0) {
            jQuery("body").append(css);
          }
        }

        var $html = jQuery(_this.settings.htmlZoom);

        _$html = $html;
        if (!$itemHover.find(".gt_product-zoom") || $itemHover.find(".gt_product-zoom").length == 0) {
          $itemHover.append(_$html);
        }

        _this.event();
      }
    };

    this.event = function () {
      $element.closest(_this.settings.classHoverItem)
        .on("mouseover", function () {
          if (_this.settings.scale !== 1) {
            _url = $element.attr("src");
            _$html.css({
              display: "block", 
              "width": "100%",
              "height": "100%",
              "top": "0%",
              "left": "0%",
              "z-index": "9",
              "background-repeat": "no-repeat",
              "background-color": "#fff",
              "background-position": "center",
              "background-size": "cover",
              "transition": "transform .5s ease-out",
              "position": "absolute",
              "background-image": "url(" + _url + ")",
              transform: "scale(" + _this.settings.scale + ")",
            });
            $element.css("opacity", 0);
          }
        })
        .on("mouseout", function () {
          if (_this.settings.scale !== 1) {
            _$html.css({
              transform: "scale(1)",
              display: "none",
              "z-index": "-1",
            });
            $element.css("opacity", 1);
          }
        })
        .on("mousemove", function (e) {
          if (_this.settings.scale !== 1) {
            var $this = $(this);

            _$html.css({
              "transform-origin": ((e.pageX - $this.offset().left) / $this.width()) * 100 + "% " + ((e.pageY - $this.offset().top) / $this.height()) * 100 + "%",
              display: "block",
            });
            $element.css("opacity", 0);
          }
        });
    };

    this.getDeviceType = function() {
      var userAgent = navigator.userAgent;
      if (/(tablet|ipad|playbook|silk)|(android(?!.*mobi))/i.test(userAgent)) {
        return "tablet";
      }
      if (/Mobile|iP(hone|od)|Android|BlackBerry|IEMobile|Kindle|Silk-Accelerated|(hpw|web)OS|OperaM(obi|ini)/.test(userAgent)) {
        return "mobile";
      }
      return "desktop";
    }

    this.init();
  };

  jQuery.fn.gfProductZoomImage = function (options) {
    return this.each(function () {
      if (undefined == jQuery(this).data("gfproductZoomImage")) {
        var plugin = new GfProductZoomImage(this, options, jQuery);

        jQuery(this).data("gfproductzoomimage", plugin);
      }
    });
  };
})(jQuery);

        }
        funcLib17();
      } catch(e) {
        console.error("Error lib id: 17" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSection3qX1gpR9pRgvLGG = function() {
          (function() {
  var elementClassName = ".gt_section-3qX1gpR9pRgvLGG";
  var id = "3qX1gpR9pRgvLGG";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var windowWidth = $(window).width();
    var itemCount = $element.find(".gt_tab-title").length;
    var currentIndex = 1;
    var tabContent = $element.find(".gt_tab-content");
    var tabTitles = $element.find(".gt_tab-title");
    var isAutoActiveFirst = "false" === "true";
    var cacheWindowWidth = $(window).width();
    /* store get state block script */
    /* methods block script */
    function tabClick() {
      var currentItem = $(this);
      var attr = $(this).attr("index");
      var windowWidth = $(window).width();
      if (windowWidth > 576) {
        tabContent.removeClass("gt_active-content");
        tabTitles.removeClass("gt_active-title");
        currentIndex = tabTitles.index($(this)) + 1;
        currentItem.addClass("gt_active-title");
        $element.find('.gt_tab-title[index="' + attr + '"]').addClass("gt_active-title");
        $element.find('.gt_tab-content[index="' + attr + '"]').addClass("gt_active-content");
      } else if (windowWidth < 576) {
        if (currentItem.hasClass("gt_active-title")) {
          currentItem.removeClass("gt_active-title");
          tabContent.removeClass("gt_active-content");
        } else {
          var $itemActive = $element.find(".gt_tab-title.gt_active-title");
          if ($itemActive && $itemActive.length) {
            tabContent.removeClass("gt_active-content");
            tabTitles.removeClass("gt_active-title");
          }
          currentItem.addClass("gt_active-title");
          $element.find('.gt_tab-content[index="' + attr + '"]').addClass("gt_active-content");
        }
      } else {
        return false;
      }
    }

    function activeTab() {
      if (currentIndex > itemCount) {
        currentIndex = 1;
      }
      tabContent.removeClass("gt_active-content");
      tabTitles.removeClass("gt_active-title");
      var currentItem = tabTitles.eq(currentIndex - 1);
      if (windowWidth <= 576 && isAutoActiveFirst) {
        var currentItem = tabTitles.eq("1" - 1);
      }
      currentItem.addClass("gt_active-title");
      var attr = currentItem.attr("index");
      var $tabContentActive = $element.find('.gt_tab-content[index="' + attr + '"]');
      $tabContentActive.addClass("gt_active-content");
      if (windowWidth <= 576 && !isAutoActiveFirst) {
        currentItem.removeClass("gt_active-title");
        $tabContentActive.removeClass("gt_active-content");
      }
    }
    /* init block script */
    activeTab();
    $(window).off("resize.checkSwitchScreens3qX1gpR9pRgvLGG").on("resize.checkSwitchScreens3qX1gpR9pRgvLGG", function() {
      windowWidth = $(window).width();
      if ((cacheWindowWidth <= 576 && windowWidth > 576) || (cacheWindowWidth > 576 && windowWidth <= 576)) {
        activeTab();
      }
      cacheWindowWidth = windowWidth;
    });
    /* store subscribe block script */
    /* events block script */
    var $elements_1 = $element.find(".gt_tab-title");
    $elements_1.off("click").on("click", tabClick);
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESSection3qX1gpR9pRgvLGG()
      } catch(e) {
        console.error("Error ESSection Id: 3qX1gpR9pRgvLGG" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_productTab = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_productTab";
  var id = "3qX1gpR9pRgvLGG_productTab";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_productTab",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_productTab()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_productTab" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabContainer = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_tabContainer";
  var id = "3qX1gpR9pRgvLGG_tabContainer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "true" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"fade-up"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_tabContainer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_tabContainer()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabContainer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabSeparator_0 = function() {
          
        }
        funcESAtom3qX1gpR9pRgvLGG_tabSeparator_0()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabSeparator_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabItem_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_tabItem_1";
  var id = "3qX1gpR9pRgvLGG_tabItem_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_tabItem_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_tabItem_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabItem_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabTitle_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_tabTitle_1";
  var id = "3qX1gpR9pRgvLGG_tabTitle_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_tabTitle_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_tabTitle_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_tabTitle_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabTitle_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabLine_1 = function() {
          
        }
        funcESAtom3qX1gpR9pRgvLGG_tabLine_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabLine_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_iconOpen_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_iconOpen_1";
  var id = "3qX1gpR9pRgvLGG_iconOpen_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_iconOpen_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_iconOpen_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_iconOpen_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_iconClose_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_iconClose_1";
  var id = "3qX1gpR9pRgvLGG_iconClose_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_iconClose_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_iconClose_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_iconClose_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabContent_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_tabContent_1";
  var id = "3qX1gpR9pRgvLGG_tabContent_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_tabContent_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_tabContent_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabContent_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_productDescription_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_productDescription_1";
  var id = "3qX1gpR9pRgvLGG_productDescription_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const turnOffDescription = "false" === "true";
    const heightSettingDes = "100px";
    /* store get state block script */
    /* methods block script */
    function initView() {
      //resetcss
      if (!turnOffDescription) {
        $element.find(".gt_description").css("height", "");
        $element.find(".gt_btn-view-more").css({
          padding: "",
          position: ""
        });
      }
      var heightCurrentBoxDes = 0;
      if ($element.hasClass("gt_product-desciption--tab")) {
        heightCurrentBoxDes = $element.parents(".gt_active-content").find(".gt_box-desc").height();
      } else {
        heightCurrentBoxDes = $element.find(".gt_box-desc").height();
      }
      $element.find(".gt_description").removeClass("open");
      if (heightCurrentBoxDes <= parseInt(heightSettingDes) && !turnOffDescription) {
        $element.find(".gt_btn-view-more").addClass("gt_hidden");
        $element.find(".gt_description").css("height", "auto");
      } else {
        $element.find(".gt_btn-view-more").removeClass("gt_hidden");
        $element.find(".gt_description").css("height", "");
      }
      //setheightwhenturnoffdescription
      if (turnOffDescription) {
        $element.find(".gt_description").css("height", "auto");
        $element.find(".gt_btn-view-more").css({
          padding: "0px",
          position: "relative"
        });
      }
    }

    function toggleDes() {
      $element.find(".gt_description").toggleClass("open");
    }
    
    function checkAtomExist() {	
      if ($element.find(".gt_description").length < 1) {	
        $element.hide();	
      }	
    }
    
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_productDescription_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_productDescription_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    initView();
    /* store subscribe block script */
    /* events block script */
    var $elements_1 = $element.find("#toggleDes");
    $elements_1.off("click").on("click", toggleDes);
    /* destroy block script */
    
    /* public func block script */
    return {
      initView,
    };
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      var publicFunc = script($target, indexEl);
      window.SOLID.public = window.SOLID.public || {};
      window.SOLID.public["atom" + "_" + id + "_" + indexEl] = publicFunc;
      if (publicFunc) {
        store.dispatch("public_function_atom_" + id, publicFunc);
      }
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_productDescription_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_productDescription_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reviewBox_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reviewBox_1";
  var id = "3qX1gpR9pRgvLGG_reviewBox_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reviewBox_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reviewBox_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reviewBox_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_imageBlock_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_imageBlock_1";
  var id = "3qX1gpR9pRgvLGG_imageBlock_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_imageBlock_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_imageBlock_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_imageBlock_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_image_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_image_1";
  var id = "3qX1gpR9pRgvLGG_image_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_image_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_image_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_image_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_boxMessage_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_boxMessage_1";
  var id = "3qX1gpR9pRgvLGG_boxMessage_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_boxMessage_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_boxMessage_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_boxMessage_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_title1_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_title1_1";
  var id = "3qX1gpR9pRgvLGG_title1_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_title1_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_title1_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_title1_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_title1_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_message1_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_message1_1";
  var id = "3qX1gpR9pRgvLGG_message1_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_message1_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_message1_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_message1_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_message1_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_title2_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_title2_1";
  var id = "3qX1gpR9pRgvLGG_title2_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_title2_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_title2_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_title2_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_title2_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_message2_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_message2_1";
  var id = "3qX1gpR9pRgvLGG_message2_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_message2_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_message2_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_message2_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_message2_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabItem_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_tabItem_2";
  var id = "3qX1gpR9pRgvLGG_tabItem_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_tabItem_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_tabItem_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabItem_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabTitle_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_tabTitle_2";
  var id = "3qX1gpR9pRgvLGG_tabTitle_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_tabTitle_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_tabTitle_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_tabTitle_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabTitle_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabLine_2 = function() {
          
        }
        funcESAtom3qX1gpR9pRgvLGG_tabLine_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabLine_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_iconOpen_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_iconOpen_2";
  var id = "3qX1gpR9pRgvLGG_iconOpen_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_iconOpen_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_iconOpen_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_iconOpen_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_iconClose_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_iconClose_2";
  var id = "3qX1gpR9pRgvLGG_iconClose_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_iconClose_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_iconClose_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_iconClose_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabContent_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_tabContent_2";
  var id = "3qX1gpR9pRgvLGG_tabContent_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_tabContent_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_tabContent_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabContent_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_imageBlock_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_imageBlock_2";
  var id = "3qX1gpR9pRgvLGG_imageBlock_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "true" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"fade-up"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_imageBlock_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_imageBlock_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_imageBlock_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_image_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_image_2";
  var id = "3qX1gpR9pRgvLGG_image_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "true" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"fade-down"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_image_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_image_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_image_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_boxMessage_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_boxMessage_2";
  var id = "3qX1gpR9pRgvLGG_boxMessage_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_boxMessage_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_boxMessage_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_boxMessage_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_title1_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_title1_2";
  var id = "3qX1gpR9pRgvLGG_title1_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_title1_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_title1_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_title1_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_title1_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_message1_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_message1_2";
  var id = "3qX1gpR9pRgvLGG_message1_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_message1_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_message1_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_message1_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_message1_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_title2_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_title2_2";
  var id = "3qX1gpR9pRgvLGG_title2_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_title2_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_title2_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_title2_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_title2_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_message2_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_message2_2";
  var id = "3qX1gpR9pRgvLGG_message2_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_message2_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_message2_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_message2_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_message2_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabItem_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_tabItem_3";
  var id = "3qX1gpR9pRgvLGG_tabItem_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_tabItem_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_tabItem_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabItem_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabTitle_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_tabTitle_3";
  var id = "3qX1gpR9pRgvLGG_tabTitle_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_tabTitle_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_tabTitle_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_tabTitle_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabTitle_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabLine_3 = function() {
          
        }
        funcESAtom3qX1gpR9pRgvLGG_tabLine_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabLine_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_iconOpen_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_iconOpen_3";
  var id = "3qX1gpR9pRgvLGG_iconOpen_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_iconOpen_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_iconOpen_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_iconOpen_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_iconClose_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_iconClose_3";
  var id = "3qX1gpR9pRgvLGG_iconClose_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_iconClose_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_iconClose_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_iconClose_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabContent_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_tabContent_3";
  var id = "3qX1gpR9pRgvLGG_tabContent_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_tabContent_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_tabContent_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabContent_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonContent_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonContent_3";
  var id = "3qX1gpR9pRgvLGG_reasonContent_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonContent_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonContent_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonContent_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonTitle_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonTitle_3";
  var id = "3qX1gpR9pRgvLGG_reasonTitle_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_reasonTitle_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_reasonTitle_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonTitle_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonTitle_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonDesc_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonDesc_3";
  var id = "3qX1gpR9pRgvLGG_reasonDesc_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_reasonDesc_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_reasonDesc_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonDesc_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonDesc_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadges_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadges_3";
  var id = "3qX1gpR9pRgvLGG_reasonBadges_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadges_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadges_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadges_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadge_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadge_3";
  var id = "3qX1gpR9pRgvLGG_reasonBadge_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadge_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadge_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadge_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadgeImage_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadgeImage_3";
  var id = "3qX1gpR9pRgvLGG_reasonBadgeImage_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeImage_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadgeImage_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadgeImage_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadgeText_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadgeText_3";
  var id = "3qX1gpR9pRgvLGG_reasonBadgeText_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeText_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeText_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadgeText_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadgeText_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadge2_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadge2_3";
  var id = "3qX1gpR9pRgvLGG_reasonBadge2_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadge2_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadge2_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadge2_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadgeImage2_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadgeImage2_3";
  var id = "3qX1gpR9pRgvLGG_reasonBadgeImage2_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeImage2_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadgeImage2_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadgeImage2_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadgeText2_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadgeText2_3";
  var id = "3qX1gpR9pRgvLGG_reasonBadgeText2_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeText2_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeText2_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadgeText2_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadgeText2_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadge3_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadge3_3";
  var id = "3qX1gpR9pRgvLGG_reasonBadge3_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadge3_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadge3_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadge3_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadgeImage3_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadgeImage3_3";
  var id = "3qX1gpR9pRgvLGG_reasonBadgeImage3_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeImage3_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadgeImage3_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadgeImage3_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadgeText3_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadgeText3_3";
  var id = "3qX1gpR9pRgvLGG_reasonBadgeText3_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeText3_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeText3_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadgeText3_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadgeText3_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonImageBox_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonImageBox_3";
  var id = "3qX1gpR9pRgvLGG_reasonImageBox_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonImageBox_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonImageBox_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonImageBox_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonImage_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonImage_3";
  var id = "3qX1gpR9pRgvLGG_reasonImage_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonImage_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonImage_3()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonImage_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabItem_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_tabItem_4";
  var id = "3qX1gpR9pRgvLGG_tabItem_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_tabItem_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_tabItem_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabItem_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabTitle_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_tabTitle_4";
  var id = "3qX1gpR9pRgvLGG_tabTitle_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_tabTitle_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_tabTitle_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_tabTitle_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabTitle_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabLine_4 = function() {
          
        }
        funcESAtom3qX1gpR9pRgvLGG_tabLine_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabLine_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_iconOpen_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_iconOpen_4";
  var id = "3qX1gpR9pRgvLGG_iconOpen_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_iconOpen_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_iconOpen_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_iconOpen_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_iconClose_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_iconClose_4";
  var id = "3qX1gpR9pRgvLGG_iconClose_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_iconClose_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_iconClose_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_iconClose_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_tabContent_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_tabContent_4";
  var id = "3qX1gpR9pRgvLGG_tabContent_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_tabContent_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_tabContent_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_tabContent_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reviewBox_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reviewBox_4";
  var id = "3qX1gpR9pRgvLGG_reviewBox_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reviewBox_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reviewBox_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reviewBox_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonContent_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonContent_4";
  var id = "3qX1gpR9pRgvLGG_reasonContent_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonContent_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonContent_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonContent_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonTitle_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonTitle_4";
  var id = "3qX1gpR9pRgvLGG_reasonTitle_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_reasonTitle_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_reasonTitle_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonTitle_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonTitle_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonDesc_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonDesc_4";
  var id = "3qX1gpR9pRgvLGG_reasonDesc_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_reasonDesc_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_reasonDesc_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonDesc_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonDesc_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadges_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadges_4";
  var id = "3qX1gpR9pRgvLGG_reasonBadges_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadges_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadges_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadges_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadge_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadge_4";
  var id = "3qX1gpR9pRgvLGG_reasonBadge_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadge_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadge_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadge_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadgeImage_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadgeImage_4";
  var id = "3qX1gpR9pRgvLGG_reasonBadgeImage_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeImage_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadgeImage_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadgeImage_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadgeText_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadgeText_4";
  var id = "3qX1gpR9pRgvLGG_reasonBadgeText_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeText_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeText_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadgeText_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadgeText_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadge2_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadge2_4";
  var id = "3qX1gpR9pRgvLGG_reasonBadge2_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadge2_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadge2_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadge2_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadgeImage2_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadgeImage2_4";
  var id = "3qX1gpR9pRgvLGG_reasonBadgeImage2_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeImage2_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadgeImage2_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadgeImage2_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadgeText2_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadgeText2_4";
  var id = "3qX1gpR9pRgvLGG_reasonBadgeText2_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeText2_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeText2_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadgeText2_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadgeText2_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadge3_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadge3_4";
  var id = "3qX1gpR9pRgvLGG_reasonBadge3_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadge3_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadge3_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadge3_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadgeImage3_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadgeImage3_4";
  var id = "3qX1gpR9pRgvLGG_reasonBadgeImage3_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeImage3_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadgeImage3_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadgeImage3_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonBadgeText3_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonBadgeText3_4";
  var id = "3qX1gpR9pRgvLGG_reasonBadgeText3_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeText3_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3qX1gpR9pRgvLGG_reasonBadgeText3_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonBadgeText3_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonBadgeText3_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonImageBox_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonImageBox_4";
  var id = "3qX1gpR9pRgvLGG_reasonImageBox_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonImageBox_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonImageBox_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonImageBox_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3qX1gpR9pRgvLGG_reasonImage_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-3qX1gpR9pRgvLGG_reasonImage_4";
  var id = "3qX1gpR9pRgvLGG_reasonImage_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3qX1gpR9pRgvLGG_reasonImage_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3qX1gpR9pRgvLGG_reasonImage_4()
      } catch(e) {
        console.error("Error ESAtom Id: 3qX1gpR9pRgvLGG_reasonImage_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectionqcem7yBprjYs9Ii = function() {
          (function() {
  var elementClassName = ".gt_section-qcem7yBprjYs9Ii";
  var id = "qcem7yBprjYs9Ii";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var $notes = $element.find("[name='note']");
    var $gtConditions = $element.find(".gt_terms-cart");
    /* store get state block script */
    /* methods block script */
    function nextCheckout(e) {
      if ($gtConditions && $gtConditions.length) {
        var $input1 = $gtConditions.find("input");
        if ($input1 && $input1.length && !$input1.is(":checked")) {
          e.preventDefault();
          $gtConditions.addClass("gt_active");

          setTimeout(function() {
            $gtConditions.removeClass("gt_active");
          }, 1000);
          return false;
        }
      }
    }

    function scrollToTerms(e) {
      if ($gtConditions && $gtConditions.length) {
        var $input1 = $gtConditions.find("input");
        if ($input1 && $input1.length && !$input1.is(":checked")) {
          e.preventDefault();
          const top = $gtConditions.offset().top - $(window).height() / 2;
          $("html, body").animate({
            scrollTop: top
          }, 300);
          return false;
        }
      }
    }
    /* init block script */
    var defineOptions = {
      id: id,
      mode: "production",

      htmlItemProperties: `<div class="gt_property--item"> <span class="title_property"> </span> <span class="detail_property"></span></div>`, //htmlproperties
      classContainerProperties: ".gt_property", //thẻwappercủaproperties
      classNameItemProperty: ".title_property", //namecủamộtproperty
      classValueItemProperty: ".detail_property", //valuecủamộtproperty

      classContainer: ".gt_cart_content",
      classItemCart: ".gt_items--content",
      classProductJson: ".ProductJson",
      classContentPage: ".gt_cart-content",
      classImage: ".gt_cart--image img",
      classTitle: null,
      classVariants: ".gt_variant-title",
      classRemove: ".gt_button-remove",
      classQuantityPlus: ".gt_quantity_plus",
      classQuantityMinus: ".gt_quantity_minus",
      classInputQuantity: ".number_quantity",
      classPriceItem: ".item_price",
      classPriceCompareItem: ".gt_item__price-compare",
      classPriceCompareLineItem: ".total_compare_price",
      classPriceLineItem: ".total_current_price",
      classWrapperSubtotal: ".gt_save-money",

      classPriceSavedCart: ".gt_number-save",
      classPriceSubtotalCart: ".gt_number_sub_total",
      classSubtotalPercent: ".gt_percent-number--save",
      classPriceTotalCart: ".number_total",

      classCartEmpty: ".gt_cart-empty",

      classPopupDeleteItem: ".gt_remove .gt_show_popup--delete",
      classAgreeDeleteItem: ".confirm-remove-item-cart",
      classCancelDeleteItem: ".cancel-remove-item-cart",

      classPopupWarning: ".gt_remove .gt_show_popup--delete",
      classAgreeDeleteWarning: ".confirm-remove-item-cart",
      classCancelDeleteWarning: ".cancel-remove-item-cart",

      classWrapperDiscount: ".gt_cart--discount",
      classDiscountCode: ".gt_discount-code",
      classDiscountPrice: ".gt_discount-price-number",
      classDiscountedPriceItem: '.gt_item__discounted-price',
      classDiscountedPriceLineItem: '.gt_total__discounted-price',
    };

    var libParams = {
      $element: $element,
      settings: defineOptions
    };

    window.SOLID.library.gtCartV5(libParams);
    window.SOLID.library.gtCartV5Input(libParams);
    window.SOLID.library.gtCartV5RemoveItem(libParams);
    window.SOLID.library.gtCartV5Discount(libParams);

    /**Fixasyncordernote:supportmultiordernotefordesktopandmobile...*/
    if ($notes && $notes.length) {
      $notes.off("keyup.changeNote keydown.changeNote change.changeNote paste.changeNote").on("keyup.changeNote keydown.changeNote change.changeNote paste.changeNote", function() {
        var $note = jQuery(this);
        var value = $note.val();
        $notes.not(this).attr("value", value).val(value);
      });
    };
    window.store.change("saveMoney", function(cartSave) {
      if ($element.find(".gt_number-save")) {
        $element.find(".gt_number-save").html(cartSave);
      }
    });
    window.store.change("cart.item_count", function(cartNumber) {
      if ($element.find(".gt_cart-count")) {
        $element.find(".gt_cart-count").html(cartNumber);
      }
    });
    /* store subscribe block script */
    /* events block script */
    var $elements_1 = $element.find(".gt_button-checkout");
    $elements_1.off("click").on("click", nextCheckout);
    var $elements_2 = $element.find(".gt_button--sticky");
    $elements_2.off("click.scroll").on("click.scroll", scrollToTerms);
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESSectionqcem7yBprjYs9Ii()
      } catch(e) {
        console.error("Error ESSection Id: qcem7yBprjYs9Ii" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_headingBox = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_headingBox";
  var id = "qcem7yBprjYs9Ii_headingBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_headingBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_headingBox()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_headingBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_headingText = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_headingText";
  var id = "qcem7yBprjYs9Ii_headingText";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "qcem7yBprjYs9Ii_headingText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "qcem7yBprjYs9Ii_headingText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_headingText()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_headingText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_freeShipping = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_freeShipping";
  var id = "qcem7yBprjYs9Ii_freeShipping";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const freeShippingType = 'shipping_rates';
    var barActive = $(".gt_bar.gt_bar--active").last();
    var minimumPurchaseAmount = 0;
    var cartTotal = 0;
    var activeIndex = 0;
    var mode = 'production';
    /* store get state block script */
    /* methods block script */
    function initScript() {
      getCheckDiscount();
      if (minimumPurchaseAmount) {
        $element.show();
        getCartTotalPrice();
        if (cartTotal == 0) {
          activeIndex = 1;
          $element.find('.total-free').html(formatMoneyPlugin(minimumPurchaseAmount));
        } else if (cartTotal >= minimumPurchaseAmount) {
          activeIndex = 10;
          $element.find('.total-free').html(formatMoneyPlugin(0));
          if (mode === "production") {
            $element.find('.gt_text-free-shipping').addClass('gt_hidden');
            $element.find('.gt_freeship-success').removeClass('gt_hidden');
          }
        } else {
          $element.find('.total-free').html(formatMoneyPlugin(minimumPurchaseAmount - cartTotal));
          if (mode === "production") {
            $element.find('.gt_freeship-success').addClass('gt_hidden');
            $element.find('.gt_text-free-shipping').removeClass('gt_hidden');
          }
          const percentageHit = cartTotal / minimumPurchaseAmount * 10;
          if (percentageHit < 1) {
            activeIndex = 1;
          } else {
            activeIndex = Math.floor(percentageHit);
          }
        }
        const $items = $element.find('.gt_bar');
        if ($items && $items.length) {
          for (var index = 0; index < $items.length; index++) {
            const $item = $($items[index]);
            if (index < activeIndex - 1) {
              $item.addClass('gt_bar--active');
              $item.removeClass('freeShip');
              $item.find('.gt_icon-freeShip').addClass('gt_hidden');
            } else if (index == activeIndex - 1) {
              $item.addClass('gt_bar--active');
              $item.addClass('freeShip');
              $item.find('.gt_icon-freeShip').removeClass('gt_hidden');
            } else {
              $item.removeClass('gt_bar--active');
              $item.removeClass('freeShip');
              $item.find('.gt_icon-freeShip').addClass('gt_hidden');
            }
          }
        }
      } else {
        $element.hide();
      }
    }

    function getCheckDiscount() {
      if (freeShippingType == "shipping_rates") {
        minimumPurchaseAmount = Number("200") * 100;
      } else {
        const campaignSettings = window.SOLID.store.getState("esDiscountsData") || [];
        if (campaignSettings.length) {
          const freeShipDiscount = campaignSettings.find(item => item.price_rule.target_type === 'shipping_line');
          if (freeShipDiscount) {
            minimumPurchaseAmount = freeShipDiscount.price_rule.prerequisite_subtotal_range.greater_than_or_equal_to * 100;
          }
        }
      }
    }

    function getCartTotalPrice() {
      const cart = window.SOLID.store.getState("cart") || null;
      if (cart) {
        cartTotal = cart.total_price - getTotalDiscount(cart);
      }
    }

    function getTotalDiscount(cart) {
      var discountCart = window.SOLID.store.getState("gtCartDiscountPrice");
      if (discountCart && discountCart.price && cart && cart.total_discount == 0) {
        return parseInt(discountCart.price);
      }
      return 0;
    }

    function formatMoneyPlugin(price, notApplyRoundDecimal) {
      var dataCurrency = window.store.get("dataCurrency");
      var format = window.__GemSettings.money;
      if (dataCurrency) {
        price = window.Shopify.gemFormatMoney(price, dataCurrency.currency, dataCurrency.data, null, notApplyRoundDecimal);
      } else {
        price = window.Shopify.formatMoney(price, format);
      }
      return price;
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_freeShipping",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    barActive.addClass('freeShip');
    initScript();
    /* store subscribe block script */
    store.subscribe("esDiscountsData", initScript);
    store.subscribe("gtCartInput", initScript);
    store.subscribe("dataCurrency", initScript);
    store.subscribe("gtCartDiscountPrice", initScript);

    function destroy() {
      store.unsubscribe("esDiscountsData", initScript);
      store.unsubscribe("gtCartInput", initScript);
      store.unsubscribe("dataCurrency", initScript);
      store.unsubscribe("gtCartDiscountPrice", initScript);
    }
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_freeShipping()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_freeShipping" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartBox = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_cartBox";
  var id = "qcem7yBprjYs9Ii_cartBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_cartBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_cartBox()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartLeft = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_cartLeft";
  var id = "qcem7yBprjYs9Ii_cartLeft";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_cartLeft",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_cartLeft()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartLeft" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_titleBox = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_titleBox";
  var id = "qcem7yBprjYs9Ii_titleBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "qcem7yBprjYs9Ii_titleBox",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "qcem7yBprjYs9Ii_titleBox",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_titleBox()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_titleBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_productList = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_productList";
  var id = "qcem7yBprjYs9Ii_productList";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_productList",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_productList()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_productList" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_itemsBox = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_itemsBox";
  var id = "qcem7yBprjYs9Ii_itemsBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_itemsBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_itemsBox()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_itemsBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_itemsProduct = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_itemsProduct";
  var id = "qcem7yBprjYs9Ii_itemsProduct";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_itemsProduct",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_itemsProduct()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_itemsProduct" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartImage = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_cartImage";
  var id = "qcem7yBprjYs9Ii_cartImage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    /* store get state block script */
    /* methods block script */
    function initLibFeatureImage() {
      $element.gtProductFeatureImage({
        classFeatureImage: ".gt_product-image--feature",
        classImages: null,
        carousel: null,
        owlCarousel: null,
      });
    }

    function initLibProductZoom() {
      $element.find(".gt_product-image--feature").gfProductZoomImage({
        classHoverItem: ".gt_product-img-box",
        scale: "1.5",
        classSection: ".gt_atom-qcem7yBprjYs9Ii_cartImage",
      });
    }

    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }
    /* init block script */
    initLibFeatureImage();
    initLibProductZoom();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /* global block script */
  window.SOLID.store.subscribe("runjs" + "_atom_" + id, () => {
    $elements = document.querySelectorAll(elementClassName);
    main();
  });
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_cartImage()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartImage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartInfoBox = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_cartInfoBox";
  var id = "qcem7yBprjYs9Ii_cartInfoBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_cartInfoBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_cartInfoBox()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartInfoBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartTitle = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_cartTitle";
  var id = "qcem7yBprjYs9Ii_cartTitle";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "qcem7yBprjYs9Ii_cartTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "qcem7yBprjYs9Ii_cartTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_cartTitle()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartTitle" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartVariant = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_cartVariant()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartVariant" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartProperties = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_cartProperties()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartProperties" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartItemQuantity = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_cartItemQuantity()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartItemQuantity" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_priceBox = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_priceBox";
  var id = "qcem7yBprjYs9Ii_priceBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_priceBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_priceBox()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_priceBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartItemTotal = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_cartItemTotal()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartItemTotal" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartItemComparePriceTotal = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_cartItemComparePriceTotal()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartItemComparePriceTotal" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_iconRemove = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_iconRemove";
  var id = "qcem7yBprjYs9Ii_iconRemove";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_iconRemove",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_iconRemove()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_iconRemove" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_lineItems = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_lineItems()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_lineItems" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_orderNoteBox = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_orderNoteBox";
  var id = "qcem7yBprjYs9Ii_orderNoteBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_orderNoteBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_orderNoteBox()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_orderNoteBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_textOrderNote = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_textOrderNote";
  var id = "qcem7yBprjYs9Ii_textOrderNote";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "qcem7yBprjYs9Ii_textOrderNote",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "qcem7yBprjYs9Ii_textOrderNote",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_textOrderNote()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_textOrderNote" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartOrderNote = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_cartOrderNote";
  var id = "qcem7yBprjYs9Ii_cartOrderNote";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    /* store get state block script */
    /* methods block script */
    /* init block script */
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_cartOrderNote()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartOrderNote" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartRight = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_cartRight";
  var id = "qcem7yBprjYs9Ii_cartRight";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_cartRight",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_cartRight()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartRight" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_checkOutBox = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_checkOutBox";
  var id = "qcem7yBprjYs9Ii_checkOutBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_checkOutBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_checkOutBox()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_checkOutBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_titleCheckOut = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_titleCheckOut";
  var id = "qcem7yBprjYs9Ii_titleCheckOut";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "qcem7yBprjYs9Ii_titleCheckOut",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "qcem7yBprjYs9Ii_titleCheckOut",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_titleCheckOut()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_titleCheckOut" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_lineTitle = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_lineTitle()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_lineTitle" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartCount = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_cartCount()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartCount" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartCouponCode = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_cartCouponCode()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartCouponCode" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_lineCouponCode = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_lineCouponCode()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_lineCouponCode" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartSubTotal = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_cartSubTotal()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartSubTotal" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartDiscount = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_cartDiscount()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartDiscount" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartSave = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_cartSave()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartSave" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartTotal = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_cartTotal()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartTotal" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_lineSubTotal = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_lineSubTotal()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_lineSubTotal" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartCheckBox = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_cartCheckBox()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartCheckBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_buttonCheckOut = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_buttonCheckOut";
  var id = "qcem7yBprjYs9Ii_buttonCheckOut";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_buttonCheckOut",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target, indexEl);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_buttonCheckOut()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_buttonCheckOut" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_imageTrustBadge = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_imageTrustBadge";
  var id = "qcem7yBprjYs9Ii_imageTrustBadge";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_imageTrustBadge",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_imageTrustBadge()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_imageTrustBadge" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_deliveryText = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_deliveryText";
  var id = "qcem7yBprjYs9Ii_deliveryText";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "qcem7yBprjYs9Ii_deliveryText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "qcem7yBprjYs9Ii_deliveryText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_deliveryText()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_deliveryText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_boxCheckOutSticky = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_boxCheckOutSticky";
  var id = "qcem7yBprjYs9Ii_boxCheckOutSticky";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_boxCheckOutSticky",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_boxCheckOutSticky()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_boxCheckOutSticky" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartTotalSticky = function() {
          
        }
        funcESAtomqcem7yBprjYs9Ii_cartTotalSticky()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartTotalSticky" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_buttonCheckOutSticky = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_buttonCheckOutSticky";
  var id = "qcem7yBprjYs9Ii_buttonCheckOutSticky";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_buttonCheckOutSticky",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target, indexEl);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_buttonCheckOutSticky()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_buttonCheckOutSticky" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_cartRemoveItemPopup = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_cartRemoveItemPopup";
  var id = "qcem7yBprjYs9Ii_cartRemoveItemPopup";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var defineOptions = {
      classRemove: ".button_remove",
      classPopupDeleteItem: ".gt_show_popup--delete",
      classAgreeDeleteItem: ".confirm-remove-item-cart",
      classCancelDeleteItem: ".cancel-remove-item-cart",
      classCountItems: null, // số lượng item trong cart 

    }
    /* store get state block script */
    /* methods block script */
    /* init block script */
    $element.gtCartV2RemoveItem(defineOptions);
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target, indexEl);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_cartRemoveItemPopup()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_cartRemoveItemPopup" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_boxEmptyTop = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_boxEmptyTop";
  var id = "qcem7yBprjYs9Ii_boxEmptyTop";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_boxEmptyTop",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_boxEmptyTop()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_boxEmptyTop" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_iconCartEmpty = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_iconCartEmpty";
  var id = "qcem7yBprjYs9Ii_iconCartEmpty";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_iconCartEmpty",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_iconCartEmpty()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_iconCartEmpty" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_headingLargeEmpty = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_headingLargeEmpty";
  var id = "qcem7yBprjYs9Ii_headingLargeEmpty";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "qcem7yBprjYs9Ii_headingLargeEmpty",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "qcem7yBprjYs9Ii_headingLargeEmpty",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_headingLargeEmpty()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_headingLargeEmpty" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_messageEmpty = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_messageEmpty";
  var id = "qcem7yBprjYs9Ii_messageEmpty";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "qcem7yBprjYs9Ii_messageEmpty",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "qcem7yBprjYs9Ii_messageEmpty",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_messageEmpty()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_messageEmpty" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_buttonLinkEmptyTop = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_buttonLinkEmptyTop";
  var id = "qcem7yBprjYs9Ii_buttonLinkEmptyTop";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const isProduction = "production" === "production";
    let actions = `[]`
    const isCustomActions = "false" == "true"
    const openNewTab = "false" == "true"
    const linkButton = "/collections/all";
    const activeButtonFixContent = "false" === "true";
    const buttonFixContent = "Buy [!quantity!] items"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_buttonLinkEmptyTop",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }

    function addAction() {
      if (!isCustomActions) {
        if (linkButton != "") {
          actionsObj = [{
            "id": 1,
            "event": "click",
            "control": {
              "id": "1",
              "attribute": "1",
              "title": "Pick Link",
              "desc": "",
              "reference": "html",
              "type": "picklink",
              "value": linkButton,
              "newTab": openNewTab
            }
          }]
        } else {
          actionsObj = []
        }
        actions = JSON.stringify(actionsObj);
      }
      if (isProduction) {
        $element.customEvent(JSON.parse(actions), id + "_" + indexEl);
        /*Listenifisbuttonaddtocard*/

        window.SOLID.store.subscribe("loading-buy-now-qcem7yBprjYs9Ii_buttonLinkEmptyTop" + "_" + indexEl, function(isDisplay) {
          const $loadingEl = $element.find(".atom-button-loading-circle-loader");
          const $textEl = $element.find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              window.SOLID.store.dispatch("loading-buy-now-qcem7yBprjYs9Ii_buttonLinkEmptyTop" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                window.SOLID.store.dispatch("loading-buy-now-qcem7yBprjYs9Ii_buttonLinkEmptyTop" + "_" + indexEl, "");
              }, 3000);
            }
          }
        });
      }
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    addAction();
    if (activeButtonFixContent) {
      initFixContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_buttonLinkEmptyTop()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_buttonLinkEmptyTop" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_boxEmptyBottom = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_boxEmptyBottom";
  var id = "qcem7yBprjYs9Ii_boxEmptyBottom";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_boxEmptyBottom",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_boxEmptyBottom()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_boxEmptyBottom" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_boxContentEmpty = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_boxContentEmpty";
  var id = "qcem7yBprjYs9Ii_boxContentEmpty";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_boxContentEmpty",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_boxContentEmpty()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_boxContentEmpty" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_headingEmpty = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_headingEmpty";
  var id = "qcem7yBprjYs9Ii_headingEmpty";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "qcem7yBprjYs9Ii_headingEmpty",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "qcem7yBprjYs9Ii_headingEmpty",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_headingEmpty()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_headingEmpty" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_textEmpty = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_textEmpty";
  var id = "qcem7yBprjYs9Ii_textEmpty";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "qcem7yBprjYs9Ii_textEmpty",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "qcem7yBprjYs9Ii_textEmpty",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_textEmpty()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_textEmpty" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_buttonLinkEmpty = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_buttonLinkEmpty";
  var id = "qcem7yBprjYs9Ii_buttonLinkEmpty";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const isProduction = "production" === "production";
    let actions = `[]`
    const isCustomActions = "false" == "true"
    const openNewTab = "false" == "true"
    const linkButton = "/collections/all";
    const activeButtonFixContent = "false" === "true";
    const buttonFixContent = "Buy [!quantity!] items"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_buttonLinkEmpty",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }

    function addAction() {
      if (!isCustomActions) {
        if (linkButton != "") {
          actionsObj = [{
            "id": 1,
            "event": "click",
            "control": {
              "id": "1",
              "attribute": "1",
              "title": "Pick Link",
              "desc": "",
              "reference": "html",
              "type": "picklink",
              "value": linkButton,
              "newTab": openNewTab
            }
          }]
        } else {
          actionsObj = []
        }
        actions = JSON.stringify(actionsObj);
      }
      if (isProduction) {
        $element.customEvent(JSON.parse(actions), id + "_" + indexEl);
        /*Listenifisbuttonaddtocard*/

        window.SOLID.store.subscribe("loading-buy-now-qcem7yBprjYs9Ii_buttonLinkEmpty" + "_" + indexEl, function(isDisplay) {
          const $loadingEl = $element.find(".atom-button-loading-circle-loader");
          const $textEl = $element.find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              window.SOLID.store.dispatch("loading-buy-now-qcem7yBprjYs9Ii_buttonLinkEmpty" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                window.SOLID.store.dispatch("loading-buy-now-qcem7yBprjYs9Ii_buttonLinkEmpty" + "_" + indexEl, "");
              }, 3000);
            }
          }
        });
      }
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    addAction();
    if (activeButtonFixContent) {
      initFixContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_buttonLinkEmpty()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_buttonLinkEmpty" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_boxProductList = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_boxProductList";
  var id = "qcem7yBprjYs9Ii_boxProductList";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_boxProductList",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_boxProductList()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_boxProductList" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_boxProduct = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_boxProduct";
  var id = "qcem7yBprjYs9Ii_boxProduct";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_boxProduct",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_boxProduct()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_boxProduct" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomqcem7yBprjYs9Ii_productListItems = function() {
          (function() {
  var elementClassName = ".gt_atom-qcem7yBprjYs9Ii_productListItems";
  var id = "qcem7yBprjYs9Ii_productListItems";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "qcem7yBprjYs9Ii_productListItems",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomqcem7yBprjYs9Ii_productListItems()
      } catch(e) {
        console.error("Error ESAtom Id: qcem7yBprjYs9Ii_productListItems" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSection8h0gglAiUNVB1qE = function() {
          (function() {
  var elementClassName = ".gt_section-8h0gglAiUNVB1qE";
  var id = "8h0gglAiUNVB1qE";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var product;
    var gtCurrentVariant;
    /* store get state block script */
    /* methods block script */
    function setup() {
      getProduct();
      listenVariantChange();
      whenSubmitSoldOutSuccess();
    }

    function listenVariantChange() {
      if (!product || !product.id) {
        return;
      }
      window.SOLID.store.subscribe("variant" + product.id, function(variant) {
        setTimeout(() => {
          gtCurrentVariant = variant;
          renderSoldOutForm();
        });
      });
    }

    function getProduct() {
      var productJson = $element.find(".ProductJson");
      productJson = JSON.parse(productJson.html());
      product = productJson;
      if (!product) {
        return;
      }
      gtCurrentVariant =
        product.selected_or_first_available_variant ||
        (product.variants.length && product.variants[0]);
      renderSoldOutForm();
    }

    function renderSoldOutForm() {
      var $formSoldout = $element.find(".gt_box-sold-out");
      if (!$formSoldout.length) {
        revertNormalStatus();
        return;
      }
      var form = $element.find("form");
      form.attr("action", "/cart/add");
      form.attr("enctype", "multipart/form-data");
      var formType = form.find("input[name='form_type']");
      formType.val("product");

      var elementQuantity = $element.find(".gt_fq-quantity");
      var elementProductButtonAddToCart = $element.find(".gt_button--product");

      elementQuantity.removeClass("gt_product--hided");
      elementProductButtonAddToCart.removeClass("gt_product--hided");

      var publicFuncSoldOutForm = publicFunctionSoldOutForm();
      if (publicFuncSoldOutForm) {
        publicFuncSoldOutForm.setReturnTo(window.location.pathname);
        publicFuncSoldOutForm.hideForm();
        publicFuncSoldOutForm.hideMessageSuccess();
        publicFuncSoldOutForm.setProductName(product.title);
        publicFuncSoldOutForm.setVariantName(gtCurrentVariant.title);
        publicFuncSoldOutForm.setProductUrl(
          window.location.origin +
          "/products/" +
          product.handle +
          "?variant=" +
          gtCurrentVariant.id
        );
      }

      if (!gtCurrentVariant || !gtCurrentVariant.available) {
        if (publicFuncSoldOutForm) {
          publicFuncSoldOutForm.showForm();
          var atomId = `8h0gglAiUNVB1qE_` + "productSoldOutForm";
          publicFuncSoldOutForm.setReturnTo(
            window.location.pathname +
            `?posted_successfully=true&id=${atomId}&variant=${gtCurrentVariant.id}`
          );
        }
        elementQuantity.addClass("gt_product--hided");
        elementProductButtonAddToCart.addClass("gt_product--hided");

        form.attr("action", "/contact");
        form.removeAttr("enctype");
        formType.val("contact");

        var queryUrl = getQueryByUrl();
        if (queryUrl && queryUrl.has_message && publicFuncSoldOutForm) {
          publicFuncSoldOutForm.hideForm();
          publicFuncSoldOutForm.showMessageSuccess();
          elementQuantity.addClass("gt_product--hided");
          elementProductButtonAddToCart.addClass("gt_product--hided");
          removeQueryCurrentUrl("has_message");
        }
      }
    }

    function whenSubmitSoldOutSuccess() {
      window.onload = function() {
        var queryUrl = getQueryByUrl();
        if (queryUrl.status) {
          if (!queryUrl.variant_id || !product || !product.id) {
            return;
          }
          var currentVariant =
            product.variants &&
            product.variants.length &&
            product.variants.find(
              (variant) => variant.id == queryUrl.variant_id
            );
          if (!currentVariant) {
            return;
          }
          setTimeout(() => {
            window.SOLID.store.dispatch("variant" + product.id, currentVariant);
            gtCurrentVariant = currentVariant;
            removeQueryCurrentUrl("posted_successfully");
            removeQueryCurrentUrl("id");
            setQueryCurrentUrl("has_message", true);
          });
        }
      };
    }

    function publicFunctionSoldOutForm() {
      var atomId = `8h0gglAiUNVB1qE_` + "productSoldOutForm";
      if (atomId) {
        var atomSoldOutPublicFunc =
          window.SOLID.public &&
          window.SOLID.public["atom" + "_" + atomId + "_" + 0];
        if (atomSoldOutPublicFunc) {
          return atomSoldOutPublicFunc;
        }
        return;
      }
      return;
    }

    function getQueryByUrl() {
      const urlParams = new URLSearchParams(window.location.search);
      const status = urlParams.get("posted_successfully");
      const currentVariantId = urlParams.get("variant");
      const hasMessage = urlParams.get("has_message");
      return {
        status: status,
        variant_id: currentVariantId,
        has_message: hasMessage,
      };
    }

    function removeQueryCurrentUrl(param) {
      //ConstructURLSearchParamsobjectinstancefromcurrentURLquerystring.
      var queryParams = new URLSearchParams(window.location.search);

      //Set new ormodifyexistingparametervalue.
      if (queryParams.has(param)) {
        queryParams.delete(param);
      }

      //Replacecurrentquerystringwiththe new one.
      history.replaceState(null, null, "?" + queryParams.toString());
    }

    function setQueryCurrentUrl(param, value) {
      //ConstructURLSearchParamsobjectinstancefromcurrentURLquerystring.
      var queryParams = new URLSearchParams(window.location.search);

      //Set new ormodifyexistingparametervalue.
      queryParams.set(param, value);

      //Replacecurrentquerystringwiththe new one.
      history.replaceState(null, null, "?" + queryParams.toString());
    }

    function subscribeBoxDestroy() {
      revertNormalStatus();
    }

    function revertNormalStatus() {
      var elementQuantity = $element.find(".gt_fq-quantity");
      var elementProductButtonAddToCart = $element.find(".gt_button--product");
      elementQuantity.removeClass("gt_product--hided");
      elementProductButtonAddToCart.removeClass("gt_product--hided");
    }
    /* init block script */
    setup();
    /* store subscribe block script */
    store.subscribe("component-8h0gglAiUNVB1qE_productSoldOutForm-destroy", subscribeBoxDestroy);

    function destroy() {
      store.unsubscribe("component-8h0gglAiUNVB1qE_productSoldOutForm-destroy", subscribeBoxDestroy);
    }
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESSection8h0gglAiUNVB1qE()
      } catch(e) {
        console.error("Error ESSection Id: 8h0gglAiUNVB1qE" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_box = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_box";
  var id = "8h0gglAiUNVB1qE_box";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_box",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }

    function checkRemoteDefaultInput() {
      if (isExistAtomVariant()) {
        var $inputVariantDefault = $element.find(".gt_variant-input--default");
        if ($inputVariantDefault && $inputVariantDefault.length) {
          $($inputVariantDefault[0]).remove()
        }
      }

      if (isExistAtomQuantity()) {
        var $inputQuantityDefault = $element.find(".gt_quantity-input--default");
        if ($inputQuantityDefault && $inputQuantityDefault.length) {
          $($inputQuantityDefault[0]).remove()
        }
      }
    }

    function isExistAtomVariant() {
      var $atomProduct = $element.find(".gt_variant--input")
      if ($atomProduct && $atomProduct.length) {
        return true
      }
      return false
    }

    function isExistAtomQuantity() {
      var $atomQuantity = $element.find(".gt_quantity--input")
      if ($atomQuantity && $atomQuantity.length) {
        return true
      }
      return false
    }
    /* init block script */
    addInteraction();
    checkRemoteDefaultInput();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target, indexEl);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_box()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_box" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productTitleBox = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productTitleBox";
  var id = "8h0gglAiUNVB1qE_productTitleBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_productTitleBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productTitleBox()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productTitleBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productTitleTop = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productTitleTop";
  var id = "8h0gglAiUNVB1qE_productTitleTop";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "8h0gglAiUNVB1qE_productTitleTop",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "8h0gglAiUNVB1qE_productTitleTop",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productTitleTop()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productTitleTop" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productImageBox = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productImageBox";
  var id = "8h0gglAiUNVB1qE_productImageBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_productImageBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productImageBox()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productImageBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productImageList = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productImageList";
  var id = "8h0gglAiUNVB1qE_productImageList";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var mode = "production";
    var checkWindowWidth = $(window).width();
    var widthSliderCurrent;
    var sizeIconDotsCurrent;
    var imageListPositionCurrent;
    var $imgSlide = $element.find(".gt_product-carousel-box");
    var $imgBox = $element.find(".gt_product-img-box");
    var $imgBoxInner = $element.find(".gt_product-img--inner");
    var $imgSlideItem = $element.find(".gt_product-carousel--item");
    var $productImgInner = $element.find(".gt_product-image--thumb");
    var $controlNext = $element.find(".gt_product--swiper .gt_control-next");
    var $controlPrev = $element.find(".gt_product--swiper .gt_control-prev");
    var dynamicDotsOnOff = "false" === "true";
    var slidesPerView_lg = "3";
    var slidesPerView_md = "3";
    var slidesPerView_sm = "6";
    var slidesPerView_xs = "5";
    var spaceBetween_lg = parseInt("16") || 1;
    var spaceBetween_md = parseInt("32") || 1;
    var spaceBetween_sm = parseInt("16") || 1;
    var spaceBetween_xs = parseInt("10") || 1;
    var widthActive = "true" === "true";
    var widthSlider = "100%";
    var widthSlider_lg = "100%";
    var widthSlider_md = "100%";
    var widthSlider_sm = "100%";
    var widthSlider_xs = "100%";
    var sizeIconDots_sm = "10px";
    var sizeIconDots_xs = "10px";
    var imageRadio = "square";
    var hideDisplayProductImageAdvanced = "true" === "true";
    let initShowFeatureImage = false;
    let initShow3DModel = false;
    let initShowExVideo = false;
    let initShowOtherVideo = false;
    if (hideDisplayProductImageAdvanced) {
      initShowFeatureImage = "featureImage" === "featureImage";
    } else {
      initShowFeatureImage = "featureImageAdvanced" === "featureImageAdvanced";
      initShow3DModel = "featureImageAdvanced" === "3DModel";
      initShowExVideo = "featureImageAdvanced" === "exVideo";
      initShowOtherVideo = "featureImageAdvanced" === "otherVideo";
    }
    var imageListPosition = "bottom";
    var imageListPosition_lg = "bottom";
    var imageListPosition_md = "bottom";
    var imageListPosition_sm = "bottom";
    var imageListPosition_xs = "bottom";
    var imageListActive = "true" === "true";
    var spaceBetween_sm = "16";
    var spaceBetween_xs = "10";
    var scaleZoomImageActive = "true" === "true";
    var mySwiper;
    var mySwiperFeature;
    var spacingSmall = "16px";
    var displayTypeThumb = "center" === "thumb";
    var displayTypeCenter = "center" === "center";
    var allowDragSlider = "true" === "true";
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var featuredImage = $(elementClassName).find(".gt_product-img--inner img");
      var itemImage = $(elementClassName).find(".gt_product-carousel-box img");
      var widthFeaturedImage = featuredImage.width();
      var heightFeaturedImage = featuredImage.height();
      var widthItemImage = itemImage.width();
      var heightItemImage = itemImage.height();
      featuredImage.attr("width", widthFeaturedImage);
      featuredImage.attr("height", heightFeaturedImage);
      itemImage.attr("width", widthItemImage);
      itemImage.attr("height", heightItemImage);
    }

    function checkEnableEffectZoomImage() {
      if (scaleZoomImageActive) {
        var productImageFeature = $element.find(".gt_product-image--feature");
        if (productImageFeature && productImageFeature.length) {
          $element.find(".gt_product-image--scale").gfProductZoomImage({
            classHoverItem: ".gt_product-img-box",
            scale: "1.5",
            classSection: ".gt_atom-8h0gglAiUNVB1qE_productImageList",
          });
        }
      }
    }

    function listen() {
      listenElementResizeEvent();
      listenWindowResizeEvent();
    }

    function listenElementResizeEvent() {
      let observer = new ResizeObserver(() => {
        if (mySwiper) {
          mySwiper.update()
        }
      })
      observer.observe($element[0]);
    }

    function listenWindowResizeEvent() {
      var delayResize = 0;
      $(window).off("resize.checkSwitchScreens8h0gglAiUNVB1qE_productImageList").on("resize.checkSwitchScreens8h0gglAiUNVB1qE_productImageList", function() {
        clearTimeout(delayResize);
        delayResize = setTimeout(function() {
          const windowWidthCurrent = $(window).width();
          if (windowWidthCurrent !== checkWindowWidth) {
            checkWindowWidth = windowWidthCurrent;
            widthSliderCurrent = 0;
            sizeIconDotsCurrent = 0;
            if (checkWindowWidth <= 576) {
              widthSliderCurrent = widthSlider_xs;
              sizeIconDotsCurrent = sizeIconDots_xs;
            } else if (checkWindowWidth <= 992) {
              widthSliderCurrent = widthSlider_sm;
              sizeIconDotsCurrent = sizeIconDots_sm;
            } else if (checkWindowWidth <= 1200) {
              widthSliderCurrent = widthSlider_md;
            } else {
              widthSliderCurrent = widthSlider;
            }
            if (widthActive) {
              $element.css("cssText", "width: " + widthSliderCurrent + " !important;");
              mySwiper.update();
            }
            var $paginationItem = $element.find(".gt_control-pagination-item");
            var $paginationItemIcon = $element.find(".gt_control-pagination-item .gt_icon");
            $paginationItemIcon.css("cssText", "width: " + sizeIconDotsCurrent + " !important; height: " + sizeIconDotsCurrent + "!important;");
            $paginationItem.css("cssText", "width: calc(8px + " + sizeIconDotsCurrent + ") !important; height: calc(8px + " + sizeIconDotsCurrent + ") !important;");

            checkImageListPosition();
            calculatorImageSlideHeight();
            checkImageListActive();
            initSlider();
          }
        }, 100)
      });
      if ($element.find(".swiper-slide").length == 1) {
        $element.find('.swiper-wrapper').addClass("gt_disabled");
        $element.find('.gt_control-pagination').addClass("gt_disabled");
      }
    }

    function autoRotateModel() {
      var model = $element.find(".gt_product-media--feature .gt_product-model");
      model.attr("auto-rotate", true);
    }

    function initSlider() {
      if (mySwiper) {
        mySwiper.destroy();
        checkDimensions();
      }
      var $swiperContainer = $element.find(".gt_product--swiper-8h0gglAiUNVB1qE_productImageList");
      if (!$swiperContainer || !$swiperContainer.length) {
        return;
      }
      if ($swiperContainer[0].swiper) {
        $swiperContainer[0].swiper.destroy();
      }
      if (mySwiperFeature) {
        mySwiperFeature.destroy();
      }
      if ($swiperContainer.find(".swiper-slide").length == 1) {
        $swiperContainer.addClass("gt_disabled");
      }
      var $swiperContainerFeature = $element.find(".gt_product-feature--swiper-8h0gglAiUNVB1qE_productImageList");
      if (!$swiperContainerFeature || !$swiperContainerFeature.length) {
        return;
      }
      if ($swiperContainerFeature[0].swiper) {
        $swiperContainerFeature[0].swiper.destroy();
      }
      if ($swiperContainerFeature.find(".swiper-slide").length == 1) {
        $swiperContainerFeature.find(".swiper-wrapper").addClass("gt_disabled");
        $swiperContainerFeature.find(".gt_control-pagination").addClass("gt_disabled");
      }
      let gtProductImageParams = {
        $element: $element,
        settings: {
          classSwiperItems: ".gt_product--swiper-8h0gglAiUNVB1qE_productImageList .gt_product-carousel--item",
          classSwiperItemsImage: ".gt_product--swiper-8h0gglAiUNVB1qE_productImageList .gt_product-carousel--item img",
          classSwiperContainer: ".gt_product--swiper-8h0gglAiUNVB1qE_productImageList",
          initShowFeatureImage: initShowFeatureImage,
          initShow3DModel: initShow3DModel,
          initShowExVideo: initShowExVideo,
          initShowOtherVideo: initShowOtherVideo,
          swiperSetting: getDataSwiperSettings(),
          //featureimageswiper
          featureSwiperSetting: getDataSwiperSettingsFeature(),
          classFeatureSwiperContainer: ".gt_product-feature--swiper-8h0gglAiUNVB1qE_productImageList",
          classFeatureSwiperItemsImage: ".gt_product-feature--swiper-8h0gglAiUNVB1qE_productImageList .gt_product-image--feature",
        }
      }
      window.SOLID.library.gtProductImagesV2(gtProductImageParams);
      mySwiper = $swiperContainer[0].swiper;
      mySwiperFeature = $swiperContainerFeature[0].swiper;
    }

    function getDataSwiperSettings() {
      let direction = 'horizontal';
      if (displayTypeThumb) {
        if (imageListPositionCurrent === "left" || imageListPositionCurrent === "right") {
          direction = "vertical";
        }
      }

      let loop = false;
      let centeredSlides = false;
      let freeMode = true;
      if (displayTypeCenter && checkWindowWidth > 992) {
        loop = true;
        centeredSlides = true;
        freeMode = false;
      }
      return {
        mousewheel: false,
        loop: loop,
        centeredSlides: centeredSlides,
        slidesPerView: 3,
        spaceBetween: 16,
        freeMode: freeMode,
        watchSlidesVisibility: true,
        watchSlidesProgress: true,
        navigation: {
          nextEl: ".gt_product--swiper-8h0gglAiUNVB1qE_productImageList .gt_control-next",
          prevEl: ".gt_product--swiper-8h0gglAiUNVB1qE_productImageList .gt_control-prev",
        },
        breakpoints: {
          0: {
            slidesPerView: slidesPerView_xs,
            spaceBetween: spaceBetween_xs,
            direction: direction,
            mousewheel: false,
            pagination: {
              dynamicBullets: dynamicDotsOnOff,
              dynamicMainBullets: 1,
            },
          },
          577: {
            slidesPerView: slidesPerView_sm,
            spaceBetween: spaceBetween_sm,
            direction: direction,
            mousewheel: false,
            pagination: {
              dynamicBullets: dynamicDotsOnOff,
              dynamicMainBullets: 1,
            },
          },
          993: {
            slidesPerView: slidesPerView_md,
            spaceBetween: spaceBetween_md,
            direction: direction,
            mousewhel: true,
          },
          1201: {
            slidesPerView: slidesPerView_lg,
            spaceBetween: spaceBetween_lg,
            direction: direction,
            mousewhel: true,
          }
        },
        on: {
          init: function() {
            window.SOLID.store.dispatch("trigger-lazyload", true);
          },
          imagesReady: function() {
            if (displayTypeCenter && checkWindowWidth > 992) {
              setTimeout(() => {
                var $swiperWrapperHide = $element.find(".gt_swiper_wrapper-type-center");
                if ($swiperWrapperHide && $swiperWrapperHide.length) {
                  $swiperWrapperHide.removeClass("gt_swiper_wrapper-type-center");
                }
              }, 100)
            }
          }
        },
      }
    }

    function getDataSwiperSettingsFeature() {
      let allowTouchMove = false;
      var productImageFeature = $element.find(".gt_product-image--feature");
      if (allowDragSlider && !productImageFeature.hasClass("gt_product-media--model") || displayTypeCenter) {
        allowTouchMove = true;
      }
      return {
        allowTouchMove: allowTouchMove,
        slidesPerView: 1,
        spaceBetween: 16,
        navigation: {
          nextEl: ".gt_product-feature--swiper-8h0gglAiUNVB1qE_productImageList .gt_product-img-nav--right",
          prevEl: ".gt_product-feature--swiper-8h0gglAiUNVB1qE_productImageList .gt_product-img-nav--left",
        },
        pagination: {
          el: "#gt_control-pagination-8h0gglAiUNVB1qE_productImageList",
          type: 'bullets',
          clickable: true,
          renderBullet: function(index, classname) {
            return `<div class="gt_control-pagination-item ` + classname + ` ">
            <span data-optimize-type="icon"  data-attribute="iconDots,"  data-section-id="8h0gglAiUNVB1qE_productImageList"  class="gt_icon"><svg width="100%" height="100%" viewBox="0 0 11 10" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
<circle cx="5.5" cy="5" r="5" fill="currentColor"/>
</svg></span>
          </div>`;
          }
        },
        breakpoints: {
          0: {
            pagination: {
              dynamicBullets: dynamicDotsOnOff,
              dynamicMainBullets: 1,
            },
          },
          577: {
            pagination: {
              dynamicBullets: dynamicDotsOnOff,
              dynamicMainBullets: 1,
            },
          }
        },
      }
    }

    function changeSliderActive(value) {
      if (value && value.sliderIndex !== NaN) {
        if (loop) {
          mySwiper.slideToLoop(value.sliderIndex, 500, true);
        } else {
          mySwiper.slideTo(value.sliderIndex, 500, true);
        }
      }
    }

    function isImgSliderBottom() {
      const $productImage = $element.find(".gt_product-image-list--bottom");
      if ($productImage && $productImage.length) {
        return true;
      }
      return false;
    }

    function checkImageListActive() {
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        if (imageListActive) {
          slidesPerView_xs = "5";
          spaceBetween_xs = "10";
        } else if (!imageListActive) {
          slidesPerView_xs = 1;
          spaceBetween_xs = 0;
        }
      } else if (checkWindowWidth <= 992) {
        if (imageListActive) {
          slidesPerView_sm = "6";
          spaceBetween_sm = "16"
        } else if (!imageListActive) {
          slidesPerView_sm = 1;
          spaceBetween_sm = 0;
        }
      }
    }

    function calculatorImageSlideHeight() {
      var delay = setTimeout(function() {
        checkWindowWidth = $(window).width();
        if (!isImgSliderBottom()) {
          $imgBox = $element.find(".gt_product-img-box");
          var imgBoxHeight = $imgBox && $imgBox.length && $imgBox[0].offsetHeight;
          $imgSlide.css("height", imgBoxHeight);
          mySwiper.update();
        } else {
          $imgSlide.css("height", "");
        }
      }, 500);
    }

    function optimizeSizeIconDots(value) {
      mySwiper.pagination.render();
      var $paginationItem = $element.find(".gt_control-pagination-item");
      var $paginationItemIcon = $element.find(".gt_control-pagination-item .gt_icon");
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        sizeIconDots_xs = value;
      } else if (checkWindowWidth <= 992) {
        sizeIconDots_sm = value;
      }
      $paginationItemIcon.css("cssText", "width: " + value + " !important; height: " + value + "!important;");
      $paginationItem.css("cssText", "width: calc(8px + " + value + ") !important; height: calc(8px + " + value + ") !important;");
      mySwiper.pagination.update();
    }

    function optimizeSlidePerView(value) {
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        slidesPerView_xs = value;
      } else if (checkWindowWidth <= 992) {
        slidesPerView_sm = value;
      } else if (checkWindowWidth <= 1200) {
        slidesPerView_md = value;
      } else {
        slidesPerView_lg = value;
      }
      initSlider();
    }

    function optimizeWidthSlider(value) {
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        widthSlider_xs = value;
      } else if (checkWindowWidth <= 992) {
        widthSlider_sm = value;
      } else if (checkWindowWidth <= 1200) {
        widthSlider_md = value;
      } else {
        widthSlider_lg = widthSlider = value;
      }
      $element.css("cssText", "width: " + value + " !important;");
      mySwiper.update();
      calculatorImageSlideHeight();
    }

    function optimizeWidthActive(value) {
      widthActive = value;
      if (!value) {
        $element.css("cssText", "width: null");
      } else {
        checkWindowWidth = $(window).width();
        widthSliderCurrent = 0;
        if (checkWindowWidth <= 576) {
          widthSliderCurrent = widthSlider_xs;
        } else if (checkWindowWidth <= 992) {
          widthSliderCurrent = widthSlider_sm;
        } else if (checkWindowWidth <= 1200) {
          widthSliderCurrent = widthSlider_md;
        } else {
          widthSliderCurrent = widthSlider;
        }
        $element.css("cssText", "width: " + widthSliderCurrent + " !important;");
        initSlider();
        mySwiper.update();
      }
    }

    function checkImageListPosition({
      isInit
    } = {}) {
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        imageListPositionCurrent = imageListPosition_xs;
        spacingSmall = "10px";
      } else if (checkWindowWidth <= 992) {
        imageListPositionCurrent = imageListPosition_sm;
        spacingSmall = "16px";
      } else if (checkWindowWidth <= 1200) {
        imageListPositionCurrent = imageListPosition_md;
        spacingSmall = "16px";
      } else {
        imageListPositionCurrent = imageListPosition;
        spacingSmall = "16px";
      }
      $element.find("#gt_product-image-list-id").attr("class", "gt_product-image-list--" + imageListPositionCurrent);
      //showimage
      var $swiperWrapperHide = $element.find(".gt-carousel--hide-default");
      var $productImageList = $element.find("#gt_product-image-list-id");
      if ($swiperWrapperHide && $swiperWrapperHide.length) {
        $swiperWrapperHide.removeClass("gt-carousel--hide-default");
        $productImageList.css("height", "auto");
      }
      if (imageListPositionCurrent !== "bottom") {
        var $productImageListWrapper = $element.find(".gt_product-carousel-box");
        var $productImageBox = $element.find(".gt_product-image--inner");
        $productImageListWrapper.css("height", $productImageBox.outerHeight());
      }
      //css
      if (imageListPositionCurrent === "left" || imageListPositionCurrent === "right") {
        $controlNext.css({
          "height": "auto",
          "width": "100%"
        });
        $controlPrev.css({
          "height": "auto",
          "width": "100%"
        });
      }
      if (imageListPositionCurrent === "left") {
        $productImgInner.css("flex-direction", "row-reverse");
        $imgSlide.css({
          "padding-left": "0",
          "padding-right": spacingSmall
        });
      } else if (imageListPositionCurrent === "right") {
        $productImgInner.css("flex-direction", "row");
        $imgSlide.css({
          "padding-right": "0",
          "padding-left": spacingSmall
        });
      } else {
        $productImgInner.css("flex-direction", "column");
        $imgSlide.css("padding", "");
        $controlNext.css({
          "height": "100%",
          "width": "auto"
        });
        $controlPrev.css({
          "height": "100%",
          "width": "auto"
        });
      }
      if (!isInit) {
        initSlider();
        mySwiper.update();
      }
    }

    function optimizeImageListPosition(value) {
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        imageListPosition_xs = imageListPositionCurrent = value;
      } else if (checkWindowWidth <= 992) {
        imageListPosition_sm = imageListPositionCurrent = value;
      } else if (checkWindowWidth <= 1200) {
        imageListPosition_md = imageListPositionCurrent = value;
      } else {
        imageListPosition_lg = imageListPositionCurrent = imageListPosition = value;
      }
      if (imageListPositionCurrent === "left" || imageListPositionCurrent === "right") {
        $controlNext.css({
          "height": "auto",
          "width": "100%"
        });
        $controlPrev.css({
          "height": "auto",
          "width": "100%"
        });
      }
      if (imageListPositionCurrent === "left") {
        $productImgInner.css("flex-direction", "row-reverse");
        $imgSlide.css({
          "padding-left": "0",
          "padding-right": spacingSmall
        });
      } else if (imageListPositionCurrent === "right") {
        $productImgInner.css("flex-direction", "row");
        $imgSlide.css({
          "padding-right": "0",
          "padding-left": spacingSmall
        });
      } else {
        $productImgInner.css("flex-direction", "column");
        $imgSlide.css("padding", "");
        $controlNext.css({
          "height": "100%",
          "width": "auto"
        });
        $controlPrev.css({
          "height": "100%",
          "width": "auto"
        });
      }
      $element.find("#gt_product-image-list-id").attr("class", "gt_product-image-list--" + value);
      initSlider();
      mySwiper.update();
      calculatorImageSlideHeight();
    }

    function optimizeImageRadio(imageRadio) {
      checkWindowWidth = $(window).width();
      imageRadio = value;
      if (imageRadio === "square") {
        $imgBoxInner.css("padding-top", "calc(100%)");
      } else if (imageRadio === "landscape") {
        $imgBoxInner.css("padding-top", "calc(100% * 3 / 4)");
      } else if (imageRadio === "portrait") {
        $imgBoxInner.css("padding-top", "calc(100% * 4 / 3)");
      }
      if (isImgSliderBottom() || checkWindowWidth < 992) {
        if (imageRadio === "square") {
          $imgSlideItem.css("padding-top", "calc(100%)");
        } else if (imageRadio === "landscape") {
          $imgSlideItem.css("padding-top", "calc(100% * 3 / 4)");
        } else if (imageRadio === "portrait") {
          $imgSlideItem.css("padding-top", "calc(100% * 4 / 3)");
        }
      }
      calculatorImageSlideHeight();
    }

    function optimizeImageRadioActive(value) {
      if (!value) {
        $imgBoxInner.css("padding-top", "");
        $imgSlideItem.css("padding-top", "");
      } else {
        optimizeImageRadio(imageRadio);
      }
      calculatorImageSlideHeight();
    }

    function optimizeDynamicDotsOnOff(value) {
      dynamicDotsOnOff = value;
      initSlider();
      var paginationEl = mySwiperFeature.pagination.el;
      if (value) {
        paginationEl.style.cssText = paginationEl.style.cssText + "margin: 0px auto; transform: translateX(0px); justify-content: unset;";
      } else {
        paginationEl.style.cssText = paginationEl.style.cssText + "justify-content: center;";
        paginationEl.classList.remove("swiper-pagination-bullets-dynamic");
      }
      mySwiperFeature.pagination.update();
      mySwiperFeature.update();
    }

    function getMySwiper() {
      return mySwiper;
    }

    function getMySwiperFeature() {
      return mySwiperFeature;
    }
    /* init block script */
    checkDimensions();
    checkImageListPosition({
      isInit: true
    });
    checkImageListActive();
    initSlider();
    calculatorImageSlideHeight();
    checkEnableEffectZoomImage();
    autoRotateModel();
    listen();
    /* store subscribe block script */
    store.subscribe("optimize-8h0gglAiUNVB1qE_productImageList-sizeIconDots", optimizeSizeIconDots);
    store.subscribe("optimal-8h0gglAiUNVB1qE_productImageList-slidesPerView", optimizeSlidePerView);
    store.subscribe("optimal-8h0gglAiUNVB1qE_productImageList-widthSlider", optimizeWidthSlider);
    store.subscribe("optimal-8h0gglAiUNVB1qE_productImageList-widthActive", optimizeWidthActive);
    store.subscribe("optimal-8h0gglAiUNVB1qE_productImageList-imageRadio", optimizeImageRadio);
    store.subscribe("optimal-8h0gglAiUNVB1qE_productImageList-imageRadioActive", optimizeImageRadioActive);
    store.subscribe("optimal-8h0gglAiUNVB1qE_productImageList-dynamicDotsOnOff", optimizeDynamicDotsOnOff);
    store.subscribe("optimal-8h0gglAiUNVB1qE_productImageList-imageListPosition", optimizeImageListPosition);
    store.subscribe("trigger-slider-8h0gglAiUNVB1qE_productImageList", changeSliderActive);

    function destroy() {
      store.unsubscribe("optimize-8h0gglAiUNVB1qE_productImageList-sizeIconDots", optimizeSizeIconDots);
      store.unsubscribe("optimal-8h0gglAiUNVB1qE_productImageList-slidesPerView", optimizeSlidePerView);
      store.unsubscribe("optimal-8h0gglAiUNVB1qE_productImageList-widthSlider", optimizeWidthSlider);
      store.unsubscribe("optimal-8h0gglAiUNVB1qE_productImageList-widthActive", optimizeWidthActive);
      store.unsubscribe("optimal-8h0gglAiUNVB1qE_productImageList-imageRadio", optimizeImageRadio);
      store.unsubscribe("optimal-8h0gglAiUNVB1qE_productImageList-imageRadioActive", optimizeImageRadioActive);
      store.unsubscribe("optimal-8h0gglAiUNVB1qE_productImageList-dynamicDotsOnOff", optimizeDynamicDotsOnOff);
      store.unsubscribe("optimal-8h0gglAiUNVB1qE_productImageList-imageListPosition", optimizeImageListPosition);
      store.unsubscribe("trigger-slider-8h0gglAiUNVB1qE_productImageList", changeSliderActive);
    }
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      initSlider,
      getMySwiper,
      getMySwiperFeature,
      checkImageListPosition,
      calculatorImageSlideHeight,
      checkImageListActive
    };
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      var publicFunc = script($target, indexEl);
      window.SOLID.public = window.SOLID.public || {};
      window.SOLID.public["atom" + "_" + id + "_" + indexEl] = publicFunc;
      if (publicFunc) {
        store.dispatch("public_function_atom_" + id, publicFunc);
      }
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productImageList()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productImageList" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productTagSaleImage = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productTagSaleImage";
  var id = "8h0gglAiUNVB1qE_productTagSaleImage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const roundPercent = Number("0");
    const removeZeros = "true" === "true";
    /* store get state block script */
    /* methods block script */
    /* init block script */
    window.SOLID.library.gtProductSaveV2({
      $element: $element,
      settings: {
        classTextPercent: ".gt_product-tag-sale--value--percent",
        classTextNumber: ".gt_product-tag-sale--value--number",
        dataFormat: "[!Profit!] OFF",
        dataFormatKey: "[!Profit!]",
        customCurrencyFormating: "shortPrefix",
        roundPercent: roundPercent,
        roundNoZeroes: removeZeros
      }
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productTagSaleImage()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productTagSaleImage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productBackground = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productBackground";
  var id = "8h0gglAiUNVB1qE_productBackground";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_productBackground",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productBackground()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productBackground" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productInfoBox = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productInfoBox";
  var id = "8h0gglAiUNVB1qE_productInfoBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_productInfoBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productInfoBox()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productInfoBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productTitleBoxBottom = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productTitleBoxBottom";
  var id = "8h0gglAiUNVB1qE_productTitleBoxBottom";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_productTitleBoxBottom",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productTitleBoxBottom()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productTitleBoxBottom" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productTitle = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productTitle";
  var id = "8h0gglAiUNVB1qE_productTitle";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "8h0gglAiUNVB1qE_productTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "8h0gglAiUNVB1qE_productTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productTitle()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productTitle" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_boxPrice = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_boxPrice";
  var id = "8h0gglAiUNVB1qE_boxPrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_boxPrice",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_boxPrice()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_boxPrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productPrice = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productPrice";
  var id = "8h0gglAiUNVB1qE_productPrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const syncQuantityandPrice = "true" == "true";
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!price!]"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "8h0gglAiUNVB1qE_productPrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "8h0gglAiUNVB1qE_productPrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-price-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-price-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    };
    $element.gtProductPrice({
      classCurrentPrice: ".gt_product-price--number",
      syncQuantityPrice: syncQuantityandPrice,
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productPrice()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productPrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productComparePrice = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productComparePrice";
  var id = "8h0gglAiUNVB1qE_productComparePrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const syncQuantityandPrice = "true" == "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "8h0gglAiUNVB1qE_productComparePrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "8h0gglAiUNVB1qE_productComparePrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    $element.gtProductPrice({
      classComparePrice: ".gt_product-price--compare",
      classCurrentPrice: ".gt_product-price--number",
      syncQuantityComparePrice: syncQuantityandPrice,
      replacePriceForCurrentPrice: false,
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productComparePrice()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productComparePrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productContent = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productContent";
  var id = "8h0gglAiUNVB1qE_productContent";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_productContent",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productContent()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productContent" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_serviceList = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_serviceList";
  var id = "8h0gglAiUNVB1qE_serviceList";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_serviceList",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_serviceList()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_serviceList" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_serviceListItem_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_serviceListItem_0";
  var id = "8h0gglAiUNVB1qE_serviceListItem_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_serviceListItem_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_serviceListItem_0()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_serviceListItem_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_iconService_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_iconService_0";
  var id = "8h0gglAiUNVB1qE_iconService_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_iconService_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_iconService_0()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_iconService_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_messageService_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_messageService_0";
  var id = "8h0gglAiUNVB1qE_messageService_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "8h0gglAiUNVB1qE_messageService_0",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "8h0gglAiUNVB1qE_messageService_0",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_messageService_0()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_messageService_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_serviceListItem_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_serviceListItem_1";
  var id = "8h0gglAiUNVB1qE_serviceListItem_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_serviceListItem_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_serviceListItem_1()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_serviceListItem_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_iconService_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_iconService_1";
  var id = "8h0gglAiUNVB1qE_iconService_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_iconService_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_iconService_1()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_iconService_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_messageService_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_messageService_1";
  var id = "8h0gglAiUNVB1qE_messageService_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "8h0gglAiUNVB1qE_messageService_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "8h0gglAiUNVB1qE_messageService_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_messageService_1()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_messageService_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_serviceListItem_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_serviceListItem_2";
  var id = "8h0gglAiUNVB1qE_serviceListItem_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_serviceListItem_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_serviceListItem_2()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_serviceListItem_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_iconService_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_iconService_2";
  var id = "8h0gglAiUNVB1qE_iconService_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_iconService_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_iconService_2()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_iconService_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_messageService_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_messageService_2";
  var id = "8h0gglAiUNVB1qE_messageService_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "8h0gglAiUNVB1qE_messageService_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "8h0gglAiUNVB1qE_messageService_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_messageService_2()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_messageService_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_serviceListItem_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_serviceListItem_3";
  var id = "8h0gglAiUNVB1qE_serviceListItem_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_serviceListItem_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_serviceListItem_3()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_serviceListItem_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_iconService_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_iconService_3";
  var id = "8h0gglAiUNVB1qE_iconService_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_iconService_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_iconService_3()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_iconService_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_messageService_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_messageService_3";
  var id = "8h0gglAiUNVB1qE_messageService_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "8h0gglAiUNVB1qE_messageService_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "8h0gglAiUNVB1qE_messageService_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_messageService_3()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_messageService_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_line = function() {
          
        }
        funcESAtom8h0gglAiUNVB1qE_line()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_line" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productOption = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productOption";
  var id = "8h0gglAiUNVB1qE_productOption";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_productOption",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productOption()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productOption" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productVariant = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productVariant";
  var id = "8h0gglAiUNVB1qE_productVariant";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var $variantChecked = $element.find(".gt_product-variant--checked");
    var $variantOptions = $element.find(".gt_product-variant-options");
    var mode = "production";
    var animationActive = 'true';
    var timeoutTooltip = null;
    var valueInTitleActive = "false" === "true";
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (animationActive === "true") {
        var interactionScrollIntoView =
          '"fade-up"';
        window.SOLID.library.animation({
          elementId: id,
          $doms: $elements,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function initSwatches() {
      window.SOLID.library.gtProductSwatchesV2({
        $element: $element,
        settings: {
          classCurrentValue: ".gt_product-variant-option--selected .gt_product-variant-option--selected-text",
          classItem: ".gt_variant--select-item",
          classInputIdHidden: ".gt_variant--input",
          classBtnSelect: ".gt_product-variant--btn-select",
          classVariantValueInTitle: ".gt_title_value",
        }
      });
    }

    function openSelectDropdown() {
      $variantChecked.removeClass("gt_active");
      var $options = $(this).siblings(".gt_product-variant-options");
      if ($options.hasClass("gt_active")) {
        $options.css("top", "");
        $options.removeClass("gt_active");
        $(this).removeClass("gt_active");
        clearEventShowTooltip();
        $(document).off("mousedown.outsideClickVariantSelect");
      } else {
        $variantOptions.removeClass("gt_active");
        $options.addClass("gt_active");
        $(this).addClass("gt_active");
        var optionsOuterHeight = $options.outerHeight();
        var selectInputHeight = $variantChecked.outerHeight();
        var positionOptions = $options.offset().top - $(document).scrollTop() + optionsOuterHeight;
        var windowHeight = $(window).outerHeight();
        if (positionOptions > windowHeight) {
          const currentTopOptions = $options.css("top");
          const newTop = "calc( " + currentTopOptions + " - " + optionsOuterHeight + "px" + " - " + (Number(selectInputHeight) + 10) + "px" + " )";
          $options.css("top", newTop);
        }
        clearTimeout(timeoutTooltip);
        timeoutTooltip = setTimeout(() => {
          eventShowTooltipSelectType();
        }, 300)
        //addeventclickoutsidetoclose
        const $currentTargetOptions = $(this);
        $(document).off("mousedown.outsideClickVariantSelect").on("mousedown.outsideClickVariantSelect", function(event) {
          if ($options && $options.length && $currentTargetOptions && $currentTargetOptions.length) {
            const $optionsPure = $options[0];
            if ($optionsPure && !$optionsPure.contains(event.target) && !$currentTargetOptions[0].contains(event.target)) {
              $options.css("top", "");
              $options.removeClass("gt_active");
              $currentTargetOptions.removeClass("gt_active");
              clearEventShowTooltip();
              $(document).off("mousedown.outsideClickVariantSelect");
            }
          }
        });
      }
    }

    function onClickSelectDropDown() {
      $variantChecked.removeClass("gt_active");
      $variantOptions.removeClass("gt_active");
      var value = $(this).attr("data-value");
      var $variantCheckedCurrent = $(this).closest(
        ".gt_product-variant--select-box"
      );
      var $valueVariantChecked = $variantCheckedCurrent.find(
        ".gt_product-variant-option--selected .gt_product-variant-option--selected-text"
      );
      var $contentOptionSelect = $(this).html();
      $valueVariantChecked.attr("data-value", value);
      $valueVariantChecked.html($contentOptionSelect);
      //closetooltip
      const $tooltip = $element.find(".gt_product-variant-tooltip");
      $tooltip.css("display", "none");
      clearEventShowTooltip();
    }

    function hideAtomWhenNoVariant() {
      $element.css("display", "");
      var isHide = true;
      var $variantItems = $element.find(".gt_product-variant--item")
      for (var i = 0; i < $variantItems.length; i++) {
        var $item = $($variantItems[i]);
        var display = $item.css("display");
        if (display !== "none") {
          isHide = false;
          break;
        }
      }
      if (isHide) {
        $element.css("display", "none");
      }
    }

    function eventShowTooltipSelectType() {
      const $selectItems = $element.find(".gt_variant--select-item");
      for (var i = 0; i < $selectItems.length; i++) {
        const $selectItem = $($selectItems[i]);
        const $selectOptions = $selectItem.find(".gt_product-variant-option");
        const $tooltip = $selectItem.find(".gt_product-variant-tooltip");
        $selectOptions.off("mouseenter").on("mouseenter", function() {
          //checkoverflow
          const $contentValue = $(this).find(".gt_product-variant-option--txt");
          const cachedDisplayContentValue = $contentValue.css("display");
          $contentValue.css({
            display: "inline",
            overflow: "unset",
            whiteSpace: "nowrap"
          });
          const realWidth = $contentValue.outerWidth();
          $contentValue.css({
            display: cachedDisplayContentValue,
            overflow: "",
            whiteSpace: ""
          });
          //
          const selectOptionTop = this.getBoundingClientRect().top;
          const selectItemTop = $selectItem[0].getBoundingClientRect().top;
          const selectOptionHeight = $(this).outerHeight();
          const selectOptionWidth = $(this).outerWidth();
          const contentSelect = $contentValue.html();
          if (realWidth > selectOptionWidth) {
            $tooltip.find(".gt_product-variant-tooltip-name").html(contentSelect);
            $tooltip.css({
              display: "block",
              top: selectOptionTop - selectItemTop - selectOptionHeight,
              zIndex: 10
            });
            $tooltip.find(".gt_product-variant-tooltip-arrow").css({
              left: selectOptionWidth / 2 + "px",
            })
          }
        });
        $selectOptions.off("mouseleave").on("mouseleave", function() {
          $tooltip.css({
            display: "none"
          })
        });
      }
    }

    function clearEventShowTooltip() {
      const $selectitems = $element.find(".gt_variant--select-item");
      for (var i = 0; i < $selectitems.length; i++) {
        const $selectitem = $($selectitems[i]);
        const $selectoptions = $selectitem.find(".gt_product-variant-option");
        $selectoptions.off("mouseenter");
        $selectoptions.off("mouseleave");
      }
    }
    /* init block script */
    hideAtomWhenNoVariant();
    initSwatches();
    animation();
    /*global blockscript*/
    window.SOLID.store.subscribe("run-script-" + id, () => {
      $elements = document.querySelectorAll(elementClassName);
      main();
    });
    /* store subscribe block script */
    /* events block script */
    var $elements_1 = $element.find(".gt_product-variant--checked");
    $elements_1.off("click.openSelect").on("click.openSelect", openSelectDropdown);
    var $elements_2 = $element.find(".gt_product-variant-option");
    $elements_2.off("click.selectItem").on("click.selectItem", onClickSelectDropDown);
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productVariant()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productVariant" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productQuantity = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productQuantity";
  var id = "8h0gglAiUNVB1qE_productQuantity";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var style = "horizontal";
    var mode = "production";
    var interactionScrollIntoViewActive = "false";
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (interactionScrollIntoViewActive === "true") {
        var interactionScrollIntoView =
          '""';
        var $container = $element.find(".gt_product-quantity");
        window.SOLID.library.animation({
          elementId: id,
          $doms: $container,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function initLibrary() {
      var params = {
        $element: $element,
        settings: {
          classInput: "input[name='quantity']",
          classPlus: ".gt_quantity_plus",
          classMinus: ".gt_quantity_minus",
          mode: mode,
        }
      };
      if (style === "horizontal") {
        params = {
          $element: $element,
          settings: {
            classInput: "input[name='quantity']",
            classPlus: ".gt_product-quantity--plus",
            classMinus: ".gt_product-quantity--minus",
            mode: mode,
          }
        };
      }
      window.SOLID.library.gtProductQuantityV2(params);
    }

    function validateInput() {
      var inputQuantity = $element.find("input[name='quantity']");
      inputQuantity.keyup(function() {
        var value = parseInt(this.value);
        if (isNaN(value)) {
          value = 1;
        }
        inputQuantity.attr("value", value).val(value);
      })
    }
    /* init block script */
    initLibrary();
    animation();
    validateInput();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productQuantity()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productQuantity" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productAction = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productAction";
  var id = "8h0gglAiUNVB1qE_productAction";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_productAction",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productAction()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productAction" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productButtonBuyItNow = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productButtonBuyItNow";
  var id = "8h0gglAiUNVB1qE_productButtonBuyItNow";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var scrollIntoViewActive = 'false' == 'true';
    var animationActive = 'false' == 'true';
    var animationHoverActive = 'false' == 'true';
    var scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var mode = 'production';
    var previewSoldOut = 'false';
    var actions = '[{"control":{"attribute":"pickProductButton","id":"pickProductButton","isButtonAddToCard":true,"type":"pickproduct"},"event":"click","id":1},{"control":{"attribute":"pickLinkButton","id":"pickLinkButton","newTab":false,"reference":"html","title":"Pick Link","type":"picklink","value":"/cart"},"event":"click","id":2}]';
    
    var activeButtonFixContent = "false" === "true";
    var buttonFixContent = "Buy [!quantity!] items";
    var disableListenSoldOut = "false" === "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_productButtonBuyItNow",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        };
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover",
          };
        }
        window.SOLID.library.animation(settings);
      }
    }

    function eventChangeTextInIframe() {
      
    }

    function eventListenSoldOut() {
      if (mode !== "production") {
        if (previewSoldOut === "false") {
          window.SOLID.library.gtBuyProductListenSoldOut({
            $element: $($element)[0],
            options: {
              isButtonAddToCard: true,
              textAddToCard: "Get Yours Now",
              textSoldOut: "Sold out",
            },
            mode: "dev"
          });
        }
      } else {
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $($element)[0],
          options: {
            isButtonAddToCard: true,
            textAddToCard: "Get Yours Now",
            textSoldOut: "Sold out",
          },
        });
      }
    }

    function addActionEvent() {
      // function customEvent(actions,id,key)
      if (mode === "production") {
        $($element).customEvent(
          JSON.parse(actions),
          '8h0gglAiUNVB1qE_productButtonBuyItNow' + '_' + indexEl
        );
      }
      /*Listenifisbuttonaddtocard*/
      store.subscribe(
        "loading-buy-now-8h0gglAiUNVB1qE_productButtonBuyItNow" + "_" + indexEl,
        function(isDisplay) {
          const $loadingEl = $($element).find(
            ".atom-button-loading-circle-loader"
          );
          const $textEl = $($element).find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              store.dispatch("loading-buy-now-8h0gglAiUNVB1qE_productButtonBuyItNow", "");
              store.dispatch("loading-buy-now-8h0gglAiUNVB1qE_productButtonBuyItNow" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl
                .find(".atom-button-loading-check-mark")
                .css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl
                  .find(".atom-button-loading-check-mark")
                  .removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                store.dispatch("loading-buy-now-8h0gglAiUNVB1qE_productButtonBuyItNow", "");
                store.dispatch("loading-buy-now-8h0gglAiUNVB1qE_productButtonBuyItNow" + "_" + indexEl, "");
              }, 3000);
            }
          }
        }
      );
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    if (activeButtonFixContent) {
      initFixContent();
    }
    addInteraction();
    addActionEvent();
    if (!disableListenSoldOut) {
      eventListenSoldOut();
    }
    eventChangeTextInIframe();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      eventListenSoldOut,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productButtonBuyItNow()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productButtonBuyItNow" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productButtonAddToCart = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productButtonAddToCart";
  var id = "8h0gglAiUNVB1qE_productButtonAddToCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var scrollIntoViewActive = 'false' == 'true';
    var animationActive = 'false' == 'true';
    var animationHoverActive = 'false' == 'true';
    var scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var mode = 'production';
    var previewSoldOut = 'false';
    var actions = '[{"control":{"attribute":"pickProductButton","id":"pickProductButton","isButtonAddToCard":true,"type":"pickproduct"},"event":"click","id":1},{"control":{"attribute":"pickLinkButton","id":"pickLinkButton","newTab":false,"reference":"html","title":"Pick Link","type":"picklink","value":"/cart"},"event":"click","id":2}]';
    
    var activeButtonFixContent = "false" === "true";
    var buttonFixContent = "Buy [!quantity!] items";
    var disableListenSoldOut = "false" === "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_productButtonAddToCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        };
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover",
          };
        }
        window.SOLID.library.animation(settings);
      }
    }

    function eventChangeTextInIframe() {
      
    }

    function eventListenSoldOut() {
      if (mode !== "production") {
        if (previewSoldOut === "false") {
          window.SOLID.library.gtBuyProductListenSoldOut({
            $element: $($element)[0],
            options: {
              isButtonAddToCard: true,
              textAddToCard: "Buy Now",
              textSoldOut: "Sold out",
            },
            mode: "dev"
          });
        }
      } else {
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $($element)[0],
          options: {
            isButtonAddToCard: true,
            textAddToCard: "Buy Now",
            textSoldOut: "Sold out",
          },
        });
      }
    }

    function addActionEvent() {
      // function customEvent(actions,id,key)
      if (mode === "production") {
        $($element).customEvent(
          JSON.parse(actions),
          '8h0gglAiUNVB1qE_productButtonAddToCart' + '_' + indexEl
        );
      }
      /*Listenifisbuttonaddtocard*/
      store.subscribe(
        "loading-buy-now-8h0gglAiUNVB1qE_productButtonAddToCart" + "_" + indexEl,
        function(isDisplay) {
          const $loadingEl = $($element).find(
            ".atom-button-loading-circle-loader"
          );
          const $textEl = $($element).find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              store.dispatch("loading-buy-now-8h0gglAiUNVB1qE_productButtonAddToCart", "");
              store.dispatch("loading-buy-now-8h0gglAiUNVB1qE_productButtonAddToCart" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl
                .find(".atom-button-loading-check-mark")
                .css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl
                  .find(".atom-button-loading-check-mark")
                  .removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                store.dispatch("loading-buy-now-8h0gglAiUNVB1qE_productButtonAddToCart", "");
                store.dispatch("loading-buy-now-8h0gglAiUNVB1qE_productButtonAddToCart" + "_" + indexEl, "");
              }, 3000);
            }
          }
        }
      );
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    if (activeButtonFixContent) {
      initFixContent();
    }
    addInteraction();
    addActionEvent();
    if (!disableListenSoldOut) {
      eventListenSoldOut();
    }
    eventChangeTextInIframe();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      eventListenSoldOut,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productButtonAddToCart()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productButtonAddToCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_productSoldOutForm = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_productSoldOutForm";
  var id = "8h0gglAiUNVB1qE_productSoldOutForm";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var isNotificationSuccessPreview = "false";
    var typeText = "Type";
    var nameText = "Name";
    var phoneText = "Phone";
    var productNameText = "Product Name";
    var variantNameText = "Variant Name";
    var productUrlText = "Product URL";
    /* store get state block script */
    /* methods block script */
    function checkSubmitFormSuccess() {
      //Scrollđếnatom
      var queryUrl = getQueryByUrl();
      if (queryUrl.status) {
        showMessageSuccess();
        hideForm();
        var currentElement = $(`.${queryUrl.id}`);
        if (currentElement && currentElement.length) {
          $("html, body").animate({
              scrollTop: currentElement.offset().top - 800
            },
            300
          );
        }
      }
    }

    function getQueryByUrl() {
      const urlParams = new URLSearchParams(window.location.search);
      const status = urlParams.get("posted_successfully");
      const currentId = urlParams.get("id");
      return {
        status: status,
        id: currentId,
      };
    }

    function checkPreviewMessageSuccess() {
      if ("production" !== "production" && !checkProductAvailable()) {
        if (
          isNotificationSuccessPreview &&
          isNotificationSuccessPreview === "true"
        ) {
          showMessageSuccess();
          hideForm();
        } else {
          hideMessageSuccess();
          showForm();
        }
      }
    }

    function checkProductAvailable() {
      var $sectionProductDetail = $element.closest("section[keyword='product'], section[data-keyword='product']");
      var $productJson = $sectionProductDetail.find(".ProductJson");
      let productJson;
      try {
        productJson = JSON.parse($productJson.html())
      } catch (e) {}
      if (!productJson) {
        return;
      }
      const currentVariant = window.SOLID.store.getState("variant" + productJson.id);
      return currentVariant.available;
    }

    function showMessageSuccess() {
      var message = $element.find(".gt_message-success");
      message.show();
    }

    function hideMessageSuccess() {
      var message = $element.find(".gt_message-success");
      message.hide();
    }

    function setFormName() {
      formatTypeText = typeText.toLowerCase().replace(/[^\w\s]/gi, '');
      formatNameText = nameText.toLowerCase().replace(/[^\w\s]/gi, '');
      formatPhoneText = phoneText.toLowerCase().replace(/[^\w\s]/gi, '');
      formatProductName = productNameText.toLowerCase().replace(/[^\w\s]/gi, '');
      formatVariantName = variantNameText.toLowerCase().replace(/[^\w\s]/gi, '');
      formatProductUrl = productUrlText.toLowerCase().replace(/[^\w\s]/gi, '');

      $element.find(".gt_form--type").attr("name", "contact[ " + formatTypeText + "]");
      $element.find(".gt_form-customer--name").attr("name", "contact[ " + formatNameText + "]");
      $element.find(".gt_form-customer--phone").attr("name", "contact[ " + formatPhoneText + "]");
      $element.find(".gt_form--email").attr("required", "required");
      $element.find(".gt_form-customer--email").attr("name", "contact[email]");
      $element.find(".gt_form-product--name").attr("name", "contact[ " + formatProductName + "]");
      $element.find(".gt_form-variant--name").attr("name", "contact[ " + formatVariantName + "]");
      $element.find(".gt_form-product--url").attr("name", "contact[ " + formatProductUrl + "]");
      $element.find(".gt_form--return-url").attr("name", "return_to");
    }

    function removeFormName() {
      $element.find(".gt_form--type").removeAttr("name");
      $element.find(".gt_form-customer--name").removeAttr("name");
      $element.find(".gt_form-customer--phone").removeAttr("name");
      $element.find(".gt_form--email").removeAttr("required");
      $element.find(".gt_form-customer--email").removeAttr("name");
      $element.find(".gt_form-product--name").removeAttr("name");
      $element.find(".gt_form-variant--name").removeAttr("name");
      $element.find(".gt_form-product--url").removeAttr("name");
      $element.find(".gt_form--return-url").removeAttr("name");
    }

    function showForm() {
      var form = $element.find(".gt_form");
      setFormName();
      form.show();
    }

    function hideForm() {
      var form = $element.find(".gt_form");
      $element.find(".gt_form--email").removeAttr("required");
      removeFormName();
      form.hide();
    }

    function setCustomerName(value) {
      var elCustomerName = $element.find(".gt_form-customer--name");
      elCustomerName.val(value);
    }

    function setCustomerPhone(value) {
      var elCustomerPhone = $element.find(".gt_form-customer--phone");
      elCustomerPhone.val(value);
    }

    function setProductName(value) {
      var elProductName = $element.find(".gt_form-product--name");
      elProductName.val(value);
    }

    function setVariantName(value) {
      var elVariantName = $element.find(".gt_form-variant--name");
      elVariantName.val(value);
    }

    function setProductUrl(value) {
      var elProductUrl = $element.find(".gt_form-product--url");
      elProductUrl.val(value);
    }

    function setReturnTo(value) {
      var elReturnTo = $element.find(".gt_form--return-url");
      elReturnTo.val(value);
    }
    /* init block script */
    checkPreviewMessageSuccess();
    setTimeout(() => {
      checkSubmitFormSuccess();
      setReturnTo(
        window.location.pathname + `?posted_successfully=true&id=8h0gglAiUNVB1qE_productSoldOutForm`
      );
    }, 100)
    
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      showMessageSuccess,
      hideMessageSuccess,
      showForm,
      hideForm,
      setCustomerName,
      setCustomerPhone,
      setProductName,
      setVariantName,
      setProductUrl,
      setReturnTo
    };
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      var publicFunc = script($target, indexEl);
      window.SOLID.public = window.SOLID.public || {};
      window.SOLID.public["atom" + "_" + id + "_" + indexEl] = publicFunc;
      if (publicFunc) {
        store.dispatch("public_function_atom_" + id, publicFunc);
      }
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_productSoldOutForm()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_productSoldOutForm" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_trustBadges = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_trustBadges";
  var id = "8h0gglAiUNVB1qE_trustBadges";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_trustBadges",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_trustBadges()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_trustBadges" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_socialBox = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_socialBox";
  var id = "8h0gglAiUNVB1qE_socialBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_socialBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_socialBox()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_socialBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_textShare = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_textShare";
  var id = "8h0gglAiUNVB1qE_textShare";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "8h0gglAiUNVB1qE_textShare",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "8h0gglAiUNVB1qE_textShare",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_textShare()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_textShare" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_iconTwitter = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_iconTwitter";
  var id = "8h0gglAiUNVB1qE_iconTwitter";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_iconTwitter",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_iconTwitter()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_iconTwitter" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_iconFacebook = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_iconFacebook";
  var id = "8h0gglAiUNVB1qE_iconFacebook";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_iconFacebook",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_iconFacebook()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_iconFacebook" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_iconPrinterest = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_iconPrinterest";
  var id = "8h0gglAiUNVB1qE_iconPrinterest";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_iconPrinterest",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_iconPrinterest()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_iconPrinterest" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom8h0gglAiUNVB1qE_iconMail = function() {
          (function() {
  var elementClassName = ".gt_atom-8h0gglAiUNVB1qE_iconMail";
  var id = "8h0gglAiUNVB1qE_iconMail";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "8h0gglAiUNVB1qE_iconMail",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom8h0gglAiUNVB1qE_iconMail()
      } catch(e) {
        console.error("Error ESAtom Id: 8h0gglAiUNVB1qE_iconMail" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSection11958020 = function() {
          var $section = jQuery(".gt_section-11958020");
if (!$section || !$section.length) {
  return;
}
var $iconopenMenuModal = $section.find(".bt_openModal");
var $ModalContent = $section.find(".modal-lg");

$iconopenMenuModal.off("click.openModal11958020").on("click.openModal11958020", function (e) {
  e.preventDefault();
  e.stopPropagation();
  $ModalContent.addClass("md-show");
});

$(window).off("click.closeModal11958020").on("click.closeModal11958020", function (event) {
  var $target = $(event.target);
  var $parent = $target.closest(".modal-lg.md-show");

  if ($parent.length == 0) {
    $ModalContent.removeClass("md-show");
  }
});

        }
        funcESSection11958020()
      } catch(e) {
        console.error("Error ESSection Id: 11958020" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectionHQI1zy829zGz8Vs = function() {
          var $section = jQuery(".gt_section-HQI1zy829zGz8Vs");
var $header = $section.find(".gt_header");
var windowWidth = $(window).width();
const defaultImage = "false" == "true";
var uploadDefaultImage = "https://d3dfaj4bukarbm.cloudfront.net/staging/images/admin/e5516169-55a5-4f84-97a6-e7925fa834b3.png";

if (!$section || !$section.length) {
  return;
}
var $logoHeader = $section.find(".logo_header img")
var widthImage =  $logoHeader.width();
var heightImage =  $logoHeader.height();
$logoHeader.attr('width', widthImage);
$logoHeader.attr('height', heightImage);
var $logoHeaderMB = $section.find(".logo_header_mobile img")
var widthImage =  $logoHeaderMB.width();
var heightImage =  $logoHeaderMB.height();
$logoHeaderMB.attr('width', widthImage);
$logoHeaderMB.attr('height', heightImage);

var $contentMenuMobile = $section.find(".gt_nav_open_menu");
var $iconopenMenuMobile = $section.find(".icon_open_nav");
var $iconCloseMenuMobile = $section.find(".icon_close_menu");
var $contentSubMenu = $section.find(".menu_desktop_content .sub_menu");
var $contentSubMenuNoChild = $section.find(".menu_desktop_content .sub_menu_no_child");

$contentMenuMobile.removeClass("gt_active");
$("body").removeClass("gt_active-header-no-scroll");
$("html").removeClass("show-menu");

setTimeout(function () {
  $contentSubMenu.addClass("addAnimation");
  $contentSubMenuNoChild.addClass("addAnimation");
}, 2000);

var closeMenuMobile = function () {
  $contentMenuMobile.removeClass("gt_active");
  $("body").removeClass("gt_active-header-no-scroll");
  $("html").removeClass("show-menu");
  $section.removeClass("gt_active");
};

var checkOpenMenu = function () {

  $iconopenMenuMobile.off("click.openMenuHQI1zy829zGz8Vs").on("click.openMenuHQI1zy829zGz8Vs", function () {
    $contentMenuMobile.addClass("gt_active");
    $("body").addClass("gt_active-header-no-scroll");
    $("html").addClass("show-menu");
    $section.addClass("gt_active");

    $(window).off("click.closeMenuHQI1zy829zGz8Vs").on("click.closeMenuHQI1zy829zGz8Vs", function (event) {
      var $target = $(event.target);
      var $parent = $target.closest(".nav_open_menu_content");
      var $bat = $target.closest(".icon_open_nav");
      var $close = $target.closest(".icon_close_menu");

      if ($parent.length == 0 && $bat.length == 0 && $close.length == 0) {
        closeMenuMobile();
        $(window).off("click.closeMenuHQI1zy829zGz8Vs");
      }
    });
  });

  $iconCloseMenuMobile.off("click.closeMenuHQI1zy829zGz8Vs").on("click.closeMenuHQI1zy829zGz8Vs", function () {
    closeMenuMobile();
    $(window).off("click.closeMenuHQI1zy829zGz8Vs");

  });

  var $liLevel1 = $section.find(".item_l1 .icon_l1");
  var $submenuL2 = $section.find(".sub_menu_l2");
  var $iconBackL1 = $section.find(".icon_back_l1");
  var $liLevel2 = $section.find(".item_l2 .icon_l1");
  var $submenuL3 = $section.find(".sub_menu_l3");
  var $iconBackL2 = $section.find(".icon_back_l2");
  var $searchMobile = $section.find(".menu_mobile .search_mobile");
  var $accountMobile = $section.find(".menu_mobile .gt_my_account");
  var $cacheLevel1;

  $liLevel1.off("click.openMenuL2HQI1zy829zGz8Vs").on("click.openMenuL2HQI1zy829zGz8Vs", function () {
    // var checkIconL1 = $(this).find(".icon_l1");
    // if (!checkIconL1 || !checkIconL1.length) {
    //   return;
    // }

    $liLevel1.removeClass("gt_active");
    $submenuL2.removeClass("gt_active");
    $(this).closest(".item_l1").addClass("gt_active");
    $(this).closest(".item_l1").find(".sub_menu_l2").addClass("gt_active");
    $cacheLevel1 = $(this);
    $searchMobile.hide();
    $accountMobile.hide();
  });

  $iconBackL1.off("click.backMenuL1HQI1zy829zGz8Vs").on("click.backMenuL1HQI1zy829zGz8Vs", function (e) {
    e.preventDefault();
    $submenuL2.removeClass("gt_active");
    $searchMobile.show();
    $accountMobile.show();
    return false;
  });

  $liLevel2.off("click.openMenuL3HQI1zy829zGz8Vs").on("click.openMenuL3HQI1zy829zGz8Vs", function () {
    // var checkIconL2 = $(this).find(".icon_l1");
    // if (!checkIconL2 || !checkIconL2.length) {
    //   return;
    // }

    $cacheLevel1.find(".gt_title_l1").hide();

    $liLevel2.removeClass("gt_active");
    $submenuL3.removeClass("gt_active");
    $(this).closest(".item_l2").addClass("gt_active");
    $(this).closest(".item_l2").find(".sub_menu_l3").addClass("gt_active");
  });

  $iconBackL2.off("click.backMenuL2HQI1zy829zGz8Vs").on("click.backMenuL2HQI1zy829zGz8Vs", function (e) {
    e.preventDefault();
    $submenuL3.removeClass("gt_active");
    $cacheLevel1.find(".gt_title_l1").show();
    return false;
  });
};

checkOpenMenu();

var $menuDesktop = $section.find(".gt_nav");
var $btnFix = $section.find(".icon_when_scroll");
var $menuFix = $section.find(".menu_desktop");
var $btnOpenMenu = $section.find(".icon_when_scroll_content");
var $headerBoxShadow = $section.find(".gt_header-inner");

var $menuMobile = $section.find(".menu_mobile");

$menuMobile.removeClass("gt_active");

var stickyHeader_HQI1zy829zGz8Vs = function () {
  var scrollTop = $(document).scrollTop();
  var headerHeights = $section.outerHeight();
  if (scrollTop > headerHeights + $section.offset().top) {
    $section.css("height", headerHeights + "px");
    $menuFix.addClass("gt_active");
    $menuDesktop.addClass("gt_active");
    $btnFix.addClass("gt_active");
    $menuMobile.addClass("gt_active");
    $header.addClass("gt_parent-sticky");

  } else {
    $section.css("height", "auto");
    $menuFix.removeClass("gt_active");
    $menuDesktop.removeClass("gt_active");
    $btnFix.removeClass("gt_active");
    $menuMobile.removeClass("gt_active");
    $btnOpenMenu.removeClass("gt_active");
    $menuDesktop.removeClass("gt_active-fix");
    $header.removeClass("gt_parent-sticky");
  }
};
stickyHeader_HQI1zy829zGz8Vs();

$(window).off("scroll.scrollMenuHQI1zy829zGz8Vs").on("scroll.scrollMenuHQI1zy829zGz8Vs", function () {
  stickyHeader_HQI1zy829zGz8Vs();
});
$(window)
  .off("resize.checkSwitchScreensHQI1zy829zGz8Vs")
  .on("resize.checkSwitchScreensHQI1zy829zGz8Vs", function () {
    stickyHeader_HQI1zy829zGz8Vs();
  });

$btnOpenMenu.off("click.openMenuWhenScrollHQI1zy829zGz8Vs").on("click.openMenuWhenScrollHQI1zy829zGz8Vs", function () {
  if ($btnOpenMenu.hasClass("gt_active")) {
    $btnOpenMenu.removeClass("gt_active");
    $menuDesktop.removeClass("gt_active-fix");
    $headerBoxShadow.removeClass("gt_disable_boxshadow");
  } else {
    $btnOpenMenu.addClass("gt_active");
    $menuDesktop.addClass("gt_active-fix");
    $headerBoxShadow.addClass("gt_disable_boxshadow");
  }
});

var $totalCartDesktop = $section.find(".total_number_cart");
var $totalCartMobile = $section.find(".total_number_cart_mobile");
window.store.change("cart.item_count", function (cartNumber) {
  $totalCartDesktop.text(cartNumber);
});

window.store.change("cart.item_count", function (cartNumber) {
  $totalCartMobile.text(cartNumber);
});

window.store.change("isScrollToSection", function(value) {
  if(value) {
    closeMenuMobile();
    window.store.update("isScrollToSection", false);
  }
});

// open cart drawer
var $cartButton = $section.find(".gt_show-cart");
window.SOLID.store.subscribe("addons", function(addons) {
  if (addons.cart_drawer && addons.cart_drawer.autoOpenCartDrawer) {
    $cartButton.removeAttr("href");
    $cartButton.on("click", function() {
      window.SOLID.store.dispatch("openCartPopup", "cart_drawer");
    });
  }
});

//search suggestions
const searchSuggestions = "true" == "true";
var popularSearches = $section.find(".menu_desktop .gt_header-content .gt_popular-searches");
var popularSearchesMobile =  $section.find(".menu_mobile .gt_popular-searches");
if (searchSuggestions) {
  $section.find(".search_bar_content .gt_nav-search-input-des").click(function() {
    popularSearches.show();
  });
  
  $section.find(".search_mobile .gt_nav-search-input-des").click(function() {
    popularSearchesMobile.show();
  });

  $(document).click(function (e) {
    if (!$(e.target).hasClass("gt_nav-search-input-des") 
        && $(e.target).parents(".gt_popular-searches").length === 0) 
    {
      popularSearches.hide();
      popularSearchesMobile.hide();
    }});
}

//search results
var currentAjaxRequest = null;
const searchResults = "true" == "true";
if (searchResults) {
  $section.find('form[action="/search"]').each(function () {
    var input = $(this).find('input[name="q"]');
    input.attr("autocomplete", "off").bind("keyup change", function () {
      popularSearches.hide();
      popularSearchesMobile.hide();
      var term = $(this).val();
      var searchBar = $section.find(".menu_desktop .search_bar_header");  
      var term1 = "&options[prefix]=last";      
      var searchURL = "/search?type=product&q=" + term + term1;
      var searchResultsWrapper = searchBar.find(".gt_search-results--wrapper");
      var searchResultsWrapperMobile = $section.find(".search_mobile .gt_search-results--wrapper");
      var resultsList = searchBar.find(".gt_search-results");
      var resultsListMobile = $section.find(".search_mobile .gt_search-results--wrapper .gt_search-results");
      if (term.length > 0 && term != $(this).attr("data-old-term")) {
        $(this).attr("data-old-term", term);
        if (currentAjaxRequest != null) currentAjaxRequest.abort();
        var ajaxData = {
          resources: {
            type: "product,collection,article,page",
            limit: 4,
            options: {  
              prefix: "last",
              fields: "author,body,product_type,tag,title,variants.barcode,variants.sku,variants.title,vendor",
            },
          },
        };
        var url2 = "&resources[type]=product,collection,article,page";
        currentAjaxRequest = $.getJSON({
          url: "/search/suggest.json?q=" + term + url2,
          type: "GET",
          dataType: "json",
          data: ajaxData,
          success: function (data) {
            resultsList.empty();
            resultsListMobile.empty();
            if (data.resources.results.products.length == 0 && data.resources.results.collections.length == 0 && data.resources.results.articles.length == 0 && data.resources.results.pages.length == 0) {
              resultsList.append(searchResultsWrapper.find(".gt_search-no-result").html());
              resultsListMobile.append(searchResultsWrapperMobile.find(".gt_search-no-result").html());
              searchResultsWrapper.fadeIn(200);
              searchResultsWrapperMobile.fadeIn(200);
            } else {
              $.each(data.resources.results.products, function (index, item) {
                var imgProductUrl = "";
                if (item.featured_image.url != null) {
                  imgProductUrl = item.featured_image.url;
                }
                else {
                  imgProductUrl = uploadDefaultImage;
                }
                var link = $(
                  '<a class="gt_predictive-search-item__link"></a>'
                ).attr("href", item.url);
                if (!defaultImage && item.featured_image.url != null || defaultImage && item.featured_image.url != null || defaultImage && item.featured_image.url == null) {
                  link.append(
                    '<div class="gt_predictive-search__column gt_predictive-search__column--image"><img src="' +
                    imgProductUrl +
                    '" /></div>'
                  );
                }
                link.append(
                  '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
                  item.title +
                  '</div>' +
                  '<div>' +
                  '<span class="gt_predictive-search-item__price">' +
                  formatMoneyPlugin(item.price*100) +
                  '</span>' + (item.compare_at_price_min <= 0 ? '' : '<span class="gt_predictive-search-item__compare--price">' +
                  formatMoneyPlugin(item.compare_at_price_min*100) +
                  '</span>') +
                  '</div>' +
                  '</div>'
                );

                var linkMobile = $(
                  '<a class="gt_predictive-search-item__link gt_predictive-search-item--mobile"></a>'
                ).attr("href", item.url);
                if (!defaultImage && item.featured_image.url != null || defaultImage && item.featured_image.url != null || defaultImage && item.featured_image.url == null) {
                  linkMobile.append(
                    '<div class="gt_predictive-search__column gt_predictive-search__column--image"><img src="' +
                    imgProductUrl +
                    '" /></div>'
                  );
                }
                linkMobile.append(
                  '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
                  item.title +
                  '</div>' +
                  '<div>' +
                  '<span class="gt_predictive-search-item__price">' +
                  formatMoneyPlugin(item.price*100) +
                  '</span>' + (item.compare_at_price_min <= 0 ? '' : '<span class="gt_predictive-search-item__compare--price">' +
                  formatMoneyPlugin(item.compare_at_price_min*100) +
                  '</span>') +
                  '</div>' +
                  '</div>'
                );
                link.wrap('<div class="gt_pred-item gt_pred-item-product" data-index="'+ index + '"></div>');
                linkMobile.wrap('<div class="gt_pred-item gt_pred-item-product" data-index="'+ index + '"></div>');
                resultsList.append(link.parent());
                resultsListMobile.append(linkMobile.parent());
              });

              $.each(data.resources.results.collections, function (index, item) {
                var imgCollectionUrl = "";
                if (item.featured_image.url != null) {
                  imgCollectionUrl = item.featured_image.url;
                }
                else {
                  imgCollectionUrl = uploadDefaultImage;
                }
                var collectionLink = $(
                  '<a class="gt_predictive-search-item__link gt_predictive-search-item__collection-link"></a>'
                ).attr("href", item.url);
                if (!defaultImage && item.featured_image.url != null || defaultImage && item.featured_image.url != null || defaultImage && item.featured_image.url == null) {
                  collectionLink.append(
                    '<div class="gt_predictive-search__column gt_predictive-search__column--image"><img src="' +
                    imgCollectionUrl +
                    '" /></div>'
                  );
                }
                collectionLink.append(
                  '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
                  item.title +
                  '</div>' +
                  '</div>'
                );

                var collectionLinkMobile = $(
                  '<a class="gt_predictive-search-item__link gt_predictive-search-item__collection-link  gt_predictive-search-item__collection-link--mobile"></a>'
                ).attr("href", item.url);
                if (!defaultImage && item.featured_image.url != null || defaultImage && item.featured_image.url != null || defaultImage && item.featured_image.url == null) {
                  collectionLinkMobile.append(
                    '<div class="gt_predictive-search__column gt_predictive-search__column--image"><img src="' +
                    imgCollectionUrl +
                    '" /></div>'
                  );
                }
                collectionLinkMobile.append(
                  '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
                  item.title +
                  '</div>' +
                  '</div>'
                );

                collectionLink.wrap('<div class="gt_pred-item gt_pred-item-collection" data-index="'+ index + '"></div>');
                collectionLinkMobile.wrap('<div class="gt_pred-item gt_pred-item-collection" data-index="'+ index + '"></div>');
                resultsList.append(collectionLink.parent());
                resultsListMobile.append(collectionLinkMobile.parent());
              });

              $.each(data.resources.results.articles, function (index, item) {
                var imgArticleUrl = "";
                if (item.featured_image.url != null) {
                  imgArticleUrl = item.featured_image.url;
                }
                else {
                  imgArticleUrl = uploadDefaultImage;
                }
                var articleLink = $(
                  '<a class="gt_predictive-search-item__link gt_predictive-search-item__article-link"></a>'
                ).attr("href", item.url);
                if (!defaultImage && item.featured_image.url != null || defaultImage && item.featured_image.url != null || defaultImage && item.featured_image.url == null) {
                  articleLink.append(
                    '<div class="gt_predictive-search__column gt_predictive-search__column--image"><img src="' +
                    imgArticleUrl +
                    '" /></div>'
                  );
                }
                articleLink.append(
                  '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
                  item.title +
                  '</div>' +
                  '</div>'
                );

                var articleLinkMobile = $(
                  '<a class="gt_predictive-search-item__link gt_predictive-search-item__article-link  gt_predictive-search-item__article-link--mobile"></a>'
                ).attr("href", item.url);
                if (!defaultImage && item.featured_image.url != null || defaultImage && item.featured_image.url != null || defaultImage && item.featured_image.url == null) {
                  articleLinkMobile.append(
                    '<div class="gt_predictive-search__column gt_predictive-search__column--image"><img src="' +
                    imgArticleUrl +
                    '" /></div>'
                  );
                }
                articleLinkMobile.append(
                  '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
                  item.title +
                  '</div>' +
                  '</div>'
                );

                articleLink.wrap('<div class="gt_pred-item gt_pred-item-article" data-index="'+ index + '"></div>');
                articleLinkMobile.wrap('<div class="gt_pred-item gt_pred-item-article" data-index="'+ index + '"></div>');
                resultsList.append(articleLink.parent());
                resultsListMobile.append(articleLinkMobile.parent());
              });

              $.each(data.resources.results.pages, function (index, item) {
                var pageLink = $(
                  '<a class="gt_predictive-search-item__link gt_predictive-search-item__page-link"></a>'
                ).attr("href", item.url);
                pageLink.append(
                  '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
                  item.title +
                  '</div>' +
                  '</div>'
                );

                var pageLinkMobile = $(
                  '<a class="gt_predictive-search-item__link gt_predictive-search-item__page-link gt_predictive-search-item__page-link--mobile"></a>'
                ).attr("href", item.url);
                pageLinkMobile.append(
                  '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
                  item.title +
                  '</div>' +
                  '</div>'
                );


                pageLink.wrap('<div class="gt_pred-item gt_pred-item-page" data-index="'+ index + '"></div>');
                pageLinkMobile.wrap('<div class="gt_pred-item gt_pred-item-page" data-index="'+ index + '"></div>');
                resultsList.append(pageLink.parent());
                resultsListMobile.append(pageLinkMobile.parent());
              });

              var titleProduct = searchResultsWrapper.find(".gt_title_list-products");
              titleProduct.clone().insertBefore(".gt_pred-item-product[data-index='0']");

              var titleCollection = searchResultsWrapper.find(".gt_title_list-collections");
              titleCollection.clone().insertBefore(".gt_pred-item-collection[data-index='0']");

              var titleArticle = searchResultsWrapper.find(".gt_title_list-articles");
              titleArticle.clone().insertBefore(".gt_pred-item-article[data-index='0']");

              var titlePage = searchResultsWrapper.find(".gt_title_list-pages");
              titlePage.clone().insertBefore(".gt_pred-item-page[data-index='0']");

              if (data.resources.results.products.length == 4 || data.resources.results.collections.length == 4 || data.resources.results.articles.length == 4 || data.resources.results.pages.length == 4){
                var txtButton = searchResultsWrapper.find(".gt_search-has-results").html();
                var txtButtonMobile = searchResultsWrapperMobile.find(".gt_search-has-results").html();
                resultsList.append(
                  '<div><span class="gt_title"><a class="gt_search-results--button" href="' +
                  searchURL +
                  '"> '+ txtButton + '"'+ term +'"</a></span></div>'
                );
                resultsListMobile.append(
                  '<div><span class="gt_title"><a class="gt_search-results--button" href="' +
                  searchURL +
                  '"> '+ txtButtonMobile + '"'+ term +'"</a></span></div>'
                );
              }
              searchResultsWrapper.fadeIn(200);
              searchResultsWrapperMobile.fadeIn(200);
            }
          },
        });
      }
    });
  });

  $("body").bind("click", function () {
    $(".gt_search-results--wrapper").hide();
  });
}

function formatMoneyPlugin(price, notApplyRoundDecimal) {
  const dataCurrency = window.store.get("dataCurrency");
  const format = window.__GemSettings.money;
  if (dataCurrency) {
    price = window.Shopify.gemFormatMoney(price, dataCurrency.currency, dataCurrency.data, null, notApplyRoundDecimal);
  } else {
    price = window.Shopify.formatMoney(price, format);
  }

  return price;
}

// Show overlay when click to input form search on PC
var $headerContentOverlay = $section.find(".menu_desktop .gt_overlay");
var $inputForm = $section.find(".menu_desktop .gt_input");
$inputForm.on("click", function (e){
  $headerContentOverlay.addClass("gt_overlay-active");
  $("body").addClass("gt_overlay-show");
  e.preventDefault();
});

$headerContentOverlay.on("click", function () {
  if ($headerContentOverlay.hasClass("gt_overlay-active")) {
    $headerContentOverlay.removeClass("gt_overlay-active");
  $("body").removeClass("gt_overlay-show");
  }
});

$section
.off("click.overLay")
.on("click.overLay", function (e) {
  if (!$(e.target).hasClass("gt_input")
    && $(e.target).parents(".gt_overlay").length === 0)
  {
    $headerContentOverlay.removeClass("gt_overlay-active");
  $("body").removeClass("gt_overlay-show");
  }
});

        }
        funcESSectionHQI1zy829zGz8Vs()
      } catch(e) {
        console.error("Error ESSection Id: HQI1zy829zGz8Vs" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSection3E3yBP8rJ4w4f2L = function() {
          (function() {
  var elementClassName = ".gt_section-3E3yBP8rJ4w4f2L";
  var id = "3E3yBP8rJ4w4f2L";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    /* store get state block script */
    /* methods block script */
    function triggerRenderAtom() {
      $element.find(".gt_faq--question").off("click").on("click", faqAccordion);
    }

    function faqAccordion() {
      var $itemThis = $(this);
      var $subFaq = $itemThis.siblings();
      if ($subFaq.length > 0) {
        var time = 0.3;
        if ($itemThis.hasClass("gt_active")) {
          var animationIns = window.SOLID.library.gtAnimationsV2({
            $element: $subFaq[0],
            settings: {
              duration: time,
            },
          });
          animationIns.slideUp(function() {
            $itemThis.removeClass("gt_active");
            $subFaq.removeClass("gt_active-ans");
          });
        } else {
          var $itemActive = $element.find(".gt_faq--question.gt_active");
          if ($itemActive && $itemActive.length) {
            for (let i = 0; i < $itemActive.length; i++) {
              var $faqAnswersActive = $($itemActive[i]).siblings();
              var animationInsOther = window.SOLID.library.gtAnimationsV2({
                $element: $faqAnswersActive[0],
                settings: {
                  duration: time,
                },
              });
              animationInsOther.slideUp(function() {
                $($itemActive[i]).removeClass("gt_active");
                $faqAnswersActive.removeClass("gt_active-ans");
              });
            }
          }
          $itemThis.addClass("gt_active");
          $subFaq.addClass("gt_active-ans");
          var animationInsActive = window.SOLID.library.gtAnimationsV2({
            $element: $subFaq[0],
            settings: {
              duration: time,
            },
          });
          animationInsActive.slideDown();
        }
      }
    }
    /* init block script */
    /* store subscribe block script */
    store.subscribe("render-html-3E3yBP8rJ4w4f2L-faqListItem", triggerRenderAtom);

    function destroy() {
      store.unsubscribe("render-html-3E3yBP8rJ4w4f2L-faqListItem", triggerRenderAtom);
    }
    /* events block script */
    var $elements_1 = $element.find(".gt_faq--question");
    $elements_1.off("click").on("click", faqAccordion);
    /* destroy block script */
    
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target, indexEl);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESSection3E3yBP8rJ4w4f2L()
      } catch(e) {
        console.error("Error ESSection Id: 3E3yBP8rJ4w4f2L" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqBox = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqBox";
  var id = "3E3yBP8rJ4w4f2L_faqBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_faqBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqBox()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqContentColumn = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqContentColumn";
  var id = "3E3yBP8rJ4w4f2L_faqContentColumn";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_faqContentColumn",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqContentColumn()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqContentColumn" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_information = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_information";
  var id = "3E3yBP8rJ4w4f2L_information";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3E3yBP8rJ4w4f2L_information",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3E3yBP8rJ4w4f2L_information",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_information()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_information" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_description = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_description";
  var id = "3E3yBP8rJ4w4f2L_description";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3E3yBP8rJ4w4f2L_description",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3E3yBP8rJ4w4f2L_description",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_description()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_description" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqList = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqList";
  var id = "3E3yBP8rJ4w4f2L_faqList";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_faqList",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqList()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqList" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqListItem_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqListItem_0";
  var id = "3E3yBP8rJ4w4f2L_faqListItem_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_faqListItem_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqListItem_0()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqListItem_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqQuestion_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqQuestion_0";
  var id = "3E3yBP8rJ4w4f2L_faqQuestion_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_faqQuestion_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqQuestion_0()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqQuestion_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqTitle_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqTitle_0";
  var id = "3E3yBP8rJ4w4f2L_faqTitle_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3E3yBP8rJ4w4f2L_faqTitle_0",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3E3yBP8rJ4w4f2L_faqTitle_0",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqTitle_0()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqTitle_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_iconOpen_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_iconOpen_0";
  var id = "3E3yBP8rJ4w4f2L_iconOpen_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_iconOpen_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_iconOpen_0()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_iconOpen_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_iconClose_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_iconClose_0";
  var id = "3E3yBP8rJ4w4f2L_iconClose_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_iconClose_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_iconClose_0()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_iconClose_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqAnswers_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqAnswers_0";
  var id = "3E3yBP8rJ4w4f2L_faqAnswers_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_faqAnswers_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqAnswers_0()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqAnswers_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqContent_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqContent_0";
  var id = "3E3yBP8rJ4w4f2L_faqContent_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3E3yBP8rJ4w4f2L_faqContent_0",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3E3yBP8rJ4w4f2L_faqContent_0",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqContent_0()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqContent_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqListItem_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqListItem_1";
  var id = "3E3yBP8rJ4w4f2L_faqListItem_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_faqListItem_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqListItem_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqListItem_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqQuestion_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqQuestion_1";
  var id = "3E3yBP8rJ4w4f2L_faqQuestion_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_faqQuestion_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqQuestion_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqQuestion_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqTitle_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqTitle_1";
  var id = "3E3yBP8rJ4w4f2L_faqTitle_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3E3yBP8rJ4w4f2L_faqTitle_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3E3yBP8rJ4w4f2L_faqTitle_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqTitle_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqTitle_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_iconOpen_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_iconOpen_1";
  var id = "3E3yBP8rJ4w4f2L_iconOpen_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_iconOpen_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_iconOpen_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_iconOpen_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_iconClose_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_iconClose_1";
  var id = "3E3yBP8rJ4w4f2L_iconClose_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_iconClose_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_iconClose_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_iconClose_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqAnswers_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqAnswers_1";
  var id = "3E3yBP8rJ4w4f2L_faqAnswers_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_faqAnswers_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqAnswers_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqAnswers_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqContent_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqContent_1";
  var id = "3E3yBP8rJ4w4f2L_faqContent_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3E3yBP8rJ4w4f2L_faqContent_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3E3yBP8rJ4w4f2L_faqContent_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqContent_1()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqContent_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqListItem_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqListItem_2";
  var id = "3E3yBP8rJ4w4f2L_faqListItem_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_faqListItem_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqListItem_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqListItem_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqQuestion_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqQuestion_2";
  var id = "3E3yBP8rJ4w4f2L_faqQuestion_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_faqQuestion_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqQuestion_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqQuestion_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqTitle_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqTitle_2";
  var id = "3E3yBP8rJ4w4f2L_faqTitle_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3E3yBP8rJ4w4f2L_faqTitle_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3E3yBP8rJ4w4f2L_faqTitle_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqTitle_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqTitle_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_iconOpen_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_iconOpen_2";
  var id = "3E3yBP8rJ4w4f2L_iconOpen_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_iconOpen_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_iconOpen_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_iconOpen_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_iconClose_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_iconClose_2";
  var id = "3E3yBP8rJ4w4f2L_iconClose_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_iconClose_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_iconClose_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_iconClose_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqAnswers_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqAnswers_2";
  var id = "3E3yBP8rJ4w4f2L_faqAnswers_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_faqAnswers_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqAnswers_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqAnswers_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_faqContent_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_faqContent_2";
  var id = "3E3yBP8rJ4w4f2L_faqContent_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3E3yBP8rJ4w4f2L_faqContent_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3E3yBP8rJ4w4f2L_faqContent_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_faqContent_2()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_faqContent_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_boxSendQuestion = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_boxSendQuestion";
  var id = "3E3yBP8rJ4w4f2L_boxSendQuestion";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_boxSendQuestion",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_boxSendQuestion()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_boxSendQuestion" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_question = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_question";
  var id = "3E3yBP8rJ4w4f2L_question";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3E3yBP8rJ4w4f2L_question",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3E3yBP8rJ4w4f2L_question",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_question()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_question" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_buttonLink = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_buttonLink";
  var id = "3E3yBP8rJ4w4f2L_buttonLink";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const isProduction = "production" === "production";
    let actions = `[]`
    const isCustomActions = "false" == "true"
    const openNewTab = "false" == "true"
    const linkButton = "";
    const activeButtonFixContent = "false" === "true";
    const buttonFixContent = "Buy [!quantity!] items"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_buttonLink",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }

    function addAction() {
      if (!isCustomActions) {
        if (linkButton != "") {
          actionsObj = [{
            "id": 1,
            "event": "click",
            "control": {
              "id": "1",
              "attribute": "1",
              "title": "Pick Link",
              "desc": "",
              "reference": "html",
              "type": "picklink",
              "value": linkButton,
              "newTab": openNewTab
            }
          }]
        } else {
          actionsObj = []
        }
        actions = JSON.stringify(actionsObj);
      }
      if (isProduction) {
        $element.customEvent(JSON.parse(actions), id + "_" + indexEl);
        /*Listenifisbuttonaddtocard*/

        window.SOLID.store.subscribe("loading-buy-now-3E3yBP8rJ4w4f2L_buttonLink" + "_" + indexEl, function(isDisplay) {
          const $loadingEl = $element.find(".atom-button-loading-circle-loader");
          const $textEl = $element.find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              window.SOLID.store.dispatch("loading-buy-now-3E3yBP8rJ4w4f2L_buttonLink" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                window.SOLID.store.dispatch("loading-buy-now-3E3yBP8rJ4w4f2L_buttonLink" + "_" + indexEl, "");
              }, 3000);
            }
          }
        });
      }
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    addAction();
    if (activeButtonFixContent) {
      initFixContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_buttonLink()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_buttonLink" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_contactColumn = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_contactColumn";
  var id = "3E3yBP8rJ4w4f2L_contactColumn";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_contactColumn",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_contactColumn()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_contactColumn" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_imageUploadTop = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_imageUploadTop";
  var id = "3E3yBP8rJ4w4f2L_imageUploadTop";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_imageUploadTop",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_imageUploadTop()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_imageUploadTop" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_boxContentAbsolute = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_boxContentAbsolute";
  var id = "3E3yBP8rJ4w4f2L_boxContentAbsolute";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_boxContentAbsolute",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_boxContentAbsolute()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_boxContentAbsolute" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_iconPhone = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_iconPhone";
  var id = "3E3yBP8rJ4w4f2L_iconPhone";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_iconPhone",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_iconPhone()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_iconPhone" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_hotline = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_hotline";
  var id = "3E3yBP8rJ4w4f2L_hotline";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3E3yBP8rJ4w4f2L_hotline",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3E3yBP8rJ4w4f2L_hotline",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_hotline()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_hotline" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_headingText1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_headingText1";
  var id = "3E3yBP8rJ4w4f2L_headingText1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3E3yBP8rJ4w4f2L_headingText1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3E3yBP8rJ4w4f2L_headingText1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_headingText1()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_headingText1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_messageText1 = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_messageText1";
  var id = "3E3yBP8rJ4w4f2L_messageText1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "3E3yBP8rJ4w4f2L_messageText1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "3E3yBP8rJ4w4f2L_messageText1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_messageText1()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_messageText1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom3E3yBP8rJ4w4f2L_imageUploadBottom = function() {
          (function() {
  var elementClassName = ".gt_atom-3E3yBP8rJ4w4f2L_imageUploadBottom";
  var id = "3E3yBP8rJ4w4f2L_imageUploadBottom";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "3E3yBP8rJ4w4f2L_imageUploadBottom",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom3E3yBP8rJ4w4f2L_imageUploadBottom()
      } catch(e) {
        console.error("Error ESAtom Id: 3E3yBP8rJ4w4f2L_imageUploadBottom" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectionZf7in662kt8use5 = function() {
          (function() {
  var elementClassName = ".gt_section-Zf7in662kt8use5";
  var id = "Zf7in662kt8use5";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var slideItems = Number("7");
    var delay = 0;
    /* store get state block script */
    /* methods block script */
    function optimizeTextValue(value) {
      console.log("optimize-Zf7in662kt8use5_quote_0-textValue", value);
    }

    function calculatorHeight() {
      var $desc = $element.find(".gt_box-product");
      if ($desc && $desc.length) {
        $desc.css({
          "height": "unset",
        });
        var max = 0;
        for (let i = 0; i < $desc.length; i++) {
          let $item = jQuery($desc[i]);
          let height = $item.outerHeight();
          if (height > max) {
            max = height;
          }
        }
        $desc.css({
          "height": max + "px",
        });
      }
    }
    /* init block script */
    delay = setTimeout(function() {
      calculatorHeight();
    }, 100);
    $(window).off("resize.checkSwitchScreensZf7in662kt8use5").on("resize.checkSwitchScreensZf7in662kt8use5", function() {
      clearTimeout(delay);
      delay = setTimeout(function() {
        calculatorHeight();
      }, 100);
    });
    if (slideItems > 0) {
      for (var i = 0; i < slideItems; i++) {
        store.subscribe(`optimize-Zf7in662kt8use5_quote_${i}-textValue`, optimizeTextValue);
      }
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESSectionZf7in662kt8use5()
      } catch(e) {
        console.error("Error ESSection Id: Zf7in662kt8use5" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_ = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_";
  var id = "Zf7in662kt8use5_";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxCover = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxCover";
  var id = "Zf7in662kt8use5_boxCover";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxCover",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxCover()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxCover" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_heading = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_heading";
  var id = "Zf7in662kt8use5_heading";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_heading",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_heading",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_heading()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_heading" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_slide = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_slide";
  var id = "Zf7in662kt8use5_slide";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var loop = "true" === "true";
    var autoplay = "true" === "true";
    var centeredSlides = "false" === "true";
    var slideAutoHeight = "false" === "true";
    var mode = "production";
    var checkWindowWidth = $(window).width();
    var widthSliderCurrent;
    var slidesPerView_lg = "2.5";
    var slidesPerView_md = "3";
    var slidesPerView_sm = "2";
    var slidesPerView_xs = "1";
    var slidesPerColumn_lg = "1";
    var slidesPerColumn_md = "1";
    var slidesPerColumn_sm = "1";
    var slidesPerColumn_xs = "1";
    var spaceBetween_lg = parseInt("30") || 1;
    var spaceBetween_md = parseInt("16") || 1;
    var spaceBetween_sm = parseInt("16") || 1;
    var spaceBetween_xs = parseInt("0") || 1;
    var widthActive = "false" === "true";
    var widthSlider = "100%";
    var widthSlider_lg = "100%";
    var widthSlider_md = "100%";
    var widthSlider_sm = "100%";
    var widthSlider_xs = "100%";
    var autoPlayTime = parseInt("3") || 3;
    var mySwiper;
    var objectSetting;

    var dotsPagination = "dots" === "dots";
    var customPagination = "dots" === "custom";
    /* store get state block script */
    /* methods block script */
    function initSlider() {
      var $swiperContainer = $element.find(".gt_slider");
      if (!$swiperContainer || !$swiperContainer.length) {
        return;
      }
      if (dotsPagination) {
        if (slideAutoHeight) {
          var slideAutoHeight1 = slideAutoHeight;
        } else {
          var slideAutoHeight1 = false;
        }
        objectSetting = {
          autoHeight: slideAutoHeight1,
          speed: 800,
          loop: loop,
          centeredSlides: centeredSlides,
          touchStartPreventDefault: mode === "dev" ? false : true,
          slidesPerView: 1,
          autoplay: autoplay ? {
            delay: autoPlayTime * 1000,
            disableOnInteraction: false,
          } : false,
          navigation: {
            nextEl: "#gt_control-next-Zf7in662kt8use5_slide",
            prevEl: "#gt_control-prev-Zf7in662kt8use5_slide",
          },
          pagination: {
            el: "#gt_control-pagination-Zf7in662kt8use5_slide",
            type: 'custom',
            clickable: true,
            renderCustom: function(swiper, current, total) {
              var customPaginationHtml = "";
              for (var i = 0; i < total; i++) {
                if (i == (current - 1)) {
                  customPaginationHtml += `<div class="gt_control-pagination-item swiper-pagination-bullet swiper-pagination-bullet-active">
                        <span data-optimize-type="icon"  data-attribute="iconDotsActive,"  data-section-id="Zf7in662kt8use5_slide"  class="gt_icon"><svg width="100%" height="100%" viewBox="0 0 20 8" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="20" height="8" rx="4" fill="currentColor"/>
</svg>
</span> </div> `;
                } else {
                  customPaginationHtml += `<div class="gt_control-pagination-item swiper-pagination-bullet">
                        <span data-optimize-type="icon"  data-attribute="iconDots,"  data-section-id="Zf7in662kt8use5_slide"  class="gt_icon"><svg width="100%" height="100%" viewBox="0 0 11 10" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
<circle cx="5.5" cy="5" r="5" fill="currentColor"/>
</svg></span>
                        </div>`;
                }
              }
              return customPaginationHtml;
            }
          },
          breakpoints: {
            0: {
              slidesPerView: slidesPerView_xs,
              spaceBetween: spaceBetween_xs,
              slidesPerColumn: slidesPerColumn_xs,
              slidesPerColumnFill: 'row',
            },
            577: {
              slidesPerView: slidesPerView_sm,
              spaceBetween: spaceBetween_sm,
              slidesPerColumn: slidesPerColumn_sm,
              slidesPerColumnFill: 'row',
            },
            993: {
              slidesPerView: slidesPerView_md,
              spaceBetween: spaceBetween_md,
              slidesPerColumn: slidesPerColumn_md,
              slidesPerColumnFill: 'row',
            },
            1201: {
              slidesPerView: slidesPerView_lg,
              spaceBetween: spaceBetween_lg,
              slidesPerColumn: slidesPerColumn_lg,
              slidesPerColumnFill: 'row',
            },
          },
          on: {
            init: function() {
              const $images = $swiperContainer.find(".gt_lazyload").not(".gt_lazyloaded");
              if ($images && $images.length && window.SOLID.library && window.SOLID.library.gtLazyload) {
                for (var i = 0; i < $images.length; i++) {
                  window.SOLID.library.gtLazyload($images[i]);
                }
              }
            }
          }
        }
      } else if (customPagination) {
        if (slideAutoHeight) {
          var slideAutoHeight2 = slideAutoHeight;
        } else {
          var slideAutoHeight2 = false;
        }
        objectSetting = {
          autoHeight: slideAutoHeight2,
          speed: 800,
          loop: loop,
          centeredSlides: centeredSlides,
          touchStartPreventDefault: mode === "dev" ? false : true,
          slidesPerView: 1,
          autoplay: autoplay ? {
            delay: autoPlayTime * 1000,
            disableOnInteraction: false,
          } : false,
          navigation: {
            nextEl: "#gt_control-next-Zf7in662kt8use5_slide",
            prevEl: "#gt_control-prev-Zf7in662kt8use5_slide",
          },

          pagination: {
            el: "#gt_control-pagination-Zf7in662kt8use5_slide",
            clickable: true,
            renderBullet: function(index, className) {
              index = index + 1;
              if (index < 10) {
                index = "0" + index;
              }
              return '<span class="' + className + '">' + index + '.' + "</span>";
            }
          },
          breakpoints: {
            0: {
              slidesPerView: slidesPerView_xs,
              spaceBetween: spaceBetween_xs,
              slidesPerColumn: slidesPerColumn_xs,
              slidesPerColumnFill: 'row',
            },
            577: {
              slidesPerView: slidesPerView_sm,
              spaceBetween: spaceBetween_sm,
              slidesPerColumn: slidesPerColumn_sm,
              slidesPerColumnFill: 'row',
            },
            993: {
              slidesPerView: slidesPerView_md,
              spaceBetween: spaceBetween_md,
              slidesPerColumn: slidesPerColumn_md,
              slidesPerColumnFill: 'row',
            },
            1201: {
              slidesPerView: slidesPerView_lg,
              spaceBetween: spaceBetween_lg,
              slidesPerColumn: slidesPerColumn_lg,
              slidesPerColumnFill: 'row',
            },
          },
          on: {
            init: function() {
              const $images = $swiperContainer.find(".gt_lazyload").not(".gt_lazyloaded");
              if ($images && $images.length && window.SOLID.library && window.SOLID.library.gtLazyload) {
                for (var i = 0; i < $images.length; i++) {
                  window.SOLID.library.gtLazyload($images[i]);
                }
              }
            }
          }
        }
      }

      $swiperContainer.find(".swiper-wrapper").children().addClass("swiper-slide");

      if ($swiperContainer.find(".swiper-slide").length == 1) {
        $swiperContainer.find(".swiper-wrapper").addClass("gt_disabled");
        $element.find(".gt_control").addClass("gt_disabled");
      }

      if ($swiperContainer[0].swiper) {
        mySwiper = $swiperContainer[0].swiper;
        mySwiper.destroy();
      }
      mySwiper = new Swiper($swiperContainer[0], objectSetting);
    }

    function changeSliderActive(value) {
      if (value && value.sliderIndex !== NaN) {
        if (loop) {
          mySwiper.slideToLoop(value.sliderIndex, 500, true);
        } else {
          mySwiper.slideTo(value.sliderIndex, 500, true);
        }
      }
    }

    function optimizeSlidePerView(value) {
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        slidesPerView_xs = value;
      } else if (checkWindowWidth <= 992) {
        slidesPerView_sm = value;
      } else if (checkWindowWidth <= 1200) {
        slidesPerView_md = value;
      } else {
        slidesPerView_lg = value;
      }
      initSlider();
    }

    function optimizeWidthSlider(value) {
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        widthSlider_xs = value;
      } else if (checkWindowWidth <= 992) {
        widthSlider_sm = value;
      } else if (checkWindowWidth <= 1200) {
        widthSlider_md = value;
      } else {
        widthSlider_lg = widthSlider = value;
      }
      $element.css("cssText", "width: " + value + " !important;");
      mySwiper.update();
    }

    function optimizeWidthActive(value) {
      widthActive = value;
      if (!value) {
        $element.css("cssText", "width: null");
      } else {
        checkWindowWidth = $(window).width();
        widthSliderCurrent = 0;
        if (checkWindowWidth <= 576) {
          widthSliderCurrent = widthSlider_xs;
        } else if (checkWindowWidth <= 992) {
          widthSliderCurrent = widthSlider_sm;
        } else if (checkWindowWidth <= 1200) {
          widthSliderCurrent = widthSlider_md;
        } else {
          widthSliderCurrent = widthSlider;
        }
        $element.css("cssText", "width: " + widthSliderCurrent + " !important;");
      }
    }

    function listen() {
      let observer = new ResizeObserver(() => {
        if (mySwiper) {
          mySwiper.update()
        }
      })
      observer.observe($element[0]);
    }
    /* init block script */
    listen();
    //eslint-disable-next-lineno-undef
    if (mode !== "production") {
      autoplay = false;
    }
    initSlider();
    var delay = 0;

    /* store subscribe block script */
    store.subscribe("optimal-Zf7in662kt8use5_slide-slidesPerView", optimizeSlidePerView);
    store.subscribe("optimal-Zf7in662kt8use5_slide-widthSlider", optimizeWidthSlider);
    store.subscribe("optimal-Zf7in662kt8use5_slide-widthActive", optimizeWidthActive);
    store.subscribe("trigger-slider-Zf7in662kt8use5_slide", changeSliderActive);

    function destroy() {
      store.unsubscribe("optimal-Zf7in662kt8use5_slide-slidesPerView", optimizeSlidePerView);
      store.unsubscribe("optimal-Zf7in662kt8use5_slide-widthSlider", optimizeWidthSlider);
      store.unsubscribe("optimal-Zf7in662kt8use5_slide-widthActive", optimizeWidthActive);
      store.unsubscribe("trigger-slider-Zf7in662kt8use5_slide", changeSliderActive);
    }
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_slide()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_slide" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_slideItem_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_slideItem_0";
  var id = "Zf7in662kt8use5_slideItem_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_slideItem_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_slideItem_0()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_slideItem_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxInfoCustomer_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxInfoCustomer_0";
  var id = "Zf7in662kt8use5_boxInfoCustomer_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxInfoCustomer_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxInfoCustomer_0()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxInfoCustomer_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxImageCustomer_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxImageCustomer_0";
  var id = "Zf7in662kt8use5_boxImageCustomer_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxImageCustomer_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxImageCustomer_0()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxImageCustomer_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_imageCustomer_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_imageCustomer_0";
  var id = "Zf7in662kt8use5_imageCustomer_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_imageCustomer_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_imageCustomer_0()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_imageCustomer_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_imageFlag_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_imageFlag_0";
  var id = "Zf7in662kt8use5_imageFlag_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_imageFlag_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_imageFlag_0()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_imageFlag_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxNameCustomer_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxNameCustomer_0";
  var id = "Zf7in662kt8use5_boxNameCustomer_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxNameCustomer_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxNameCustomer_0()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxNameCustomer_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_nameCustomer_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_nameCustomer_0";
  var id = "Zf7in662kt8use5_nameCustomer_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_nameCustomer_0",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_nameCustomer_0",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_nameCustomer_0()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_nameCustomer_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_jobCustomer_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_jobCustomer_0";
  var id = "Zf7in662kt8use5_jobCustomer_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_jobCustomer_0",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_jobCustomer_0",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_jobCustomer_0()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_jobCustomer_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_quote_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_quote_0";
  var id = "Zf7in662kt8use5_quote_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_quote_0",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_quote_0",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_quote_0()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_quote_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxRating_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxRating_0";
  var id = "Zf7in662kt8use5_boxRating_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxRating_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxRating_0()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxRating_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_rating_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_rating_0";
  var id = "Zf7in662kt8use5_rating_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_rating_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    function destroy() {}
    /* events block script */
    /* destroy block script */
    store.subscribe("component-" + id + "-destroy", function() {
      destroy();
      store.unsubscribe("component-" + id + "-destroy");
    });
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_rating_0()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_rating_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_date_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_date_0";
  var id = "Zf7in662kt8use5_date_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_date_0",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_date_0",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_date_0()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_date_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxIconAbsolute_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxIconAbsolute_0";
  var id = "Zf7in662kt8use5_boxIconAbsolute_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxIconAbsolute_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxIconAbsolute_0()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxIconAbsolute_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_iconTop_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_iconTop_0";
  var id = "Zf7in662kt8use5_iconTop_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_iconTop_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_iconTop_0()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_iconTop_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_slideItem_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_slideItem_1";
  var id = "Zf7in662kt8use5_slideItem_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_slideItem_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_slideItem_1()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_slideItem_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxInfoCustomer_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxInfoCustomer_1";
  var id = "Zf7in662kt8use5_boxInfoCustomer_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxInfoCustomer_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxInfoCustomer_1()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxInfoCustomer_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxImageCustomer_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxImageCustomer_1";
  var id = "Zf7in662kt8use5_boxImageCustomer_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxImageCustomer_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxImageCustomer_1()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxImageCustomer_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_imageCustomer_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_imageCustomer_1";
  var id = "Zf7in662kt8use5_imageCustomer_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_imageCustomer_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_imageCustomer_1()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_imageCustomer_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_imageFlag_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_imageFlag_1";
  var id = "Zf7in662kt8use5_imageFlag_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_imageFlag_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_imageFlag_1()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_imageFlag_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxNameCustomer_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxNameCustomer_1";
  var id = "Zf7in662kt8use5_boxNameCustomer_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxNameCustomer_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxNameCustomer_1()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxNameCustomer_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_nameCustomer_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_nameCustomer_1";
  var id = "Zf7in662kt8use5_nameCustomer_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_nameCustomer_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_nameCustomer_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_nameCustomer_1()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_nameCustomer_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_jobCustomer_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_jobCustomer_1";
  var id = "Zf7in662kt8use5_jobCustomer_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_jobCustomer_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_jobCustomer_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_jobCustomer_1()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_jobCustomer_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_quote_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_quote_1";
  var id = "Zf7in662kt8use5_quote_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_quote_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_quote_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_quote_1()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_quote_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxRating_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxRating_1";
  var id = "Zf7in662kt8use5_boxRating_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxRating_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxRating_1()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxRating_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_rating_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_rating_1";
  var id = "Zf7in662kt8use5_rating_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_rating_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    function destroy() {}
    /* events block script */
    /* destroy block script */
    store.subscribe("component-" + id + "-destroy", function() {
      destroy();
      store.unsubscribe("component-" + id + "-destroy");
    });
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_rating_1()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_rating_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_date_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_date_1";
  var id = "Zf7in662kt8use5_date_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_date_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_date_1",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_date_1()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_date_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxIconAbsolute_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxIconAbsolute_1";
  var id = "Zf7in662kt8use5_boxIconAbsolute_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxIconAbsolute_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxIconAbsolute_1()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxIconAbsolute_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_iconTop_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_iconTop_1";
  var id = "Zf7in662kt8use5_iconTop_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_iconTop_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_iconTop_1()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_iconTop_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_slideItem_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_slideItem_2";
  var id = "Zf7in662kt8use5_slideItem_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_slideItem_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_slideItem_2()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_slideItem_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxInfoCustomer_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxInfoCustomer_2";
  var id = "Zf7in662kt8use5_boxInfoCustomer_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxInfoCustomer_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxInfoCustomer_2()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxInfoCustomer_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxImageCustomer_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxImageCustomer_2";
  var id = "Zf7in662kt8use5_boxImageCustomer_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxImageCustomer_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxImageCustomer_2()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxImageCustomer_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_imageCustomer_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_imageCustomer_2";
  var id = "Zf7in662kt8use5_imageCustomer_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_imageCustomer_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_imageCustomer_2()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_imageCustomer_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_imageFlag_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_imageFlag_2";
  var id = "Zf7in662kt8use5_imageFlag_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_imageFlag_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_imageFlag_2()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_imageFlag_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxNameCustomer_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxNameCustomer_2";
  var id = "Zf7in662kt8use5_boxNameCustomer_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxNameCustomer_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxNameCustomer_2()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxNameCustomer_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_nameCustomer_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_nameCustomer_2";
  var id = "Zf7in662kt8use5_nameCustomer_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_nameCustomer_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_nameCustomer_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_nameCustomer_2()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_nameCustomer_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_jobCustomer_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_jobCustomer_2";
  var id = "Zf7in662kt8use5_jobCustomer_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_jobCustomer_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_jobCustomer_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_jobCustomer_2()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_jobCustomer_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_quote_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_quote_2";
  var id = "Zf7in662kt8use5_quote_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_quote_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_quote_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_quote_2()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_quote_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxRating_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxRating_2";
  var id = "Zf7in662kt8use5_boxRating_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxRating_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxRating_2()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxRating_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_rating_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_rating_2";
  var id = "Zf7in662kt8use5_rating_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_rating_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    function destroy() {}
    /* events block script */
    /* destroy block script */
    store.subscribe("component-" + id + "-destroy", function() {
      destroy();
      store.unsubscribe("component-" + id + "-destroy");
    });
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_rating_2()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_rating_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_date_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_date_2";
  var id = "Zf7in662kt8use5_date_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_date_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_date_2",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_date_2()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_date_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxIconAbsolute_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxIconAbsolute_2";
  var id = "Zf7in662kt8use5_boxIconAbsolute_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxIconAbsolute_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxIconAbsolute_2()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxIconAbsolute_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_iconTop_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_iconTop_2";
  var id = "Zf7in662kt8use5_iconTop_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_iconTop_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_iconTop_2()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_iconTop_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_slideItem_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_slideItem_3";
  var id = "Zf7in662kt8use5_slideItem_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_slideItem_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_slideItem_3()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_slideItem_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxInfoCustomer_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxInfoCustomer_3";
  var id = "Zf7in662kt8use5_boxInfoCustomer_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxInfoCustomer_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxInfoCustomer_3()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxInfoCustomer_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxImageCustomer_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxImageCustomer_3";
  var id = "Zf7in662kt8use5_boxImageCustomer_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxImageCustomer_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxImageCustomer_3()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxImageCustomer_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_imageCustomer_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_imageCustomer_3";
  var id = "Zf7in662kt8use5_imageCustomer_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_imageCustomer_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_imageCustomer_3()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_imageCustomer_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_imageFlag_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_imageFlag_3";
  var id = "Zf7in662kt8use5_imageFlag_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_imageFlag_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_imageFlag_3()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_imageFlag_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxNameCustomer_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxNameCustomer_3";
  var id = "Zf7in662kt8use5_boxNameCustomer_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxNameCustomer_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxNameCustomer_3()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxNameCustomer_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_nameCustomer_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_nameCustomer_3";
  var id = "Zf7in662kt8use5_nameCustomer_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_nameCustomer_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_nameCustomer_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_nameCustomer_3()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_nameCustomer_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_jobCustomer_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_jobCustomer_3";
  var id = "Zf7in662kt8use5_jobCustomer_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_jobCustomer_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_jobCustomer_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_jobCustomer_3()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_jobCustomer_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_quote_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_quote_3";
  var id = "Zf7in662kt8use5_quote_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_quote_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_quote_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_quote_3()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_quote_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxRating_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxRating_3";
  var id = "Zf7in662kt8use5_boxRating_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxRating_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxRating_3()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxRating_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_rating_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_rating_3";
  var id = "Zf7in662kt8use5_rating_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_rating_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    function destroy() {}
    /* events block script */
    /* destroy block script */
    store.subscribe("component-" + id + "-destroy", function() {
      destroy();
      store.unsubscribe("component-" + id + "-destroy");
    });
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_rating_3()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_rating_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_date_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_date_3";
  var id = "Zf7in662kt8use5_date_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_date_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_date_3",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_date_3()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_date_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxIconAbsolute_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxIconAbsolute_3";
  var id = "Zf7in662kt8use5_boxIconAbsolute_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxIconAbsolute_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxIconAbsolute_3()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxIconAbsolute_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_iconTop_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_iconTop_3";
  var id = "Zf7in662kt8use5_iconTop_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_iconTop_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_iconTop_3()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_iconTop_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_slideItem_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_slideItem_4";
  var id = "Zf7in662kt8use5_slideItem_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_slideItem_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_slideItem_4()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_slideItem_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxInfoCustomer_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxInfoCustomer_4";
  var id = "Zf7in662kt8use5_boxInfoCustomer_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxInfoCustomer_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxInfoCustomer_4()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxInfoCustomer_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxImageCustomer_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxImageCustomer_4";
  var id = "Zf7in662kt8use5_boxImageCustomer_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxImageCustomer_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxImageCustomer_4()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxImageCustomer_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_imageCustomer_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_imageCustomer_4";
  var id = "Zf7in662kt8use5_imageCustomer_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_imageCustomer_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_imageCustomer_4()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_imageCustomer_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_imageFlag_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_imageFlag_4";
  var id = "Zf7in662kt8use5_imageFlag_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_imageFlag_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_imageFlag_4()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_imageFlag_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxNameCustomer_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxNameCustomer_4";
  var id = "Zf7in662kt8use5_boxNameCustomer_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxNameCustomer_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxNameCustomer_4()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxNameCustomer_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_nameCustomer_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_nameCustomer_4";
  var id = "Zf7in662kt8use5_nameCustomer_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_nameCustomer_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_nameCustomer_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_nameCustomer_4()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_nameCustomer_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_jobCustomer_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_jobCustomer_4";
  var id = "Zf7in662kt8use5_jobCustomer_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_jobCustomer_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_jobCustomer_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_jobCustomer_4()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_jobCustomer_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_quote_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_quote_4";
  var id = "Zf7in662kt8use5_quote_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_quote_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_quote_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_quote_4()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_quote_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxRating_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxRating_4";
  var id = "Zf7in662kt8use5_boxRating_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxRating_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxRating_4()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxRating_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_rating_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_rating_4";
  var id = "Zf7in662kt8use5_rating_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_rating_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    function destroy() {}
    /* events block script */
    /* destroy block script */
    store.subscribe("component-" + id + "-destroy", function() {
      destroy();
      store.unsubscribe("component-" + id + "-destroy");
    });
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_rating_4()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_rating_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_date_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_date_4";
  var id = "Zf7in662kt8use5_date_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_date_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_date_4",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_date_4()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_date_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxIconAbsolute_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxIconAbsolute_4";
  var id = "Zf7in662kt8use5_boxIconAbsolute_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxIconAbsolute_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxIconAbsolute_4()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxIconAbsolute_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_iconTop_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_iconTop_4";
  var id = "Zf7in662kt8use5_iconTop_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_iconTop_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_iconTop_4()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_iconTop_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_slideItem_5 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_slideItem_5";
  var id = "Zf7in662kt8use5_slideItem_5";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_slideItem_5",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_slideItem_5()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_slideItem_5" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxInfoCustomer_5 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxInfoCustomer_5";
  var id = "Zf7in662kt8use5_boxInfoCustomer_5";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxInfoCustomer_5",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxInfoCustomer_5()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxInfoCustomer_5" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxImageCustomer_5 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxImageCustomer_5";
  var id = "Zf7in662kt8use5_boxImageCustomer_5";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxImageCustomer_5",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxImageCustomer_5()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxImageCustomer_5" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_imageCustomer_5 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_imageCustomer_5";
  var id = "Zf7in662kt8use5_imageCustomer_5";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_imageCustomer_5",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_imageCustomer_5()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_imageCustomer_5" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_imageFlag_5 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_imageFlag_5";
  var id = "Zf7in662kt8use5_imageFlag_5";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_imageFlag_5",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_imageFlag_5()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_imageFlag_5" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxNameCustomer_5 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxNameCustomer_5";
  var id = "Zf7in662kt8use5_boxNameCustomer_5";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxNameCustomer_5",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxNameCustomer_5()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxNameCustomer_5" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_nameCustomer_5 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_nameCustomer_5";
  var id = "Zf7in662kt8use5_nameCustomer_5";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_nameCustomer_5",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_nameCustomer_5",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_nameCustomer_5()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_nameCustomer_5" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_jobCustomer_5 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_jobCustomer_5";
  var id = "Zf7in662kt8use5_jobCustomer_5";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_jobCustomer_5",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_jobCustomer_5",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_jobCustomer_5()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_jobCustomer_5" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_quote_5 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_quote_5";
  var id = "Zf7in662kt8use5_quote_5";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_quote_5",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_quote_5",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_quote_5()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_quote_5" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxRating_5 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxRating_5";
  var id = "Zf7in662kt8use5_boxRating_5";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxRating_5",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxRating_5()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxRating_5" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_rating_5 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_rating_5";
  var id = "Zf7in662kt8use5_rating_5";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_rating_5",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    function destroy() {}
    /* events block script */
    /* destroy block script */
    store.subscribe("component-" + id + "-destroy", function() {
      destroy();
      store.unsubscribe("component-" + id + "-destroy");
    });
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_rating_5()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_rating_5" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_date_5 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_date_5";
  var id = "Zf7in662kt8use5_date_5";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_date_5",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_date_5",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_date_5()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_date_5" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxIconAbsolute_5 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxIconAbsolute_5";
  var id = "Zf7in662kt8use5_boxIconAbsolute_5";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxIconAbsolute_5",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxIconAbsolute_5()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxIconAbsolute_5" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_iconTop_5 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_iconTop_5";
  var id = "Zf7in662kt8use5_iconTop_5";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_iconTop_5",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_iconTop_5()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_iconTop_5" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_slideItem_6 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_slideItem_6";
  var id = "Zf7in662kt8use5_slideItem_6";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_slideItem_6",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_slideItem_6()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_slideItem_6" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxInfoCustomer_6 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxInfoCustomer_6";
  var id = "Zf7in662kt8use5_boxInfoCustomer_6";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxInfoCustomer_6",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxInfoCustomer_6()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxInfoCustomer_6" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxImageCustomer_6 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxImageCustomer_6";
  var id = "Zf7in662kt8use5_boxImageCustomer_6";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxImageCustomer_6",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxImageCustomer_6()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxImageCustomer_6" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_imageCustomer_6 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_imageCustomer_6";
  var id = "Zf7in662kt8use5_imageCustomer_6";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_imageCustomer_6",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_imageCustomer_6()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_imageCustomer_6" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_imageFlag_6 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_imageFlag_6";
  var id = "Zf7in662kt8use5_imageFlag_6";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_imageFlag_6",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_imageFlag_6()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_imageFlag_6" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxNameCustomer_6 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxNameCustomer_6";
  var id = "Zf7in662kt8use5_boxNameCustomer_6";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxNameCustomer_6",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxNameCustomer_6()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxNameCustomer_6" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_nameCustomer_6 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_nameCustomer_6";
  var id = "Zf7in662kt8use5_nameCustomer_6";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_nameCustomer_6",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_nameCustomer_6",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_nameCustomer_6()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_nameCustomer_6" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_jobCustomer_6 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_jobCustomer_6";
  var id = "Zf7in662kt8use5_jobCustomer_6";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_jobCustomer_6",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_jobCustomer_6",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_jobCustomer_6()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_jobCustomer_6" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_quote_6 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_quote_6";
  var id = "Zf7in662kt8use5_quote_6";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_quote_6",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_quote_6",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_quote_6()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_quote_6" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxRating_6 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxRating_6";
  var id = "Zf7in662kt8use5_boxRating_6";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxRating_6",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxRating_6()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxRating_6" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_rating_6 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_rating_6";
  var id = "Zf7in662kt8use5_rating_6";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_rating_6",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    function destroy() {}
    /* events block script */
    /* destroy block script */
    store.subscribe("component-" + id + "-destroy", function() {
      destroy();
      store.unsubscribe("component-" + id + "-destroy");
    });
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_rating_6()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_rating_6" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_date_6 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_date_6";
  var id = "Zf7in662kt8use5_date_6";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "Zf7in662kt8use5_date_6",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "Zf7in662kt8use5_date_6",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_date_6()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_date_6" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_boxIconAbsolute_6 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_boxIconAbsolute_6";
  var id = "Zf7in662kt8use5_boxIconAbsolute_6";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_boxIconAbsolute_6",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_boxIconAbsolute_6()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_boxIconAbsolute_6" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomZf7in662kt8use5_iconTop_6 = function() {
          (function() {
  var elementClassName = ".gt_atom-Zf7in662kt8use5_iconTop_6";
  var id = "Zf7in662kt8use5_iconTop_6";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "Zf7in662kt8use5_iconTop_6",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomZf7in662kt8use5_iconTop_6()
      } catch(e) {
        console.error("Error ESAtom Id: Zf7in662kt8use5_iconTop_6" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectiontsScUBqCMCzgb6E = function() {
          
        }
        funcESSectiontsScUBqCMCzgb6E()
      } catch(e) {
        console.error("Error ESSection Id: tsScUBqCMCzgb6E" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectionC0eaepN6TqCkw6C = function() {
          
        }
        funcESSectionC0eaepN6TqCkw6C()
      } catch(e) {
        console.error("Error ESSection Id: C0eaepN6TqCkw6C" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectionEKykB1kIgMoQJFw = function() {
          
        }
        funcESSectionEKykB1kIgMoQJFw()
      } catch(e) {
        console.error("Error ESSection Id: EKykB1kIgMoQJFw" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectionVvcHghYH0YTQh6V = function() {
          (function() {
  var elementClassName = ".gt_section-VvcHghYH0YTQh6V";
  var id = "VvcHghYH0YTQh6V";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var text_term = $element.find(".gt_text--terms").text();
    var _mode = "production";
    /* store get state block script */
    /* methods block script */
    /* init block script */
    if (_mode == 'dev') {
      $element.find(".gt_search-results-box .gt_nav-search-input-des").attr("value", "Duge");
    } else {
      $element.find(".gt_search-results-box .gt_nav-search-input-des").attr("value", text_term);
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESSectionVvcHghYH0YTQh6V()
      } catch(e) {
        console.error("Error ESSection Id: VvcHghYH0YTQh6V" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_searchContentBox = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_searchContentBox";
  var id = "VvcHghYH0YTQh6V_searchContentBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_searchContentBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_searchContentBox()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_searchContentBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_titleSearchingResults = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_titleSearchingResults";
  var id = "VvcHghYH0YTQh6V_titleSearchingResults";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "VvcHghYH0YTQh6V_titleSearchingResults",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "VvcHghYH0YTQh6V_titleSearchingResults",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_titleSearchingResults()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_titleSearchingResults" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_searchTitle = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_searchTitle";
  var id = "VvcHghYH0YTQh6V_searchTitle";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "VvcHghYH0YTQh6V_searchTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "VvcHghYH0YTQh6V_searchTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function cacheDev() {
      if ("production" === "dev") {
        var searchCount = $element.attr('data-cache').split(",")[0];
        var searchTerm = $element.attr('data-cache').split(",")[1];
        $element.find(".gt_search-results").text(searchCount);
        $element.find(".gt_search-terms").text(searchTerm);
      }
    }
    /* init block script */
    addInteraction();
    cacheDev();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_searchTitle()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_searchTitle" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_messageOfResultsText = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_messageOfResultsText";
  var id = "VvcHghYH0YTQh6V_messageOfResultsText";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "VvcHghYH0YTQh6V_messageOfResultsText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "VvcHghYH0YTQh6V_messageOfResultsText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_messageOfResultsText()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_messageOfResultsText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_searchProducts = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_searchProducts";
  var id = "VvcHghYH0YTQh6V_searchProducts";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = `{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}`;
    const animation = `{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}`;
    const animationHover = `{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}`;
    const searchSuggestions = "false" == "true";
    const liveSearch = "true" == "true";
    const defaultImage = "true" == "true";
    var currentAjaxRequest = null;
    var ajaxRequestCategory = null;
    var ajaxRequestFilter = null;
    var popularSearches = $element.find(".gt_search-box .gt_popular-searches");
    var popularSearchesTypeIcon = $element.find(".gt_atom-nav-search .gt_popular-searches");
    var $navSearch = $element.find(".gt_atom-nav-search");
    var form = $element.find(".gt_search-box .gt_search-form");
    var searchResultsWrapper = form.find(".gt_search-results--wrapper");
    var searchResultsWrapperTypeIcon = $navSearch.find(".gt_search-results--wrapper");
    var resultsList = form.find(".gt_search-results");
    var resultsListTypeIcon = searchResultsWrapperTypeIcon.find(".gt_search-results");
    var arrowResultsList = searchResultsWrapper.find(".gt_search-results--arrow");
    var arrowResultsListTypeIcon = searchResultsWrapperTypeIcon.find(".gt_search-results--arrow");
    var uploadDefaultImage = "https://d3dfaj4bukarbm.cloudfront.net/staging/images/admin/e5516169-55a5-4f84-97a6-e7925fa834b3.png";
    var titleFilterDefault = "All categories";
    var productTypeFilter = titleFilterDefault;
    var delayShowResults = null;
    var dataSearchResults = null;
    var loading = form.find(".gt_skeleton-loading");
    var loadingTypeIcon = $navSearch.find(".gt_skeleton-loading");
    var filterList = $element.find(".gt_filter-option--list");
    var filterOption = filterList.find(".gt_filter-option");
    var filterOpttionDefault = filterList.find(".gt_filter-option-default");
    var filterOptionActive = $element.find(".gt_search-bar__filter .gt_search-bar__filter-active");
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_searchProducts",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        };
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover",
          };
        }
        window.SOLID.library.animation(settings);
      }
    }

    function toggleInputSearchOfIcon() {
      $element
        .find(".gt_main-icon-search")
        .off("click.openMenuVvcHghYH0YTQh6V_searchProducts")
        .on("click.openMenuVvcHghYH0YTQh6V_searchProducts", function() {
          $navSearch.slideToggle("show-search");
        });

      $element
        .find(".gt_close")
        .off("click.closeMenuVvcHghYH0YTQh6V_searchProducts")
        .on("click.closeMenuVvcHghYH0YTQh6V_searchProducts", function() {
          $navSearch.slideToggle("show-search");
        });

      $(window)
        .off("scroll.openSearchVvcHghYH0YTQh6V_searchProducts")
        .on("scroll.openSearchVvcHghYH0YTQh6V_searchProducts", function(event) {
          var $target = $(event.target);
          var $parent = $target.closest(".gt_atom-nav-search");
          var $show = $target.closest(".gt_main-icon-search");
          if ($parent.length == 0 && $show.length == 0) {
            $navSearch.slideUp("show-search");
          }
        });
    }

    function renderPopularSearch() {
      if (searchSuggestions) {
        renderPopularSearchOfBoxSearch();
        renderPopularSearchOfIconSearch();
        hidePopularSearchOfBoxSearch();
        hidePopularSearchOfIconSearch();
      }
    }

    function renderPopularSearchOfBoxSearch() {
      $element
        .find(".gt_inputGroup-des .gt_nav-search-input-des")
        .click(function() {
          if (!$(this).val()) {
            popularSearches.show();
          }
        });
    }

    function renderPopularSearchOfIconSearch() {
      $element
        .find(".gt_atom-nav-search-container .gt_atom-nav-search-input")
        .click(function() {
          if (!$(this).val()) {
            popularSearchesTypeIcon.show();
          }
        });
    }

    function hidePopularSearchOfBoxSearch() {
      $("body").on("click", function(e) {
        if (
          !$(e.target).hasClass("gt_nav-search-input-des") &&
          $(e.target).parents(".gt_popular-searches").length === 0
        ) {
          popularSearches.hide();
        }
      });
    }

    function hidePopularSearchOfIconSearch() {
      $("body").on("click", function(e) {
        if (
          !$(e.target).hasClass("gt_atom-nav-search-input") &&
          $(e.target).parents(".gt_popular-searches").length === 0
        ) {
          popularSearchesTypeIcon.hide();
        }
      });
    }

    function selectFilter() {
      $element.find(".gt_search-bar__filter-label").on("click", function() {
        $(this).parent().find(".gt_filter-option--list").toggle();
        $(this).find(".gt_icon-arrow").toggleClass("open");
      });
      filterOption.on("click", function() {
        filterOption.removeClass("selected");
        $(this).addClass("selected");
        filterOpttionDefault.removeClass("gt_filter-option-default");
        filterOptionActive.html($(this).html());
        filterList.toggle();
        $element
          .find(".gt_search-bar__filter-label .gt_icon-arrow")
          .removeClass("open");
        productTypeFilter = getProductTypeWhenFilter($(this).html());
        if (
          $element.find(".gt_inputGroup-des .gt_nav-search-input-des").val()
        ) {
          renderLiveSearchWhenSelectFilter();
        }
      });
    }

    function getProductTypeWhenFilter(productType) {
      if (productType.includes("&amp;")) {
        productTypeFilter = productType.replace("&amp;", "");
      } else {
        productTypeFilter = productType;
      }
      return productTypeFilter;
    }

    function renderLiveSearchWhenSelectFilter() {
      if (liveSearch) {
        $element.find('form[action="/search"]').each(function() {
          var input = $(this).find('input[name="q"]');
          var term = input.val();
          var searchURL = getSearchUrlByProducType(term);
          searchResultsWrapper.show();
          searchResultsWrapperTypeIcon.show();
          showLoading();
          doLiveSearch(term, searchURL);
        });
      }
    }

    function hideListFilterWhenClickOut() {
      $("body").on("click", function(e) {
        if (
          !$(e.target).hasClass("gt_search-bar__filter-label") &&
          !$(e.target).hasClass("gt_search-bar__filter-active") &&
          !$(e.target).hasClass("gt_icon-arrow")
        ) {
          filterList.hide();
        }
      });
    }

    function renderLiveSearchWhenInputChange() {
      if (liveSearch) {
        $element.find('form[action="/search"]').each(function() {
          var input = $(this).find('input[name="q"]');
          input.off("input").on("input", function() {
            var term = $(this).val();
            var searchURL = getSearchUrlByProducType(term);
            if (!term) {
              clearTimeout(delayShowResults);
              delayShowResults = setTimeout(() => {
                searchResultsWrapper.hide();
                popularSearches.show();
                searchResultsWrapperTypeIcon.hide();
                popularSearchesTypeIcon.show();
              }, 300)
            } else {
              clearTimeout(delayShowResults);
              showLoading();
              delayShowResults = setTimeout(() => {
                popularSearches.hide();
                popularSearchesTypeIcon.hide();
                searchResultsWrapper.show();
                searchResultsWrapperTypeIcon.show();
                doLiveSearch(term, searchURL);
              }, 200);
            }
          });
        });
      }
    }

    function onClickInputSearch() {
      if (liveSearch) {
        $element
          .find(".gt_inputGroup-des .gt_nav-search-input-des")
          .click(function() {
            if ($(this).val() && dataSearchResults != null) {
              arrowResultsList.show();
              resultsList.show();
            }
          });
        $element
          .find(".gt_atom-nav-search-container .gt_atom-nav-search-input")
          .click(function() {
            if ($(this).val() && dataSearchResults != null) {
              arrowResultsListTypeIcon.show();
              resultsListTypeIcon.show();
            }
          });
      }
    }

    function getSearchUrlByProducType(term) {
      let searchURL = "";
      if (productTypeFilter == titleFilterDefault) {
        searchURL =
          "/search?type=product,article,page&q=" +
          term +
          "&options[prefix]=last";
      } else {
        searchURL =
          "/search?type=product&q=product_type:" +
          productTypeFilter +
          "+AND+" +
          term +
          "&options[prefix]=last";
      }
      return searchURL;
    }
    async function doLiveSearch(term, searchURL) {
      var ajaxData = {
        resources: {
          type: "product,collection,article,page",
          limit: 4,
          options: {
            prefix: "last",
            fields: "author,body,product_type,tag,title,variants.barcode,variants.sku,variants.title,vendor",
          },
        },
      };
      dataSearchResults = await getDataSearchResults(term, ajaxData);
      resultsList.empty();
      resultsListTypeIcon.empty();
      if (
        dataSearchResults.products.length === 0 &&
        dataSearchResults.collections.length === 0 &&
        dataSearchResults.articles.length === 0 &&
        dataSearchResults.pages.length === 0
      ) {
        resultsList.append(
          searchResultsWrapper.find(".gt_search-no-result").html()
        );
        resultsListTypeIcon.append(
          searchResultsWrapperTypeIcon.find(".gt_search-no-result").html()
        );
        searchResultsWrapper.fadeIn(200);
        searchResultsWrapperTypeIcon.fadeIn(200);
      } else {
        $.each(dataSearchResults.products, function(index, item) {
          var imgProductUrl = "";
          if (item.featured_image.url != null) {
            imgProductUrl = item.featured_image.url;
          } else {
            imgProductUrl = uploadDefaultImage;
          }
          var link = $('<a class="gt_predictive-search-item__link"></a>').attr(
            "href",
            item.url
          );
          if (
            (!defaultImage && item.featured_image.url != null) ||
            (defaultImage && item.featured_image.url != null) ||
            (defaultImage && item.featured_image.url == null)
          ) {
            link.append(
              '<div class="gt_predictive-search__column gt_predictive-search__column--image"><img src="' +
              imgProductUrl +
              '" /></div>'
            );
          }
          link.append(
            '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
            item.title +
            "</div>" +
            "<div>" +
            '<span class="gt_predictive-search-item__price">' +
            formatMoneyPlugin(item.price * 100) +
            "</span>" +
            (item.compare_at_price_min <= 0 ?
              "" :
              '<span class="gt_predictive-search-item__compare--price">' +
              formatMoneyPlugin(item.compare_at_price_min * 100) +
              "</span>") +
            "</div>" +
            "</div>"
          );

          var linkTypeIcon = $(
            '<a class="gt_predictive-search-item__link gt_predictive-search-item--mobile"></a>'
          ).attr("href", item.url);
          if (
            (!defaultImage && item.featured_image.url != null) ||
            (defaultImage && item.featured_image.url != null) ||
            (defaultImage && item.featured_image.url == null)
          ) {
            linkTypeIcon.append(
              '<div class="gt_predictive-search__column gt_predictive-search__column--image"><img src="' +
              imgProductUrl +
              '" /></div>'
            );
          }
          linkTypeIcon.append(
            '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
            item.title +
            "</div>" +
            "<div>" +
            '<span class="gt_predictive-search-item__price">' +
            formatMoneyPlugin(item.price * 100) +
            "</span>" +
            (item.compare_at_price_min <= 0 ?
              "" :
              '<span class="gt_predictive-search-item__compare--price">' +
              formatMoneyPlugin(item.compare_at_price_min * 100) +
              "</span>") +
            "</div>" +
            "</div>"
          );

          link.wrap(
            '<div class="gt_pred-item gt_pred-item-product" data-index="' +
            index +
            '"></div>'
          );
          linkTypeIcon.wrap(
            '<div class="gt_pred-item gt_pred-item-product" data-index="' +
            index +
            '"></div>'
          );
          resultsList.append(link.parent());
          resultsListTypeIcon.append(linkTypeIcon.parent());
        });

        $.each(dataSearchResults.collections, function(index, item) {
          var imgCollectionUrl = "";
          if (item.featured_image.url != null) {
            imgCollectionUrl = item.featured_image.url;
          } else {
            imgCollectionUrl = uploadDefaultImage;
          }
          var collectionLink = $(
            '<a class="gt_predictive-search-item__link gt_predictive-search-item__collection-link"></a>'
          ).attr("href", item.url);

          if (
            (!defaultImage && item.featured_image.url != null) ||
            (defaultImage && item.featured_image.url != null) ||
            (defaultImage && item.featured_image.url == null)
          ) {
            collectionLink.append(
              '<div class="gt_predictive-search__column gt_predictive-search__column--image"><img src="' +
              imgCollectionUrl +
              '" /></div>'
            );
          }
          collectionLink.append(
            '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
            item.title +
            "</div>" +
            "</div>"
          );
          var collectionLinkTypeIcon = $(
            '<a class="gt_predictive-search-item__link gt_predictive-search-item__collection-link  gt_predictive-search-item__collection-link--mobile"></a>'
          ).attr("href", item.url);

          if (
            (!defaultImage && item.featured_image.url != null) ||
            (defaultImage && item.featured_image.url != null) ||
            (defaultImage && item.featured_image.url == null)
          ) {
            collectionLinkTypeIcon.append(
              '<div class="gt_predictive-search__column gt_predictive-search__column--image"><img src="' +
              imgCollectionUrl +
              '" /></div>'
            );
          }
          collectionLinkTypeIcon.append(
            '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
            item.title +
            "</div>" +
            "</div>"
          );
          collectionLink.wrap(
            '<div class="gt_pred-item gt_pred-item-collection" data-index="' +
            index +
            '"></div>'
          );
          collectionLinkTypeIcon.wrap(
            '<div class="gt_pred-item gt_pred-item-collection" data-index="' +
            index +
            '"></div>'
          );
          resultsList.append(collectionLink.parent());
          resultsListTypeIcon.append(collectionLinkTypeIcon.parent());
        });

        $.each(dataSearchResults.articles, function(index, item) {
          var imgArticleUrl = "";
          if (item.featured_image.url != null) {
            imgArticleUrl = item.featured_image.url;
          } else {
            imgArticleUrl = uploadDefaultImage;
          }
          var articleLink = $(
            '<a class="gt_predictive-search-item__link gt_predictive-search-item__article-link"></a>'
          ).attr("href", item.url);
          if (
            (!defaultImage && item.featured_image.url != null) ||
            (defaultImage && item.featured_image.url != null) ||
            (defaultImage && item.featured_image.url == null)
          ) {
            articleLink.append(
              '<div class="gt_predictive-search__column gt_predictive-search__column--image"><img src="' +
              imgArticleUrl +
              '" /></div>'
            );
          }
          articleLink.append(
            '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
            item.title +
            "</div>" +
            "</div>"
          );

          var articleLinkTypeIcon = $(
            '<a class="gt_predictive-search-item__link gt_predictive-search-item__article-link  gt_predictive-search-item__article-link--mobile"></a>'
          ).attr("href", item.url);
          if (
            (!defaultImage && item.featured_image.url != null) ||
            (defaultImage && item.featured_image.url != null) ||
            (defaultImage && item.featured_image.url == null)
          ) {
            articleLinkTypeIcon.append(
              '<div class="gt_predictive-search__column gt_predictive-search__column--image"><img src="' +
              imgArticleUrl +
              '" /></div>'
            );
          }
          articleLinkTypeIcon.append(
            '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
            item.title +
            "</div>" +
            "</div>"
          );

          articleLink.wrap(
            '<div class="gt_pred-item gt_pred-item-article" data-index="' +
            index +
            '"></div>'
          );
          articleLinkTypeIcon.wrap(
            '<div class="gt_pred-item gt_pred-item-article" data-index="' +
            index +
            '"></div>'
          );
          resultsList.append(articleLink.parent());
          resultsListTypeIcon.append(articleLinkTypeIcon.parent());
        });

        $.each(dataSearchResults.pages, function(index, item) {
          var pageLink = $(
            '<a class="gt_predictive-search-item__link gt_predictive-search-item__page-link"></a>'
          ).attr("href", item.url);
          pageLink.append(
            '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
            item.title +
            "</div>" +
            "</div>"
          );

          var pageLinkTypeIcon = $(
            '<a class="gt_predictive-search-item__link gt_predictive-search-item__page-link gt_predictive-search-item__page-link--mobile"></a>'
          ).attr("href", item.url);
          pageLinkTypeIcon.append(
            '<div class="gt_predictive-search__column gt_predictive-search__column--content"><div class="gt_predictive-search-item__title">' +
            item.title +
            "</div>" +
            "</div>"
          );
          pageLink.wrap(
            '<div class="gt_pred-item gt_pred-item-page" data-index="' +
            index +
            '"></div>'
          );
          pageLinkTypeIcon.wrap(
            '<div class="gt_pred-item gt_pred-item-page" data-index="' +
            index +
            '"></div>'
          );
          resultsList.append(pageLink.parent());
          resultsListTypeIcon.append(pageLinkTypeIcon.parent());
        });

        var titleProduct = searchResultsWrapper.find(".gt_title_list-products");
        var titleProductTypeIcon = searchResultsWrapperTypeIcon.find(
          ".gt_title_list-products"
        );
        titleProduct
          .clone()
          .insertBefore(".gt_pred-item-product[data-index='0']");
        titleProductTypeIcon
          .clone()
          .insertBefore(".gt_pred-item-product[data-index='0']");

        var titleCollection = searchResultsWrapper.find(
          ".gt_title_list-collections"
        );
        var titleCollectionTypeIcon = searchResultsWrapperTypeIcon.find(
          ".gt_title_list-collections"
        );
        titleCollection
          .clone()
          .insertBefore(".gt_pred-item-collection[data-index='0']");
        titleCollectionTypeIcon
          .clone()
          .insertBefore(".gt_pred-item-collection[data-index='0']");

        var titleArticle = searchResultsWrapper.find(".gt_title_list-articles");
        var titleArticleTypeIcon = searchResultsWrapperTypeIcon.find(
          ".gt_title_list-articles"
        );
        titleArticle
          .clone()
          .insertBefore(".gt_pred-item-article[data-index='0']");
        titleArticleTypeIcon
          .clone()
          .insertBefore(".gt_pred-item-article[data-index='0']");

        var titlePage = searchResultsWrapper.find(".gt_title_list-pages");
        var titlePageTypeIcon = searchResultsWrapperTypeIcon.find(
          ".gt_title_list-pages"
        );
        titlePage.clone().insertBefore(".gt_pred-item-page[data-index='0']");
        titlePageTypeIcon
          .clone()
          .insertBefore(".gt_pred-item-page[data-index='0']");

        var txtButton = searchResultsWrapper
          .find(".gt_search-has-results")
          .html();
        var txtButtonTypeIcon = searchResultsWrapperTypeIcon
          .find(".gt_search-has-results")
          .html();
        resultsList.append(
          '<a class="gt_search-results--button" href="' +
          searchURL +
          '"> ' +
          txtButton +
          '<svg focusable="false" viewBox="0 0 8 12" role="presentation"><path stroke="currentColor" stroke-width="2" d="M2 2l4 4-4 4" fill="none" stroke-linecap="square"></path></svg>' +
          "</a>"
        );
        resultsListTypeIcon.append(
          '<a class="gt_search-results--button" href="' +
          searchURL +
          '"> ' +
          txtButtonTypeIcon +
          '<svg focusable="false" viewBox="0 0 8 12" role="presentation"><path stroke="currentColor" stroke-width="2" d="M2 2l4 4-4 4" fill="none" stroke-linecap="square"></path></svg>' +
          "</a>"
        );
        searchResultsWrapper.fadeIn(200);
        searchResultsWrapperTypeIcon.fadeIn(200);
      }
    }
    async function getDataSearchResults(term, ajaxData) {
      var dataAllCategories = await callApiSearchAllCategories(term, ajaxData);
      let productResult = "";
      if (productTypeFilter == titleFilterDefault) {
        productResult = dataAllCategories.resources.results.products;
      } else {
        var dataFilter = await callApiSearchByFilter(term, ajaxData);
        if (dataFilter.resources.results.products) {
          productResult = dataFilter.resources.results.products;
        } else {
          productResult = dataAllCategories.resources.results.products;
        }
      }
      hideLoading();
      var dataResults = {
        products: productResult,
        collections: dataAllCategories.resources.results.collections,
        articles: dataAllCategories.resources.results.articles,
        pages: dataAllCategories.resources.results.pages,
      };
      return dataResults;
    }
    async function callApiSearchAllCategories(term, ajaxData) {
      const dataAllCategories = await $.getJSON({
        url: "/search/suggest.json?q=" + term,
        type: "GET",
        data: ajaxData,
      });
      return dataAllCategories;
    }
    async function callApiSearchByFilter(term, ajaxData) {
      const dataFilter = await $.getJSON({
        url: "/search/suggest.json?q=product_type:" +
          productTypeFilter +
          "+AND+" +
          term,
        type: "GET",
        data: ajaxData,
      });
      return dataFilter;
    }

    function hideLiveSearchWhenClickOut() {
      $("body").on("click", function(e) {
        if (
          !$(e.target).hasClass("gt_nav-search-input-des") &&
          $(e.target).parents(".gt_search-results--wrapper").length === 0
        ) {
          resultsList.hide();
          arrowResultsList.hide();
        }
        if (
          !$(e.target).hasClass("gt_atom-nav-search-input") &&
          $(e.target).parents(".gt_popular-searches").length === 0
        ) {
          resultsListTypeIcon.hide();
          arrowResultsListTypeIcon.hide();
        }
      });
    }
    function showLoading() {
      arrowResultsList.show();
      arrowResultsListTypeIcon.show();
      resultsList.hide();
      resultsListTypeIcon.hide();
      loading.show();
      loadingTypeIcon.show();
    }
    function hideLoading() {
      arrowResultsList.show();
      arrowResultsListTypeIcon.show();
      resultsList.show();
      resultsListTypeIcon.show();
      loading.hide();
      loadingTypeIcon.hide();
    }
    function submitFilterSearchForm() {
      $element.find(".gt_search-box .gt_search-form").submit(function(e) {
        if (productTypeFilter != titleFilterDefault) {
          e.preventDefault();
          var term = $element
            .find(".gt_inputGroup-des .gt_nav-search-input-des")
            .val();
          window.location.href =
            "/search?type=product&q=product_type:" +
            productTypeFilter +
            "+AND+" +
            term +
            "&options[prefix]=last";
        }
      });
    }
    function formatMoneyPlugin(price, notApplyRoundDecimal) {
      const dataCurrency = window.store.get("dataCurrency");
      const format = window.__GemSettings.money;
      if (dataCurrency) {
        price = window.Shopify.gemFormatMoney(
          price,
          dataCurrency.currency,
          dataCurrency.data,
          null,
          notApplyRoundDecimal
        );
      } else {
        price = window.Shopify.formatMoney(price, format);
      }

      return price;
    }
    /* init block script */
    addInteraction();
    toggleInputSearchOfIcon();
    renderPopularSearch();
    selectFilter();
    hideListFilterWhenClickOut();
    renderLiveSearchWhenInputChange();
    onClickInputSearch();
    hideLiveSearchWhenClickOut();
    submitFilterSearchForm();
    /* store subscribe block script */
    function destroy() {}
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_searchProducts()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_searchProducts" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_searchSuggestions = function() {
          
        }
        funcESAtomVvcHghYH0YTQh6V_searchSuggestions()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_searchSuggestions" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_blogItem = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_blogItem";
  var id = "VvcHghYH0YTQh6V_blogItem";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_blogItem",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_blogItem()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_blogItem" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_itemImageSmall = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_itemImageSmall";
  var id = "VvcHghYH0YTQh6V_itemImageSmall";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var $elementAtom = $(".gt_atom-VvcHghYH0YTQh6V_itemImageSmall");
      var widthImage = $elementAtom.find("img").width();
      var heightImage = $elementAtom.find("img").height();
      $elementAtom.find("img").attr('width', widthImage);
      $elementAtom.find("img").attr('height', heightImage);
    }
    /* init block script */
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_itemImageSmall()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_itemImageSmall" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_itemTitleSmall = function() {
          
        }
        funcESAtomVvcHghYH0YTQh6V_itemTitleSmall()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_itemTitleSmall" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_itemShortContentSmall = function() {
          
        }
        funcESAtomVvcHghYH0YTQh6V_itemShortContentSmall()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_itemShortContentSmall" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_blogMeta = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_blogMeta";
  var id = "VvcHghYH0YTQh6V_blogMeta";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_blogMeta",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_blogMeta()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_blogMeta" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_iconAuthor = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_iconAuthor";
  var id = "VvcHghYH0YTQh6V_iconAuthor";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_iconAuthor",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_iconAuthor()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_iconAuthor" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_itemAuthor = function() {
          
        }
        funcESAtomVvcHghYH0YTQh6V_itemAuthor()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_itemAuthor" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_iconDate = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_iconDate";
  var id = "VvcHghYH0YTQh6V_iconDate";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_iconDate",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_iconDate()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_iconDate" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_itemDate = function() {
          
        }
        funcESAtomVvcHghYH0YTQh6V_itemDate()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_itemDate" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_iconCountComment = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_iconCountComment";
  var id = "VvcHghYH0YTQh6V_iconCountComment";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_iconCountComment",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_iconCountComment()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_iconCountComment" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_itemCountComment = function() {
          
        }
        funcESAtomVvcHghYH0YTQh6V_itemCountComment()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_itemCountComment" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_pageItem = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_pageItem";
  var id = "VvcHghYH0YTQh6V_pageItem";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_pageItem",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_pageItem()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_pageItem" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_pageItemTitle = function() {
          
        }
        funcESAtomVvcHghYH0YTQh6V_pageItemTitle()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_pageItemTitle" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_boxPagination = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_boxPagination";
  var id = "VvcHghYH0YTQh6V_boxPagination";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_boxPagination",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_boxPagination()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_boxPagination" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_columnCountProductOfPage = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_columnCountProductOfPage";
  var id = "VvcHghYH0YTQh6V_columnCountProductOfPage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_columnCountProductOfPage",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_columnCountProductOfPage()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_columnCountProductOfPage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_productCountInSearchOfPage = function() {
          
        }
        funcESAtomVvcHghYH0YTQh6V_productCountInSearchOfPage()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_productCountInSearchOfPage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_columnPaginationProduct = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_columnPaginationProduct";
  var id = "VvcHghYH0YTQh6V_columnPaginationProduct";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_columnPaginationProduct",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_columnPaginationProduct()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_columnPaginationProduct" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_pagination = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_pagination";
  var id = "VvcHghYH0YTQh6V_pagination";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (scrollIntoViewActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_pagination",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          };
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    function destroy() {}
    /* events block script */
    /* destroy block script */
    store.subscribe("component-" + id + "-destroy", function() {
      destroy();
      store.unsubscribe("component-" + id + "-destroy");
    });
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_pagination()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_pagination" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_boxEmptyBottom = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_boxEmptyBottom";
  var id = "VvcHghYH0YTQh6V_boxEmptyBottom";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_boxEmptyBottom",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_boxEmptyBottom()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_boxEmptyBottom" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_boxContentEmpty = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_boxContentEmpty";
  var id = "VvcHghYH0YTQh6V_boxContentEmpty";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_boxContentEmpty",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_boxContentEmpty()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_boxContentEmpty" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_headingEmpty = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_headingEmpty";
  var id = "VvcHghYH0YTQh6V_headingEmpty";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "VvcHghYH0YTQh6V_headingEmpty",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "VvcHghYH0YTQh6V_headingEmpty",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_headingEmpty()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_headingEmpty" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_textEmpty = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_textEmpty";
  var id = "VvcHghYH0YTQh6V_textEmpty";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "VvcHghYH0YTQh6V_textEmpty",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "VvcHghYH0YTQh6V_textEmpty",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_textEmpty()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_textEmpty" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_buttonLinkEmpty = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_buttonLinkEmpty";
  var id = "VvcHghYH0YTQh6V_buttonLinkEmpty";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const isProduction = "production" === "production";
    let actions = `[]`
    const isCustomActions = "false" == "true"
    const openNewTab = "false" == "true"
    const linkButton = "/collections/all";
    const activeButtonFixContent = "false" === "true";
    const buttonFixContent = "Buy [!quantity!] items"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_buttonLinkEmpty",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }

    function addAction() {
      if (!isCustomActions) {
        if (linkButton != "") {
          actionsObj = [{
            "id": 1,
            "event": "click",
            "control": {
              "id": "1",
              "attribute": "1",
              "title": "Pick Link",
              "desc": "",
              "reference": "html",
              "type": "picklink",
              "value": linkButton,
              "newTab": openNewTab
            }
          }]
        } else {
          actionsObj = []
        }
        actions = JSON.stringify(actionsObj);
      }
      if (isProduction) {
        $element.customEvent(JSON.parse(actions), id + "_" + indexEl);
        /*Listenifisbuttonaddtocard*/

        window.SOLID.store.subscribe("loading-buy-now-VvcHghYH0YTQh6V_buttonLinkEmpty" + "_" + indexEl, function(isDisplay) {
          const $loadingEl = $element.find(".atom-button-loading-circle-loader");
          const $textEl = $element.find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              window.SOLID.store.dispatch("loading-buy-now-VvcHghYH0YTQh6V_buttonLinkEmpty" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                window.SOLID.store.dispatch("loading-buy-now-VvcHghYH0YTQh6V_buttonLinkEmpty" + "_" + indexEl, "");
              }, 3000);
            }
          }
        });
      }
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    addAction();
    if (activeButtonFixContent) {
      initFixContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_buttonLinkEmpty()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_buttonLinkEmpty" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_boxProductList = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_boxProductList";
  var id = "VvcHghYH0YTQh6V_boxProductList";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_boxProductList",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_boxProductList()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_boxProductList" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_boxProduct = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_boxProduct";
  var id = "VvcHghYH0YTQh6V_boxProduct";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_boxProduct",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_boxProduct()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_boxProduct" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomVvcHghYH0YTQh6V_productListItems = function() {
          (function() {
  var elementClassName = ".gt_atom-VvcHghYH0YTQh6V_productListItems";
  var id = "VvcHghYH0YTQh6V_productListItems";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "VvcHghYH0YTQh6V_productListItems",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomVvcHghYH0YTQh6V_productListItems()
      } catch(e) {
        console.error("Error ESAtom Id: VvcHghYH0YTQh6V_productListItems" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSection11958019 = function() {
          
        }
        funcESSection11958019()
      } catch(e) {
        console.error("Error ESSection Id: 11958019" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSection5U6Q6AizfHdSwJ9 = function() {
          
        }
        funcESSection5U6Q6AizfHdSwJ9()
      } catch(e) {
        console.error("Error ESSection Id: 5U6Q6AizfHdSwJ9" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectionfJPaj0tjjEr6Jyo = function() {
          
        }
        funcESSectionfJPaj0tjjEr6Jyo()
      } catch(e) {
        console.error("Error ESSection Id: fJPaj0tjjEr6Jyo" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSection11957905 = function() {
          
        }
        funcESSection11957905()
      } catch(e) {
        console.error("Error ESSection Id: 11957905" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectionNZYtn6rM2akOKPo = function() {
          
        }
        funcESSectionNZYtn6rM2akOKPo()
      } catch(e) {
        console.error("Error ESSection Id: NZYtn6rM2akOKPo" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_container = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_container";
  var id = "NZYtn6rM2akOKPo_container";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "NZYtn6rM2akOKPo_container",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_container()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_container" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_boxProduct = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_boxProduct";
  var id = "NZYtn6rM2akOKPo_boxProduct";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "NZYtn6rM2akOKPo_boxProduct",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_boxProduct()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_boxProduct" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productItemContainer = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productItemContainer";
  var id = "NZYtn6rM2akOKPo_productItemContainer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "true" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"zoom-in-up"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "NZYtn6rM2akOKPo_productItemContainer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }

    function checkRemoteDefaultInput() {
      if (isExistAtomVariant()) {
        var $inputVariantDefault = $element.find(".gt_variant-input--default");
        if ($inputVariantDefault && $inputVariantDefault.length) {
          $($inputVariantDefault[0]).remove()
        }
      }

      if (isExistAtomQuantity()) {
        var $inputQuantityDefault = $element.find(".gt_quantity-input--default");
        if ($inputQuantityDefault && $inputQuantityDefault.length) {
          $($inputQuantityDefault[0]).remove()
        }
      }
    }

    function isExistAtomVariant() {
      var $atomProduct = $element.find(".gt_variant--input")
      if ($atomProduct && $atomProduct.length) {
        return true
      }
      return false
    }

    function isExistAtomQuantity() {
      var $atomQuantity = $element.find(".gt_quantity--input")
      if ($atomQuantity && $atomQuantity.length) {
        return true
      }
      return false
    }
    /* init block script */
    addInteraction();
    checkRemoteDefaultInput();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target, indexEl);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productItemContainer()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productItemContainer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_specialText = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_specialText";
  var id = "NZYtn6rM2akOKPo_specialText";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "NZYtn6rM2akOKPo_specialText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "NZYtn6rM2akOKPo_specialText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_specialText()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_specialText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_boxImage = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_boxImage";
  var id = "NZYtn6rM2akOKPo_boxImage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "NZYtn6rM2akOKPo_boxImage",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_boxImage()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_boxImage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productImage = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productImage";
  var id = "NZYtn6rM2akOKPo_productImage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    /* store get state block script */
    /* methods block script */
    function initLibFeatureImage() {
      $element.gtProductFeatureImage({
        classFeatureImage: ".gt_product-image--feature",
        classImages: null,
        carousel: null,
        owlCarousel: null,
      });
    }

    function initLibProductZoom() {
      $element.find(".gt_product-image--feature").gfProductZoomImage({
        classHoverItem: ".gt_product-img-box",
        scale: "1.5",
        classSection: ".gt_atom-NZYtn6rM2akOKPo_productImage",
      });
    }

    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }
    /* init block script */
    initLibFeatureImage();
    initLibProductZoom();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /* global block script */
  window.SOLID.store.subscribe("runjs" + "_atom_" + id, () => {
    $elements = document.querySelectorAll(elementClassName);
    main();
  });
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productImage()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productImage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productTagSale = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productTagSale";
  var id = "NZYtn6rM2akOKPo_productTagSale";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const roundPercent = Number("0");
    const removeZeros = "true" === "true";
    /* store get state block script */
    /* methods block script */
    /* init block script */
    window.SOLID.library.gtProductSaveV2({
      $element: $element,
      settings: {
        classTextPercent: ".gt_product-tag-sale--value--percent",
        classTextNumber: ".gt_product-tag-sale--value--number",
        dataFormat: "- [!Profit!]",
        dataFormatKey: "[!Profit!]",
        customCurrencyFormating: "shortPrefix",
        roundPercent: roundPercent,
        roundNoZeroes: removeZeros
      }
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productTagSale()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productTagSale" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productTitle = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productTitle";
  var id = "NZYtn6rM2akOKPo_productTitle";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "true" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","name":"flash","order":"sequence"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "NZYtn6rM2akOKPo_productTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "NZYtn6rM2akOKPo_productTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productTitle()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productTitle" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_boxPrice = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_boxPrice";
  var id = "NZYtn6rM2akOKPo_boxPrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "NZYtn6rM2akOKPo_boxPrice",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_boxPrice()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_boxPrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productPrice = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productPrice";
  var id = "NZYtn6rM2akOKPo_productPrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const syncQuantityandPrice = "true" == "true";
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!price!]"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "NZYtn6rM2akOKPo_productPrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "NZYtn6rM2akOKPo_productPrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-price-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-price-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    };
    $element.gtProductPrice({
      classCurrentPrice: ".gt_product-price--number",
      syncQuantityPrice: syncQuantityandPrice,
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productPrice()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productPrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productComparePrice = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productComparePrice";
  var id = "NZYtn6rM2akOKPo_productComparePrice";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const syncQuantityandPrice = "true" == "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "NZYtn6rM2akOKPo_productComparePrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "NZYtn6rM2akOKPo_productComparePrice",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    $element.gtProductPrice({
      classComparePrice: ".gt_product-price--compare",
      classCurrentPrice: ".gt_product-price--number",
      syncQuantityComparePrice: syncQuantityandPrice,
      replacePriceForCurrentPrice: false,
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productComparePrice()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productComparePrice" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productInventory = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productInventory";
  var id = "NZYtn6rM2akOKPo_productInventory";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var autoInventory = "auto" == "auto";
    var manualInventory = "auto" == "manual"
    var remainingQuantity = "200";
    var manualQuantity = "100";
    var $currentInventoryQty = $element.find(".gt_product-inventory--qty");
    var $progressBar = $element.find(".gt_inventory-progress .gt_bar");
    var $firstBar = $element.find(`.gt_bar[data-index="1"]`);
    var $lastBar = $element.find(`.gt_bar[data-index="10"]`)
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "NZYtn6rM2akOKPo_productInventory",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "NZYtn6rM2akOKPo_productInventory",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function reRenderInventory() {
      const productJson = getProductJson();
      if (productJson) {
        const variant = window.SOLID.store.getState("variant" + productJson.id);
        var $inventoryQty = $element.find(`.gt_variant-inventory--qty[data-variant-id="${variant.id}"]`).text();
        renderInventory($inventoryQty);
        renderProgressBar($inventoryQty);
      }
    }

    function listenVariantChange() {
      const productJson = getProductJson();
      if (productJson) {
        window.SOLID.store.subscribe("variant" + productJson.id, (variant) => {
          var $inventoryQty = $element.find(`.gt_variant-inventory--qty[data-variant-id="${variant.id}"]`).text();
          renderInventory($inventoryQty);
          renderProgressBar($inventoryQty);
        })
      }
    }

    function getProductJson() {
      var $productJson = $element.closest("[keyword='product'], [data-keyword='product']").find(".ProductJson").text();
      let productJson;
      try {
        productJson = JSON.parse($productJson);
      } catch (e) {
        console.log(e);
      }
      return productJson;
    }

    function renderInventory($inventoryQty) {
      if (autoInventory) {
        renderInventoryByAuto($inventoryQty);
      } else {
        renderInventoryByManual($inventoryQty);
      }
    }

    function renderInventoryByAuto($inventoryQty) {
      if (parseInt($inventoryQty) > 0) {
        $element.removeAttr("style");
        $currentInventoryQty.html($inventoryQty);
      } else {
        $element.css("display", "none");
      }
    }

    function renderInventoryByManual($inventoryQty) {
      if (parseInt($inventoryQty) >= remainingQuantity) {
        $element.css("display", "none");
      } else {
        $element.removeAttr("style");
        renderInventoryByAuto($inventoryQty);
      }
    }

    function renderProgressBar($inventoryQty) {
      var $progressPercentage = (parseInt($inventoryQty) / manualQuantity) * 100;
      if (parseInt($inventoryQty) >= manualQuantity) {
        $progressBar.addClass("gt_bar--active");
      }
      if ($progressPercentage <= 10) {
        $firstBar.addClass("gt_bar--active");
        for (var i = 2; i < 11; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).removeClass("gt_bar--active");
        }
      }
      if ($progressPercentage > 10 && $progressPercentage <= 20) {
        for (var i = 1; i < 3; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).addClass("gt_bar--active");
        }
        for (var i = 3; i < 11; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).removeClass("gt_bar--active");
        }
      }
      if ($progressPercentage > 20 && $progressPercentage <= 30) {
        for (var i = 1; i < 4; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).addClass("gt_bar--active");
        }
        for (var i = 4; i < 11; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).removeClass("gt_bar--active");
        }
      }
      if ($progressPercentage > 30 && $progressPercentage <= 40) {
        for (var i = 1; i < 5; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).addClass("gt_bar--active");
        }
        for (var i = 5; i < 11; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).removeClass("gt_bar--active");
        }
      }
      if ($progressPercentage > 40 && $progressPercentage <= 50) {
        for (var i = 1; i < 6; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).addClass("gt_bar--active");
        }
        for (var i = 6; i < 11; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).removeClass("gt_bar--active");
        }
      }
      if ($progressPercentage > 50 && $progressPercentage <= 60) {
        for (var i = 1; i < 7; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).addClass("gt_bar--active");
        }
        for (var i = 7; i < 11; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).removeClass("gt_bar--active");
        }
      }
      if ($progressPercentage > 60 && $progressPercentage <= 70) {
        for (var i = 1; i < 8; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).addClass("gt_bar--active");
        }
        for (var i = 8; i < 11; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).removeClass("gt_bar--active");
        }
      }
      if ($progressPercentage > 70 && $progressPercentage <= 80) {
        for (var i = 1; i < 9; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).addClass("gt_bar--active");
        }
        for (var i = 9; i < 11; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).removeClass("gt_bar--active");
        }
      }
      if ($progressPercentage > 80 && $progressPercentage < 100) {
        for (var i = 1; i < 10; i++) {
          $element.find(`.gt_bar[data-index="${i}"]`).addClass("gt_bar--active");
        }
        $lastBar.removeClass("gt_bar--active");
      }
    }
    /* init block script */
    addInteraction();
    reRenderInventory();
    listenVariantChange();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productInventory()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productInventory" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_iconInventory = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_iconInventory";
  var id = "NZYtn6rM2akOKPo_iconInventory";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "NZYtn6rM2akOKPo_iconInventory",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_iconInventory()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_iconInventory" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productVariant = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productVariant";
  var id = "NZYtn6rM2akOKPo_productVariant";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var $variantChecked = $element.find(".gt_product-variant--checked");
    var $variantOptions = $element.find(".gt_product-variant-options");
    var mode = "production";
    var animationActive = 'false';
    var timeoutTooltip = null;
    var valueInTitleActive = "false" === "true";
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (animationActive === "true") {
        var interactionScrollIntoView =
          '""';
        window.SOLID.library.animation({
          elementId: id,
          $doms: $elements,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function initSwatches() {
      window.SOLID.library.gtProductSwatchesV2({
        $element: $element,
        settings: {
          classCurrentValue: ".gt_product-variant-option--selected .gt_product-variant-option--selected-text",
          classItem: ".gt_variant--select-item",
          classInputIdHidden: ".gt_variant--input",
          classBtnSelect: ".gt_product-variant--btn-select",
          classVariantValueInTitle: ".gt_title_value",
        }
      });
    }

    function openSelectDropdown() {
      $variantChecked.removeClass("gt_active");
      var $options = $(this).siblings(".gt_product-variant-options");
      if ($options.hasClass("gt_active")) {
        $options.css("top", "");
        $options.removeClass("gt_active");
        $(this).removeClass("gt_active");
        clearEventShowTooltip();
        $(document).off("mousedown.outsideClickVariantSelect");
      } else {
        $variantOptions.removeClass("gt_active");
        $options.addClass("gt_active");
        $(this).addClass("gt_active");
        var optionsOuterHeight = $options.outerHeight();
        var selectInputHeight = $variantChecked.outerHeight();
        var positionOptions = $options.offset().top - $(document).scrollTop() + optionsOuterHeight;
        var windowHeight = $(window).outerHeight();
        if (positionOptions > windowHeight) {
          const currentTopOptions = $options.css("top");
          const newTop = "calc( " + currentTopOptions + " - " + optionsOuterHeight + "px" + " - " + (Number(selectInputHeight) + 10) + "px" + " )";
          $options.css("top", newTop);
        }
        clearTimeout(timeoutTooltip);
        timeoutTooltip = setTimeout(() => {
          eventShowTooltipSelectType();
        }, 300)
        //addeventclickoutsidetoclose
        const $currentTargetOptions = $(this);
        $(document).off("mousedown.outsideClickVariantSelect").on("mousedown.outsideClickVariantSelect", function(event) {
          if ($options && $options.length && $currentTargetOptions && $currentTargetOptions.length) {
            const $optionsPure = $options[0];
            if ($optionsPure && !$optionsPure.contains(event.target) && !$currentTargetOptions[0].contains(event.target)) {
              $options.css("top", "");
              $options.removeClass("gt_active");
              $currentTargetOptions.removeClass("gt_active");
              clearEventShowTooltip();
              $(document).off("mousedown.outsideClickVariantSelect");
            }
          }
        });
      }
    }

    function onClickSelectDropDown() {
      $variantChecked.removeClass("gt_active");
      $variantOptions.removeClass("gt_active");
      var value = $(this).attr("data-value");
      var $variantCheckedCurrent = $(this).closest(
        ".gt_product-variant--select-box"
      );
      var $valueVariantChecked = $variantCheckedCurrent.find(
        ".gt_product-variant-option--selected .gt_product-variant-option--selected-text"
      );
      var $contentOptionSelect = $(this).html();
      $valueVariantChecked.attr("data-value", value);
      $valueVariantChecked.html($contentOptionSelect);
      //closetooltip
      const $tooltip = $element.find(".gt_product-variant-tooltip");
      $tooltip.css("display", "none");
      clearEventShowTooltip();
    }

    function hideAtomWhenNoVariant() {
      $element.css("display", "");
      var isHide = true;
      var $variantItems = $element.find(".gt_product-variant--item")
      for (var i = 0; i < $variantItems.length; i++) {
        var $item = $($variantItems[i]);
        var display = $item.css("display");
        if (display !== "none") {
          isHide = false;
          break;
        }
      }
      if (isHide) {
        $element.css("display", "none");
      }
    }

    function eventShowTooltipSelectType() {
      const $selectItems = $element.find(".gt_variant--select-item");
      for (var i = 0; i < $selectItems.length; i++) {
        const $selectItem = $($selectItems[i]);
        const $selectOptions = $selectItem.find(".gt_product-variant-option");
        const $tooltip = $selectItem.find(".gt_product-variant-tooltip");
        $selectOptions.off("mouseenter").on("mouseenter", function() {
          //checkoverflow
          const $contentValue = $(this).find(".gt_product-variant-option--txt");
          const cachedDisplayContentValue = $contentValue.css("display");
          $contentValue.css({
            display: "inline",
            overflow: "unset",
            whiteSpace: "nowrap"
          });
          const realWidth = $contentValue.outerWidth();
          $contentValue.css({
            display: cachedDisplayContentValue,
            overflow: "",
            whiteSpace: ""
          });
          //
          const selectOptionTop = this.getBoundingClientRect().top;
          const selectItemTop = $selectItem[0].getBoundingClientRect().top;
          const selectOptionHeight = $(this).outerHeight();
          const selectOptionWidth = $(this).outerWidth();
          const contentSelect = $contentValue.html();
          if (realWidth > selectOptionWidth) {
            $tooltip.find(".gt_product-variant-tooltip-name").html(contentSelect);
            $tooltip.css({
              display: "block",
              top: selectOptionTop - selectItemTop - selectOptionHeight,
              zIndex: 10
            });
            $tooltip.find(".gt_product-variant-tooltip-arrow").css({
              left: selectOptionWidth / 2 + "px",
            })
          }
        });
        $selectOptions.off("mouseleave").on("mouseleave", function() {
          $tooltip.css({
            display: "none"
          })
        });
      }
    }

    function clearEventShowTooltip() {
      const $selectitems = $element.find(".gt_variant--select-item");
      for (var i = 0; i < $selectitems.length; i++) {
        const $selectitem = $($selectitems[i]);
        const $selectoptions = $selectitem.find(".gt_product-variant-option");
        $selectoptions.off("mouseenter");
        $selectoptions.off("mouseleave");
      }
    }
    /* init block script */
    hideAtomWhenNoVariant();
    initSwatches();
    animation();
    /*global blockscript*/
    window.SOLID.store.subscribe("run-script-" + id, () => {
      $elements = document.querySelectorAll(elementClassName);
      main();
    });
    /* store subscribe block script */
    /* events block script */
    var $elements_1 = $element.find(".gt_product-variant--checked");
    $elements_1.off("click.openSelect").on("click.openSelect", openSelectDropdown);
    var $elements_2 = $element.find(".gt_product-variant-option");
    $elements_2.off("click.selectItem").on("click.selectItem", onClickSelectDropDown);
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productVariant()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productVariant" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productButtonAddToCart = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productButtonAddToCart";
  var id = "NZYtn6rM2akOKPo_productButtonAddToCart";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var scrollIntoViewActive = 'false' == 'true';
    var animationActive = 'false' == 'true';
    var animationHoverActive = 'false' == 'true';
    var scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var mode = 'production';
    var previewSoldOut = 'false';
    var actions = '[{"control":{"attribute":"pickProductButton","id":"pickProductButton","isButtonAddToCard":true,"type":"pickproduct"},"event":"click","id":1},{"control":{"attribute":"pickLinkButton","id":"pickLinkButton","newTab":false,"reference":"html","title":"Pick Link","type":"picklink","value":"/checkout"},"event":"click","id":2}]';
    
    var activeButtonFixContent = "false" === "true";
    var buttonFixContent = "Buy [!quantity!] items";
    var disableListenSoldOut = "false" === "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "NZYtn6rM2akOKPo_productButtonAddToCart",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        };
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover",
          };
        }
        window.SOLID.library.animation(settings);
      }
    }

    function eventChangeTextInIframe() {
      
    }

    function eventListenSoldOut() {
      if (mode !== "production") {
        if (previewSoldOut === "false") {
          window.SOLID.library.gtBuyProductListenSoldOut({
            $element: $($element)[0],
            options: {
              isButtonAddToCard: true,
              textAddToCard: "Buy Now",
              textSoldOut: "Sold out",
            },
            mode: "dev"
          });
        }
      } else {
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $($element)[0],
          options: {
            isButtonAddToCard: true,
            textAddToCard: "Buy Now",
            textSoldOut: "Sold out",
          },
        });
      }
    }

    function addActionEvent() {
      // function customEvent(actions,id,key)
      if (mode === "production") {
        $($element).customEvent(
          JSON.parse(actions),
          'NZYtn6rM2akOKPo_productButtonAddToCart' + '_' + indexEl
        );
      }
      /*Listenifisbuttonaddtocard*/
      store.subscribe(
        "loading-buy-now-NZYtn6rM2akOKPo_productButtonAddToCart" + "_" + indexEl,
        function(isDisplay) {
          const $loadingEl = $($element).find(
            ".atom-button-loading-circle-loader"
          );
          const $textEl = $($element).find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              store.dispatch("loading-buy-now-NZYtn6rM2akOKPo_productButtonAddToCart", "");
              store.dispatch("loading-buy-now-NZYtn6rM2akOKPo_productButtonAddToCart" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl
                .find(".atom-button-loading-check-mark")
                .css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl
                  .find(".atom-button-loading-check-mark")
                  .removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                store.dispatch("loading-buy-now-NZYtn6rM2akOKPo_productButtonAddToCart", "");
                store.dispatch("loading-buy-now-NZYtn6rM2akOKPo_productButtonAddToCart" + "_" + indexEl, "");
              }, 3000);
            }
          }
        }
      );
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    if (activeButtonFixContent) {
      initFixContent();
    }
    addInteraction();
    addActionEvent();
    if (!disableListenSoldOut) {
      eventListenSoldOut();
    }
    eventChangeTextInIframe();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      eventListenSoldOut,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productButtonAddToCart()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productButtonAddToCart" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_boxCollection = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_boxCollection";
  var id = "NZYtn6rM2akOKPo_boxCollection";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "NZYtn6rM2akOKPo_boxCollection",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_boxCollection()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_boxCollection" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_collectionTitle = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_collectionTitle";
  var id = "NZYtn6rM2akOKPo_collectionTitle";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "NZYtn6rM2akOKPo_collectionTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "NZYtn6rM2akOKPo_collectionTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_collectionTitle()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_collectionTitle" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productSlider = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productSlider";
  var id = "NZYtn6rM2akOKPo_productSlider";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var loop = "false" === "true";
    var autoplay = "false" === "true";
    var centeredSlides = "false" === "true";
    var slideAutoHeight = "false" === "true";
    var mode = "production";
    var checkWindowWidth = $(window).width();
    var widthSliderCurrent;
    var slidesPerView_lg = "3";
    var slidesPerView_md = "3";
    var slidesPerView_sm = "3";
    var slidesPerView_xs = "2";
    var slidesPerColumn_lg = "1";
    var slidesPerColumn_md = "1";
    var slidesPerColumn_sm = "1";
    var slidesPerColumn_xs = "1";
    var spaceBetween_lg = parseInt("30") || 1;
    var spaceBetween_md = parseInt("30") || 1;
    var spaceBetween_sm = parseInt("24") || 1;
    var spaceBetween_xs = parseInt("24") || 1;
    var widthActive = "false" === "true";
    var widthSlider = "100%";
    var widthSlider_lg = "100%";
    var widthSlider_md = "100%";
    var widthSlider_sm = "100%";
    var widthSlider_xs = "100%";
    var autoPlayTime = parseInt("3") || 3;
    var mySwiper;
    var objectSetting;

    var dotsPagination = "dots" === "dots";
    var customPagination = "dots" === "custom";
    /* store get state block script */
    /* methods block script */
    function initSlider() {
      var $swiperContainer = $element.find(".gt_slider");
      if (!$swiperContainer || !$swiperContainer.length) {
        return;
      }
      if (dotsPagination) {
        if (slideAutoHeight) {
          var slideAutoHeight1 = slideAutoHeight;
        } else {
          var slideAutoHeight1 = false;
        }
        objectSetting = {
          autoHeight: slideAutoHeight1,
          speed: 800,
          loop: loop,
          centeredSlides: centeredSlides,
          touchStartPreventDefault: mode === "dev" ? false : true,
          slidesPerView: 1,
          autoplay: autoplay ? {
            delay: autoPlayTime * 1000,
            disableOnInteraction: false,
          } : false,
          navigation: {
            nextEl: "#gt_control-next-NZYtn6rM2akOKPo_productSlider",
            prevEl: "#gt_control-prev-NZYtn6rM2akOKPo_productSlider",
          },
          pagination: {
            el: "#gt_control-pagination-NZYtn6rM2akOKPo_productSlider",
            type: 'custom',
            clickable: true,
            renderCustom: function(swiper, current, total) {
              var customPaginationHtml = "";
              for (var i = 0; i < total; i++) {
                if (i == (current - 1)) {
                  customPaginationHtml += `<div class="gt_control-pagination-item swiper-pagination-bullet swiper-pagination-bullet-active">
                        <span data-optimize-type="icon"  data-attribute="iconDotsActive,"  data-section-id="NZYtn6rM2akOKPo_productSlider"  class="gt_icon"><svg width="100%" height="100%" viewBox="0 0 20 8" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="20" height="8" rx="4" fill="currentColor"/>
</svg>
</span> </div> `;
                } else {
                  customPaginationHtml += `<div class="gt_control-pagination-item swiper-pagination-bullet">
                        <span data-optimize-type="icon"  data-attribute="iconDots,"  data-section-id="NZYtn6rM2akOKPo_productSlider"  class="gt_icon"><svg width="100%" height="100%" viewBox="0 0 8 8" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
<circle cx="4" cy="4" r="4" fill="currentColor"/>
</svg>
</span>
                        </div>`;
                }
              }
              return customPaginationHtml;
            }
          },
          breakpoints: {
            0: {
              slidesPerView: slidesPerView_xs,
              spaceBetween: spaceBetween_xs,
              slidesPerColumn: slidesPerColumn_xs,
              slidesPerColumnFill: 'row',
            },
            577: {
              slidesPerView: slidesPerView_sm,
              spaceBetween: spaceBetween_sm,
              slidesPerColumn: slidesPerColumn_sm,
              slidesPerColumnFill: 'row',
            },
            993: {
              slidesPerView: slidesPerView_md,
              spaceBetween: spaceBetween_md,
              slidesPerColumn: slidesPerColumn_md,
              slidesPerColumnFill: 'row',
            },
            1201: {
              slidesPerView: slidesPerView_lg,
              spaceBetween: spaceBetween_lg,
              slidesPerColumn: slidesPerColumn_lg,
              slidesPerColumnFill: 'row',
            },
          },
          on: {
            init: function() {
              const $images = $swiperContainer.find(".gt_lazyload").not(".gt_lazyloaded");
              if ($images && $images.length && window.SOLID.library && window.SOLID.library.gtLazyload) {
                for (var i = 0; i < $images.length; i++) {
                  window.SOLID.library.gtLazyload($images[i]);
                }
              }
            }
          }
        }
      } else if (customPagination) {
        if (slideAutoHeight) {
          var slideAutoHeight2 = slideAutoHeight;
        } else {
          var slideAutoHeight2 = false;
        }
        objectSetting = {
          autoHeight: slideAutoHeight2,
          speed: 800,
          loop: loop,
          centeredSlides: centeredSlides,
          touchStartPreventDefault: mode === "dev" ? false : true,
          slidesPerView: 1,
          autoplay: autoplay ? {
            delay: autoPlayTime * 1000,
            disableOnInteraction: false,
          } : false,
          navigation: {
            nextEl: "#gt_control-next-NZYtn6rM2akOKPo_productSlider",
            prevEl: "#gt_control-prev-NZYtn6rM2akOKPo_productSlider",
          },

          pagination: {
            el: "#gt_control-pagination-NZYtn6rM2akOKPo_productSlider",
            clickable: true,
            renderBullet: function(index, className) {
              index = index + 1;
              if (index < 10) {
                index = "0" + index;
              }
              return '<span class="' + className + '">' + index + '.' + "</span>";
            }
          },
          breakpoints: {
            0: {
              slidesPerView: slidesPerView_xs,
              spaceBetween: spaceBetween_xs,
              slidesPerColumn: slidesPerColumn_xs,
              slidesPerColumnFill: 'row',
            },
            577: {
              slidesPerView: slidesPerView_sm,
              spaceBetween: spaceBetween_sm,
              slidesPerColumn: slidesPerColumn_sm,
              slidesPerColumnFill: 'row',
            },
            993: {
              slidesPerView: slidesPerView_md,
              spaceBetween: spaceBetween_md,
              slidesPerColumn: slidesPerColumn_md,
              slidesPerColumnFill: 'row',
            },
            1201: {
              slidesPerView: slidesPerView_lg,
              spaceBetween: spaceBetween_lg,
              slidesPerColumn: slidesPerColumn_lg,
              slidesPerColumnFill: 'row',
            },
          },
          on: {
            init: function() {
              const $images = $swiperContainer.find(".gt_lazyload").not(".gt_lazyloaded");
              if ($images && $images.length && window.SOLID.library && window.SOLID.library.gtLazyload) {
                for (var i = 0; i < $images.length; i++) {
                  window.SOLID.library.gtLazyload($images[i]);
                }
              }
            }
          }
        }
      }

      $swiperContainer.find(".swiper-wrapper").children().addClass("swiper-slide");

      if ($swiperContainer.find(".swiper-slide").length == 1) {
        $swiperContainer.find(".swiper-wrapper").addClass("gt_disabled");
        $element.find(".gt_control").addClass("gt_disabled");
      }

      if ($swiperContainer[0].swiper) {
        mySwiper = $swiperContainer[0].swiper;
        mySwiper.destroy();
      }
      mySwiper = new Swiper($swiperContainer[0], objectSetting);
    }

    function changeSliderActive(value) {
      if (value && value.sliderIndex !== NaN) {
        if (loop) {
          mySwiper.slideToLoop(value.sliderIndex, 500, true);
        } else {
          mySwiper.slideTo(value.sliderIndex, 500, true);
        }
      }
    }

    function optimizeSlidePerView(value) {
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        slidesPerView_xs = value;
      } else if (checkWindowWidth <= 992) {
        slidesPerView_sm = value;
      } else if (checkWindowWidth <= 1200) {
        slidesPerView_md = value;
      } else {
        slidesPerView_lg = value;
      }
      initSlider();
    }

    function optimizeWidthSlider(value) {
      checkWindowWidth = $(window).width();
      if (checkWindowWidth <= 576) {
        widthSlider_xs = value;
      } else if (checkWindowWidth <= 992) {
        widthSlider_sm = value;
      } else if (checkWindowWidth <= 1200) {
        widthSlider_md = value;
      } else {
        widthSlider_lg = widthSlider = value;
      }
      $element.css("cssText", "width: " + value + " !important;");
      mySwiper.update();
    }

    function optimizeWidthActive(value) {
      widthActive = value;
      if (!value) {
        $element.css("cssText", "width: null");
      } else {
        checkWindowWidth = $(window).width();
        widthSliderCurrent = 0;
        if (checkWindowWidth <= 576) {
          widthSliderCurrent = widthSlider_xs;
        } else if (checkWindowWidth <= 992) {
          widthSliderCurrent = widthSlider_sm;
        } else if (checkWindowWidth <= 1200) {
          widthSliderCurrent = widthSlider_md;
        } else {
          widthSliderCurrent = widthSlider;
        }
        $element.css("cssText", "width: " + widthSliderCurrent + " !important;");
      }
    }

    function listen() {
      let observer = new ResizeObserver(() => {
        if (mySwiper) {
          mySwiper.update()
        }
      })
      observer.observe($element[0]);
    }
    /* init block script */
    listen();
    //eslint-disable-next-lineno-undef
    if (mode !== "production") {
      autoplay = false;
    }
    initSlider();
    var delay = 0;

    /* store subscribe block script */
    store.subscribe("optimal-NZYtn6rM2akOKPo_productSlider-slidesPerView", optimizeSlidePerView);
    store.subscribe("optimal-NZYtn6rM2akOKPo_productSlider-widthSlider", optimizeWidthSlider);
    store.subscribe("optimal-NZYtn6rM2akOKPo_productSlider-widthActive", optimizeWidthActive);
    store.subscribe("trigger-slider-NZYtn6rM2akOKPo_productSlider", changeSliderActive);

    function destroy() {
      store.unsubscribe("optimal-NZYtn6rM2akOKPo_productSlider-slidesPerView", optimizeSlidePerView);
      store.unsubscribe("optimal-NZYtn6rM2akOKPo_productSlider-widthSlider", optimizeWidthSlider);
      store.unsubscribe("optimal-NZYtn6rM2akOKPo_productSlider-widthActive", optimizeWidthActive);
      store.unsubscribe("trigger-slider-NZYtn6rM2akOKPo_productSlider", changeSliderActive);
    }
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productSlider()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productSlider" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productItem = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productItem";
  var id = "NZYtn6rM2akOKPo_productItem";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "NZYtn6rM2akOKPo_productItem",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }

    function checkRemoteDefaultInput() {
      if (isExistAtomVariant()) {
        var $inputVariantDefault = $element.find(".gt_variant-input--default");
        if ($inputVariantDefault && $inputVariantDefault.length) {
          $($inputVariantDefault[0]).remove()
        }
      }

      if (isExistAtomQuantity()) {
        var $inputQuantityDefault = $element.find(".gt_quantity-input--default");
        if ($inputQuantityDefault && $inputQuantityDefault.length) {
          $($inputQuantityDefault[0]).remove()
        }
      }
    }

    function isExistAtomVariant() {
      var $atomProduct = $element.find(".gt_variant--input")
      if ($atomProduct && $atomProduct.length) {
        return true
      }
      return false
    }

    function isExistAtomQuantity() {
      var $atomQuantity = $element.find(".gt_quantity--input")
      if ($atomQuantity && $atomQuantity.length) {
        return true
      }
      return false
    }
    /* init block script */
    addInteraction();
    checkRemoteDefaultInput();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target, indexEl);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productItem()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productItem" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productImageCollection = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productImageCollection";
  var id = "NZYtn6rM2akOKPo_productImageCollection";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    /* store get state block script */
    /* methods block script */
    function initLibFeatureImage() {
      $element.gtProductFeatureImage({
        classFeatureImage: ".gt_product-image--feature",
        classImages: null,
        carousel: null,
        owlCarousel: null,
      });
    }

    function initLibProductZoom() {
      $element.find(".gt_product-image--feature").gfProductZoomImage({
        classHoverItem: ".gt_product-img-box",
        scale: "1.5",
        classSection: ".gt_atom-NZYtn6rM2akOKPo_productImageCollection",
      });
    }

    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }
    /* init block script */
    initLibFeatureImage();
    initLibProductZoom();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /* global block script */
  window.SOLID.store.subscribe("runjs" + "_atom_" + id, () => {
    $elements = document.querySelectorAll(elementClassName);
    main();
  });
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productImageCollection()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productImageCollection" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productTagSaleCollection = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productTagSaleCollection";
  var id = "NZYtn6rM2akOKPo_productTagSaleCollection";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const roundPercent = Number("0");
    const removeZeros = "true" === "true";
    /* store get state block script */
    /* methods block script */
    /* init block script */
    window.SOLID.library.gtProductSaveV2({
      $element: $element,
      settings: {
        classTextPercent: ".gt_product-tag-sale--value--percent",
        classTextNumber: ".gt_product-tag-sale--value--number",
        dataFormat: "- [!Profit!]",
        dataFormatKey: "[!Profit!]",
        customCurrencyFormating: "shortPrefix",
        roundPercent: roundPercent,
        roundNoZeroes: removeZeros
      }
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productTagSaleCollection()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productTagSaleCollection" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productContent = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productContent";
  var id = "NZYtn6rM2akOKPo_productContent";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "NZYtn6rM2akOKPo_productContent",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productContent()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productContent" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_boxInfo = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_boxInfo";
  var id = "NZYtn6rM2akOKPo_boxInfo";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "NZYtn6rM2akOKPo_boxInfo",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_boxInfo()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_boxInfo" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productTitleCollection = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productTitleCollection";
  var id = "NZYtn6rM2akOKPo_productTitleCollection";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "NZYtn6rM2akOKPo_productTitleCollection",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "NZYtn6rM2akOKPo_productTitleCollection",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productTitleCollection()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productTitleCollection" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_boxPriceCollection = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_boxPriceCollection";
  var id = "NZYtn6rM2akOKPo_boxPriceCollection";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "NZYtn6rM2akOKPo_boxPriceCollection",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_boxPriceCollection()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_boxPriceCollection" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productPriceCollection = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productPriceCollection";
  var id = "NZYtn6rM2akOKPo_productPriceCollection";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const syncQuantityandPrice = "true" == "true";
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!price!]"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "NZYtn6rM2akOKPo_productPriceCollection",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "NZYtn6rM2akOKPo_productPriceCollection",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-price-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-price-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    };
    $element.gtProductPrice({
      classCurrentPrice: ".gt_product-price--number",
      syncQuantityPrice: syncQuantityandPrice,
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productPriceCollection()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productPriceCollection" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productComparePriceCollection = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productComparePriceCollection";
  var id = "NZYtn6rM2akOKPo_productComparePriceCollection";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const syncQuantityandPrice = "true" == "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "NZYtn6rM2akOKPo_productComparePriceCollection",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "NZYtn6rM2akOKPo_productComparePriceCollection",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    $element.gtProductPrice({
      classComparePrice: ".gt_product-price--compare",
      classCurrentPrice: ".gt_product-price--number",
      syncQuantityComparePrice: syncQuantityandPrice,
      replacePriceForCurrentPrice: false,
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productComparePriceCollection()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productComparePriceCollection" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productVariantCollection = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productVariantCollection";
  var id = "NZYtn6rM2akOKPo_productVariantCollection";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var $variantChecked = $element.find(".gt_product-variant--checked");
    var $variantOptions = $element.find(".gt_product-variant-options");
    var mode = "production";
    var animationActive = 'false';
    var timeoutTooltip = null;
    var valueInTitleActive = "false" === "true";
    /* store get state block script */
    /* methods block script */
    function animation() {
      if (animationActive === "true") {
        var interactionScrollIntoView =
          '""';
        window.SOLID.library.animation({
          elementId: id,
          $doms: $elements,
          interactionScrollIntoView: {
            value: JSON.parse(interactionScrollIntoView),
            previewAttr: "interactionScrollIntoView",
          },
          animationType: "block",
          mode: mode,
        });
      }
    }

    function initSwatches() {
      window.SOLID.library.gtProductSwatchesV2({
        $element: $element,
        settings: {
          classCurrentValue: ".gt_product-variant-option--selected .gt_product-variant-option--selected-text",
          classItem: ".gt_variant--select-item",
          classInputIdHidden: ".gt_variant--input",
          classBtnSelect: ".gt_product-variant--btn-select",
          classVariantValueInTitle: ".gt_title_value",
        }
      });
    }

    function openSelectDropdown() {
      $variantChecked.removeClass("gt_active");
      var $options = $(this).siblings(".gt_product-variant-options");
      if ($options.hasClass("gt_active")) {
        $options.css("top", "");
        $options.removeClass("gt_active");
        $(this).removeClass("gt_active");
        clearEventShowTooltip();
        $(document).off("mousedown.outsideClickVariantSelect");
      } else {
        $variantOptions.removeClass("gt_active");
        $options.addClass("gt_active");
        $(this).addClass("gt_active");
        var optionsOuterHeight = $options.outerHeight();
        var selectInputHeight = $variantChecked.outerHeight();
        var positionOptions = $options.offset().top - $(document).scrollTop() + optionsOuterHeight;
        var windowHeight = $(window).outerHeight();
        if (positionOptions > windowHeight) {
          const currentTopOptions = $options.css("top");
          const newTop = "calc( " + currentTopOptions + " - " + optionsOuterHeight + "px" + " - " + (Number(selectInputHeight) + 10) + "px" + " )";
          $options.css("top", newTop);
        }
        clearTimeout(timeoutTooltip);
        timeoutTooltip = setTimeout(() => {
          eventShowTooltipSelectType();
        }, 300)
        //addeventclickoutsidetoclose
        const $currentTargetOptions = $(this);
        $(document).off("mousedown.outsideClickVariantSelect").on("mousedown.outsideClickVariantSelect", function(event) {
          if ($options && $options.length && $currentTargetOptions && $currentTargetOptions.length) {
            const $optionsPure = $options[0];
            if ($optionsPure && !$optionsPure.contains(event.target) && !$currentTargetOptions[0].contains(event.target)) {
              $options.css("top", "");
              $options.removeClass("gt_active");
              $currentTargetOptions.removeClass("gt_active");
              clearEventShowTooltip();
              $(document).off("mousedown.outsideClickVariantSelect");
            }
          }
        });
      }
    }

    function onClickSelectDropDown() {
      $variantChecked.removeClass("gt_active");
      $variantOptions.removeClass("gt_active");
      var value = $(this).attr("data-value");
      var $variantCheckedCurrent = $(this).closest(
        ".gt_product-variant--select-box"
      );
      var $valueVariantChecked = $variantCheckedCurrent.find(
        ".gt_product-variant-option--selected .gt_product-variant-option--selected-text"
      );
      var $contentOptionSelect = $(this).html();
      $valueVariantChecked.attr("data-value", value);
      $valueVariantChecked.html($contentOptionSelect);
      //closetooltip
      const $tooltip = $element.find(".gt_product-variant-tooltip");
      $tooltip.css("display", "none");
      clearEventShowTooltip();
    }

    function hideAtomWhenNoVariant() {
      $element.css("display", "");
      var isHide = true;
      var $variantItems = $element.find(".gt_product-variant--item")
      for (var i = 0; i < $variantItems.length; i++) {
        var $item = $($variantItems[i]);
        var display = $item.css("display");
        if (display !== "none") {
          isHide = false;
          break;
        }
      }
      if (isHide) {
        $element.css("display", "none");
      }
    }

    function eventShowTooltipSelectType() {
      const $selectItems = $element.find(".gt_variant--select-item");
      for (var i = 0; i < $selectItems.length; i++) {
        const $selectItem = $($selectItems[i]);
        const $selectOptions = $selectItem.find(".gt_product-variant-option");
        const $tooltip = $selectItem.find(".gt_product-variant-tooltip");
        $selectOptions.off("mouseenter").on("mouseenter", function() {
          //checkoverflow
          const $contentValue = $(this).find(".gt_product-variant-option--txt");
          const cachedDisplayContentValue = $contentValue.css("display");
          $contentValue.css({
            display: "inline",
            overflow: "unset",
            whiteSpace: "nowrap"
          });
          const realWidth = $contentValue.outerWidth();
          $contentValue.css({
            display: cachedDisplayContentValue,
            overflow: "",
            whiteSpace: ""
          });
          //
          const selectOptionTop = this.getBoundingClientRect().top;
          const selectItemTop = $selectItem[0].getBoundingClientRect().top;
          const selectOptionHeight = $(this).outerHeight();
          const selectOptionWidth = $(this).outerWidth();
          const contentSelect = $contentValue.html();
          if (realWidth > selectOptionWidth) {
            $tooltip.find(".gt_product-variant-tooltip-name").html(contentSelect);
            $tooltip.css({
              display: "block",
              top: selectOptionTop - selectItemTop - selectOptionHeight,
              zIndex: 10
            });
            $tooltip.find(".gt_product-variant-tooltip-arrow").css({
              left: selectOptionWidth / 2 + "px",
            })
          }
        });
        $selectOptions.off("mouseleave").on("mouseleave", function() {
          $tooltip.css({
            display: "none"
          })
        });
      }
    }

    function clearEventShowTooltip() {
      const $selectitems = $element.find(".gt_variant--select-item");
      for (var i = 0; i < $selectitems.length; i++) {
        const $selectitem = $($selectitems[i]);
        const $selectoptions = $selectitem.find(".gt_product-variant-option");
        $selectoptions.off("mouseenter");
        $selectoptions.off("mouseleave");
      }
    }
    /* init block script */
    hideAtomWhenNoVariant();
    initSwatches();
    animation();
    /*global blockscript*/
    window.SOLID.store.subscribe("run-script-" + id, () => {
      $elements = document.querySelectorAll(elementClassName);
      main();
    });
    /* store subscribe block script */
    /* events block script */
    var $elements_1 = $element.find(".gt_product-variant--checked");
    $elements_1.off("click.openSelect").on("click.openSelect", openSelectDropdown);
    var $elements_2 = $element.find(".gt_product-variant-option");
    $elements_2.off("click.selectItem").on("click.selectItem", onClickSelectDropDown);
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productVariantCollection()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productVariantCollection" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomNZYtn6rM2akOKPo_productButtonAddToCartCollection = function() {
          (function() {
  var elementClassName = ".gt_atom-NZYtn6rM2akOKPo_productButtonAddToCartCollection";
  var id = "NZYtn6rM2akOKPo_productButtonAddToCartCollection";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var scrollIntoViewActive = 'false' == 'true';
    var animationActive = 'false' == 'true';
    var animationHoverActive = 'false' == 'true';
    var scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var mode = 'production';
    var previewSoldOut = 'false';
    var actions = '[{"control":{"attribute":"pickProductButton","id":"pickProductButton","isButtonAddToCard":true,"type":"pickproduct"},"event":"click","id":1},{"control":{"attribute":"pickLinkButton","id":"pickLinkButton","newTab":false,"reference":"html","title":"Pick Link","type":"picklink","value":"/cart"},"event":"click","id":2}]';
    
    var activeButtonFixContent = "false" === "true";
    var buttonFixContent = "Buy [!quantity!] items";
    var disableListenSoldOut = "false" === "true";
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "NZYtn6rM2akOKPo_productButtonAddToCartCollection",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        };
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover",
          };
        }
        window.SOLID.library.animation(settings);
      }
    }

    function eventChangeTextInIframe() {
      
    }

    function eventListenSoldOut() {
      if (mode !== "production") {
        if (previewSoldOut === "false") {
          window.SOLID.library.gtBuyProductListenSoldOut({
            $element: $($element)[0],
            options: {
              isButtonAddToCard: true,
              textAddToCard: "Add To Cart",
              textSoldOut: "Sold out",
            },
            mode: "dev"
          });
        }
      } else {
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $($element)[0],
          options: {
            isButtonAddToCard: true,
            textAddToCard: "Add To Cart",
            textSoldOut: "Sold out",
          },
        });
      }
    }

    function addActionEvent() {
      // function customEvent(actions,id,key)
      if (mode === "production") {
        $($element).customEvent(
          JSON.parse(actions),
          'NZYtn6rM2akOKPo_productButtonAddToCartCollection' + '_' + indexEl
        );
      }
      /*Listenifisbuttonaddtocard*/
      store.subscribe(
        "loading-buy-now-NZYtn6rM2akOKPo_productButtonAddToCartCollection" + "_" + indexEl,
        function(isDisplay) {
          const $loadingEl = $($element).find(
            ".atom-button-loading-circle-loader"
          );
          const $textEl = $($element).find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              store.dispatch("loading-buy-now-NZYtn6rM2akOKPo_productButtonAddToCartCollection", "");
              store.dispatch("loading-buy-now-NZYtn6rM2akOKPo_productButtonAddToCartCollection" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl
                .find(".atom-button-loading-check-mark")
                .css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl
                  .find(".atom-button-loading-check-mark")
                  .removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                store.dispatch("loading-buy-now-NZYtn6rM2akOKPo_productButtonAddToCartCollection", "");
                store.dispatch("loading-buy-now-NZYtn6rM2akOKPo_productButtonAddToCartCollection" + "_" + indexEl, "");
              }, 3000);
            }
          }
        }
      );
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    if (activeButtonFixContent) {
      initFixContent();
    }
    addInteraction();
    addActionEvent();
    if (!disableListenSoldOut) {
      eventListenSoldOut();
    }
    eventChangeTextInIframe();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
    /* public func block script */
    return {
      eventListenSoldOut,
    };
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    var public = script($target, indexEl);
    window.SOLID.public = window.SOLID.public || {};
    window.SOLID.public["atom" + "_" + id + "_" + indexEl] = public;
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomNZYtn6rM2akOKPo_productButtonAddToCartCollection()
      } catch(e) {
        console.error("Error ESAtom Id: NZYtn6rM2akOKPo_productButtonAddToCartCollection" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectionrtxlQNyz9dyU6Oh = function() {
          var $section = jQuery(".gt_section-rtxlQNyz9dyU6Oh");
if (!$section || $section.length == 0) {
  return;
}

$section.find('#return-to-top').click(function () {
  $('body,html').animate({
    scrollTop: 0
  }, 500);
});

        }
        funcESSectionrtxlQNyz9dyU6Oh()
      } catch(e) {
        console.error("Error ESSection Id: rtxlQNyz9dyU6Oh" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectionEEpsVmRcAkpZvAm = function() {
          
        }
        funcESSectionEEpsVmRcAkpZvAm()
      } catch(e) {
        console.error("Error ESSection Id: EEpsVmRcAkpZvAm" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomEEpsVmRcAkpZvAm_collectionHeader = function() {
          (function() {
  var elementClassName = ".gt_atom-EEpsVmRcAkpZvAm_collectionHeader";
  var id = "EEpsVmRcAkpZvAm_collectionHeader";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "true" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "EEpsVmRcAkpZvAm_collectionHeader",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomEEpsVmRcAkpZvAm_collectionHeader()
      } catch(e) {
        console.error("Error ESAtom Id: EEpsVmRcAkpZvAm_collectionHeader" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomEEpsVmRcAkpZvAm_collectionHeaderColumn = function() {
          (function() {
  var elementClassName = ".gt_atom-EEpsVmRcAkpZvAm_collectionHeaderColumn";
  var id = "EEpsVmRcAkpZvAm_collectionHeaderColumn";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "EEpsVmRcAkpZvAm_collectionHeaderColumn",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomEEpsVmRcAkpZvAm_collectionHeaderColumn()
      } catch(e) {
        console.error("Error ESAtom Id: EEpsVmRcAkpZvAm_collectionHeaderColumn" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomEEpsVmRcAkpZvAm_collectionTitle = function() {
          (function() {
  var elementClassName = ".gt_atom-EEpsVmRcAkpZvAm_collectionTitle";
  var id = "EEpsVmRcAkpZvAm_collectionTitle";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "EEpsVmRcAkpZvAm_collectionTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "EEpsVmRcAkpZvAm_collectionTitle",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target, indexEl);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomEEpsVmRcAkpZvAm_collectionTitle()
      } catch(e) {
        console.error("Error ESAtom Id: EEpsVmRcAkpZvAm_collectionTitle" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomEEpsVmRcAkpZvAm_collectionDescription = function() {
          (function() {
  var elementClassName = ".gt_atom-EEpsVmRcAkpZvAm_collectionDescription";
  var id = "EEpsVmRcAkpZvAm_collectionDescription";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "EEpsVmRcAkpZvAm_collectionDescription",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        };
        var settingsText = {
          elementId: "EEpsVmRcAkpZvAm_collectionDescription",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        };
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          };
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          };
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          };
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomEEpsVmRcAkpZvAm_collectionDescription()
      } catch(e) {
        console.error("Error ESAtom Id: EEpsVmRcAkpZvAm_collectionDescription" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomEEpsVmRcAkpZvAm_boxCollectionTop = function() {
          (function() {
  var elementClassName = ".gt_atom-EEpsVmRcAkpZvAm_boxCollectionTop";
  var id = "EEpsVmRcAkpZvAm_boxCollectionTop";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "EEpsVmRcAkpZvAm_boxCollectionTop",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomEEpsVmRcAkpZvAm_boxCollectionTop()
      } catch(e) {
        console.error("Error ESAtom Id: EEpsVmRcAkpZvAm_boxCollectionTop" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomEEpsVmRcAkpZvAm_columnCountProduct = function() {
          (function() {
  var elementClassName = ".gt_atom-EEpsVmRcAkpZvAm_columnCountProduct";
  var id = "EEpsVmRcAkpZvAm_columnCountProduct";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "EEpsVmRcAkpZvAm_columnCountProduct",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomEEpsVmRcAkpZvAm_columnCountProduct()
      } catch(e) {
        console.error("Error ESAtom Id: EEpsVmRcAkpZvAm_columnCountProduct" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomEEpsVmRcAkpZvAm_productCountInCollection = function() {
          
        }
        funcESAtomEEpsVmRcAkpZvAm_productCountInCollection()
      } catch(e) {
        console.error("Error ESAtom Id: EEpsVmRcAkpZvAm_productCountInCollection" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomEEpsVmRcAkpZvAm_columnSortProduct = function() {
          (function() {
  var elementClassName = ".gt_atom-EEpsVmRcAkpZvAm_columnSortProduct";
  var id = "EEpsVmRcAkpZvAm_columnSortProduct";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "EEpsVmRcAkpZvAm_columnSortProduct",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomEEpsVmRcAkpZvAm_columnSortProduct()
      } catch(e) {
        console.error("Error ESAtom Id: EEpsVmRcAkpZvAm_columnSortProduct" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomEEpsVmRcAkpZvAm_headingText = function() {
          (function() {
  var elementClassName = ".gt_atom-EEpsVmRcAkpZvAm_headingText";
  var id = "EEpsVmRcAkpZvAm_headingText";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "EEpsVmRcAkpZvAm_headingText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "EEpsVmRcAkpZvAm_headingText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomEEpsVmRcAkpZvAm_headingText()
      } catch(e) {
        console.error("Error ESAtom Id: EEpsVmRcAkpZvAm_headingText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomEEpsVmRcAkpZvAm_sortProduct = function() {
          (function() {
  var elementClassName = ".gt_atom-EEpsVmRcAkpZvAm_sortProduct";
  var id = "EEpsVmRcAkpZvAm_sortProduct";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var _mode = "production";
    /* store get state block script */
    /* methods block script */
    /* init block script */
    $element.find("select").each(function() {
      var $this = $(this);
      var $options = $this.children("option");

      $this.addClass("gt_select-hidden");
      if (!$this.parent().hasClass("gt_select")) {
        $this.wrap("<div class='gt_select'></div>");
      }
      $this.after("<div class='gt_select-styled'></div>");
      $this.next("div.gt_select-styled").html("<div class='gt_select-name'></div>");

      var $styledSelect = $this.next("div.gt_select-styled");
      var $styledSelectChild = $this.next("div.gt_select-styled").children();

      if (_mode === "production" && $options.is(":selected")) {
        var nameSelectedMap = {
          manual: "Featured",
          "best-selling": "Best selling",
          "title-ascending": "Alphabetically, A-Z",
          "title-descending": "Alphabetically, Z-A",
          "price-ascending": "Price, low to high",
          "price-descending": "Price, high to low",
          "created-ascending": "Date, old to new",
          "created-descending": "Date, new to old",
        };
        var nameSelected = nameSelectedMap[$this.val()] || nameSelectedMap.manual;
        $styledSelectChild.text(nameSelected);
      } else {
        $styledSelectChild.text($this.children("option").eq(0).text());
      }

      var $list = $("<ul />", {
        class: "gt_select-options",
      }).insertAfter($styledSelect);
      $options.each(function(_, option) {
        $("<li />", {
          class: "gt_item-filter",
          "value-filter": $(option).val(),
          text: $(option).text(),
          rel: $(option).val(),
        }).appendTo($list);
      });

      $styledSelect.click(function(e) {
        e.stopPropagation();
        $("div.select-styled.gt_active")
          .not(this)
          .each(function() {
            $(this).removeClass("gt_active").next("ul.gt_select-options").hide();
          });
        $(this).toggleClass("gt_active").next("ul.gt_select-options").toggle();
      });

      if (_mode !== "production") {
        var $listItems = $list.children("li");
        $listItems.click(function(e) {
          e.stopPropagation();
          $styledSelectChild.text($(this).text()).parent().removeClass("gt_active");
          $this.val($(this).attr("rel"));
          $list.hide();
        });
      }
      $(document).click(function() {
        $styledSelectChild.parent().removeClass("gt_active");
        $list.hide();
      });
    });

    if (_mode === "production") {
      $element.find(".gt_select-options .gt_item-filter").click(function() {
        var sort_by = $(this).attr("value-filter");

        var parser = document.createElement("a");
        parser.href = window.location.href;
        var search = "?sort_by=" + sort_by;
        var newUrl =
          parser.protocol + "//" + parser.host + parser.pathname + search;
        var autoScroll = "true" === "true";
        if (autoScroll) {
          window.location.href = newUrl + "#gt_section-EEpsVmRcAkpZvAm_sortProduct";
        } else {
          window.location.href = newUrl;
        }
      });
    }

    if (window.location.hash) {
      var hash = window.location.hash.substring(1); //Putshashin variable,andremovesthe#character
      if (hash === "gt_section-EEpsVmRcAkpZvAm_sortProduct") {
        $("body,html").animate({
            scrollTop: $element.offset().top - 60,
          },
          300
        );
      }
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomEEpsVmRcAkpZvAm_sortProduct()
      } catch(e) {
        console.error("Error ESAtom Id: EEpsVmRcAkpZvAm_sortProduct" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomEEpsVmRcAkpZvAm_columnCountProductOfPage = function() {
          (function() {
  var elementClassName = ".gt_atom-EEpsVmRcAkpZvAm_columnCountProductOfPage";
  var id = "EEpsVmRcAkpZvAm_columnCountProductOfPage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "EEpsVmRcAkpZvAm_columnCountProductOfPage",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomEEpsVmRcAkpZvAm_columnCountProductOfPage()
      } catch(e) {
        console.error("Error ESAtom Id: EEpsVmRcAkpZvAm_columnCountProductOfPage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomEEpsVmRcAkpZvAm_productCountInCollectionOfPage = function() {
          
        }
        funcESAtomEEpsVmRcAkpZvAm_productCountInCollectionOfPage()
      } catch(e) {
        console.error("Error ESAtom Id: EEpsVmRcAkpZvAm_productCountInCollectionOfPage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomEEpsVmRcAkpZvAm_columnPaginationProduct = function() {
          (function() {
  var elementClassName = ".gt_atom-EEpsVmRcAkpZvAm_columnPaginationProduct";
  var id = "EEpsVmRcAkpZvAm_columnPaginationProduct";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "EEpsVmRcAkpZvAm_columnPaginationProduct",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomEEpsVmRcAkpZvAm_columnPaginationProduct()
      } catch(e) {
        console.error("Error ESAtom Id: EEpsVmRcAkpZvAm_columnPaginationProduct" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomEEpsVmRcAkpZvAm_pagination = function() {
          (function() {
  var elementClassName = ".gt_atom-EEpsVmRcAkpZvAm_pagination";
  var id = "EEpsVmRcAkpZvAm_pagination";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (scrollIntoViewActive) {
        var settings = {
          elementId: "EEpsVmRcAkpZvAm_pagination",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          };
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    function destroy() {}
    /* events block script */
    /* destroy block script */
    store.subscribe("component-" + id + "-destroy", function() {
      destroy();
      store.unsubscribe("component-" + id + "-destroy");
    });
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomEEpsVmRcAkpZvAm_pagination()
      } catch(e) {
        console.error("Error ESAtom Id: EEpsVmRcAkpZvAm_pagination" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectioni4AQcQiqB7KoIyX = function() {
          (function() {
  var elementClassName = ".gt_section-i4AQcQiqB7KoIyX";
  var id = "i4AQcQiqB7KoIyX";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    var $list = $element.find(".gt_grid-items .gt_blog-item");
    var numberOfItemsDefault = "6";
    var numToShow = 3;
    var $button = $element.find(".gt_btn-viewmore");
    var numInList = $list.length;
    /* store get state block script */
    /* methods block script */
    /* init block script */
    //Checkconditionforbuttonviewmore
    $list.attr("style", "display:none !important");
    if (numInList > numToShow) {
      $button.show();
    }
    if (numberOfItemsDefault >= numInList) {
      $button.hide();
    }
    $list.slice(0, numberOfItemsDefault).show();
    $button.click(function() {
      var showing = $list.filter(":visible").length;
      $list.slice(showing - 1, showing + numToShow).fadeIn();
      var nowShowing = $list.filter(":visible").length;
      if (nowShowing >= numInList) {
        $button.hide();
      }
    });
    //CollapseFilterSidebar
    $element.find(".gt_filter-box").click(function() {
      $(this).toggleClass("gt_active");
      $(this)
        .next(".gt_article-tag--box")
        .toggleClass("gt_active-box")
        .fadeIn(300);
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESSectioni4AQcQiqB7KoIyX()
      } catch(e) {
        console.error("Error ESSection Id: i4AQcQiqB7KoIyX" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_featureBlog = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_featureBlog";
  var id = "i4AQcQiqB7KoIyX_featureBlog";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "i4AQcQiqB7KoIyX_featureBlog",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_featureBlog()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_featureBlog" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_sidebarColumn = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_sidebarColumn";
  var id = "i4AQcQiqB7KoIyX_sidebarColumn";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "i4AQcQiqB7KoIyX_sidebarColumn",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_sidebarColumn()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_sidebarColumn" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_titleSidebar = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_titleSidebar";
  var id = "i4AQcQiqB7KoIyX_titleSidebar";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "i4AQcQiqB7KoIyX_titleSidebar",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "i4AQcQiqB7KoIyX_titleSidebar",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_titleSidebar()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_titleSidebar" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_filterBox = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_filterBox";
  var id = "i4AQcQiqB7KoIyX_filterBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "i4AQcQiqB7KoIyX_filterBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_filterBox()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_filterBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_btnFilter = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_btnFilter";
  var id = "i4AQcQiqB7KoIyX_btnFilter";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "i4AQcQiqB7KoIyX_btnFilter",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "i4AQcQiqB7KoIyX_btnFilter",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_btnFilter()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_btnFilter" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_iconOpen = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_iconOpen";
  var id = "i4AQcQiqB7KoIyX_iconOpen";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "i4AQcQiqB7KoIyX_iconOpen",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_iconOpen()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_iconOpen" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_iconClose = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_iconClose";
  var id = "i4AQcQiqB7KoIyX_iconClose";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "i4AQcQiqB7KoIyX_iconClose",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_iconClose()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_iconClose" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_articleTagBox = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_articleTagBox";
  var id = "i4AQcQiqB7KoIyX_articleTagBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "i4AQcQiqB7KoIyX_articleTagBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_articleTagBox()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_articleTagBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_titleArticleTag = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_titleArticleTag";
  var id = "i4AQcQiqB7KoIyX_titleArticleTag";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "i4AQcQiqB7KoIyX_titleArticleTag",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "i4AQcQiqB7KoIyX_titleArticleTag",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_titleArticleTag()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_titleArticleTag" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_lineTitle = function() {
          
        }
        funcESAtomi4AQcQiqB7KoIyX_lineTitle()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_lineTitle" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_articleTag = function() {
          
        }
        funcESAtomi4AQcQiqB7KoIyX_articleTag()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_articleTag" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_mainColumn = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_mainColumn";
  var id = "i4AQcQiqB7KoIyX_mainColumn";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "i4AQcQiqB7KoIyX_mainColumn",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_mainColumn()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_mainColumn" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_headingText = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_headingText";
  var id = "i4AQcQiqB7KoIyX_headingText";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "i4AQcQiqB7KoIyX_headingText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "i4AQcQiqB7KoIyX_headingText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_headingText()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_headingText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_messageText = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_messageText";
  var id = "i4AQcQiqB7KoIyX_messageText";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "i4AQcQiqB7KoIyX_messageText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "i4AQcQiqB7KoIyX_messageText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_messageText()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_messageText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_largeItemBox = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_largeItemBox";
  var id = "i4AQcQiqB7KoIyX_largeItemBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "i4AQcQiqB7KoIyX_largeItemBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_largeItemBox()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_largeItemBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_blogItemLarge = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_blogItemLarge";
  var id = "i4AQcQiqB7KoIyX_blogItemLarge";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "i4AQcQiqB7KoIyX_blogItemLarge",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_blogItemLarge()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_blogItemLarge" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_leftBox = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_leftBox";
  var id = "i4AQcQiqB7KoIyX_leftBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "i4AQcQiqB7KoIyX_leftBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_leftBox()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_leftBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_largeItemImage = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_largeItemImage";
  var id = "i4AQcQiqB7KoIyX_largeItemImage";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var $elementAtom = $(".gt_atom-i4AQcQiqB7KoIyX_largeItemImage");
      var widthImage = $elementAtom.find("img").width();
      var heightImage = $elementAtom.find("img").height();
      $elementAtom.find("img").attr('width', widthImage);
      $elementAtom.find("img").attr('height', heightImage);
    }
    /* init block script */
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_largeItemImage()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_largeItemImage" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_rightBox = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_rightBox";
  var id = "i4AQcQiqB7KoIyX_rightBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "i4AQcQiqB7KoIyX_rightBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_rightBox()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_rightBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_blogTitleLarge = function() {
          
        }
        funcESAtomi4AQcQiqB7KoIyX_blogTitleLarge()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_blogTitleLarge" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_largeItemTitle = function() {
          
        }
        funcESAtomi4AQcQiqB7KoIyX_largeItemTitle()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_largeItemTitle" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_largeItemAuthor = function() {
          
        }
        funcESAtomi4AQcQiqB7KoIyX_largeItemAuthor()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_largeItemAuthor" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_largeItemDate = function() {
          
        }
        funcESAtomi4AQcQiqB7KoIyX_largeItemDate()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_largeItemDate" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_largeItemShortContent = function() {
          
        }
        funcESAtomi4AQcQiqB7KoIyX_largeItemShortContent()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_largeItemShortContent" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_smallItemsBox = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_smallItemsBox";
  var id = "i4AQcQiqB7KoIyX_smallItemsBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "i4AQcQiqB7KoIyX_smallItemsBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_smallItemsBox()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_smallItemsBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_blogItem = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_blogItem";
  var id = "i4AQcQiqB7KoIyX_blogItem";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "i4AQcQiqB7KoIyX_blogItem",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_blogItem()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_blogItem" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_itemImageSmall = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_itemImageSmall";
  var id = "i4AQcQiqB7KoIyX_itemImageSmall";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var $elementAtom = $(".gt_atom-i4AQcQiqB7KoIyX_itemImageSmall");
      var widthImage = $elementAtom.find("img").width();
      var heightImage = $elementAtom.find("img").height();
      $elementAtom.find("img").attr('width', widthImage);
      $elementAtom.find("img").attr('height', heightImage);
    }
    /* init block script */
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_itemImageSmall()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_itemImageSmall" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_blogTitleSmall = function() {
          
        }
        funcESAtomi4AQcQiqB7KoIyX_blogTitleSmall()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_blogTitleSmall" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_itemTitleSmall = function() {
          
        }
        funcESAtomi4AQcQiqB7KoIyX_itemTitleSmall()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_itemTitleSmall" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_itemShortContentSmall = function() {
          
        }
        funcESAtomi4AQcQiqB7KoIyX_itemShortContentSmall()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_itemShortContentSmall" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_viewMoreBox = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_viewMoreBox";
  var id = "i4AQcQiqB7KoIyX_viewMoreBox";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "i4AQcQiqB7KoIyX_viewMoreBox",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_viewMoreBox()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_viewMoreBox" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomi4AQcQiqB7KoIyX_btnViewMore = function() {
          (function() {
  var elementClassName = ".gt_atom-i4AQcQiqB7KoIyX_btnViewMore";
  var id = "i4AQcQiqB7KoIyX_btnViewMore";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "i4AQcQiqB7KoIyX_btnViewMore",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "i4AQcQiqB7KoIyX_btnViewMore",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomi4AQcQiqB7KoIyX_btnViewMore()
      } catch(e) {
        console.error("Error ESAtom Id: i4AQcQiqB7KoIyX_btnViewMore" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSection7oYU9uBPX9Z7JKN = function() {
          (function() {
  var elementClassName = ".gt_section-7oYU9uBPX9Z7JKN";
  var id = "7oYU9uBPX9Z7JKN";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    /* store get state block script */
    /* methods block script */
    function addClassSticky() {
      var windowWidth = $(window).width();
      var windowCheckSticky = "enable";
      if (windowWidth <= 992) {
        windowCheckSticky = "disable";
      } else {
        windowCheckSticky = "enable";
      }

      $(window).off("scroll.scrollTopBar7oYU9uBPX9Z7JKN").on("scroll.scrollTopBar7oYU9uBPX9Z7JKN", function() {
        var scrollTop = $(document).scrollTop();
        if (scrollTop > 1) {
          if (windowCheckSticky === "enable") {
            $element.addClass("gt_sticky--top");
          } else {
            $element.removeClass("gt_sticky--top");
          }
        } else {
          $element.removeClass("gt_sticky--top");
        }
      });
    }
    /* init block script */
    addClassSticky();
    var delay = 0;
    $(window).off("resize.checkSwitchScreens7oYU9uBPX9Z7JKN").on("resize.checkSwitchScreens7oYU9uBPX9Z7JKN", function() {
      clearTimeout(delay);
      delay = setTimeout(function() {
        addClassSticky();
      }, 100);
    });
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
    var $target = $($elements[indexEl]);
    script($target, indexEl);
  }
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESSection7oYU9uBPX9Z7JKN()
      } catch(e) {
        console.error("Error ESSection Id: 7oYU9uBPX9Z7JKN" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom7oYU9uBPX9Z7JKN_boxTopbar = function() {
          (function() {
  var elementClassName = ".gt_atom-7oYU9uBPX9Z7JKN_boxTopbar";
  var id = "7oYU9uBPX9Z7JKN_boxTopbar";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "7oYU9uBPX9Z7JKN_boxTopbar",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom7oYU9uBPX9Z7JKN_boxTopbar()
      } catch(e) {
        console.error("Error ESAtom Id: 7oYU9uBPX9Z7JKN_boxTopbar" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom7oYU9uBPX9Z7JKN_iconSocial = function() {
          (function() {
  var elementClassName = ".gt_atom-7oYU9uBPX9Z7JKN_iconSocial";
  var id = "7oYU9uBPX9Z7JKN_iconSocial";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "7oYU9uBPX9Z7JKN_iconSocial",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom7oYU9uBPX9Z7JKN_iconSocial()
      } catch(e) {
        console.error("Error ESAtom Id: 7oYU9uBPX9Z7JKN_iconSocial" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom7oYU9uBPX9Z7JKN_iconSocialItem_0 = function() {
          (function() {
  var elementClassName = ".gt_atom-7oYU9uBPX9Z7JKN_iconSocialItem_0";
  var id = "7oYU9uBPX9Z7JKN_iconSocialItem_0";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "7oYU9uBPX9Z7JKN_iconSocialItem_0",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom7oYU9uBPX9Z7JKN_iconSocialItem_0()
      } catch(e) {
        console.error("Error ESAtom Id: 7oYU9uBPX9Z7JKN_iconSocialItem_0" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom7oYU9uBPX9Z7JKN_iconSocialItem_1 = function() {
          (function() {
  var elementClassName = ".gt_atom-7oYU9uBPX9Z7JKN_iconSocialItem_1";
  var id = "7oYU9uBPX9Z7JKN_iconSocialItem_1";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "7oYU9uBPX9Z7JKN_iconSocialItem_1",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom7oYU9uBPX9Z7JKN_iconSocialItem_1()
      } catch(e) {
        console.error("Error ESAtom Id: 7oYU9uBPX9Z7JKN_iconSocialItem_1" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom7oYU9uBPX9Z7JKN_iconSocialItem_2 = function() {
          (function() {
  var elementClassName = ".gt_atom-7oYU9uBPX9Z7JKN_iconSocialItem_2";
  var id = "7oYU9uBPX9Z7JKN_iconSocialItem_2";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "7oYU9uBPX9Z7JKN_iconSocialItem_2",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom7oYU9uBPX9Z7JKN_iconSocialItem_2()
      } catch(e) {
        console.error("Error ESAtom Id: 7oYU9uBPX9Z7JKN_iconSocialItem_2" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom7oYU9uBPX9Z7JKN_iconSocialItem_3 = function() {
          (function() {
  var elementClassName = ".gt_atom-7oYU9uBPX9Z7JKN_iconSocialItem_3";
  var id = "7oYU9uBPX9Z7JKN_iconSocialItem_3";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "7oYU9uBPX9Z7JKN_iconSocialItem_3",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom7oYU9uBPX9Z7JKN_iconSocialItem_3()
      } catch(e) {
        console.error("Error ESAtom Id: 7oYU9uBPX9Z7JKN_iconSocialItem_3" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom7oYU9uBPX9Z7JKN_iconSocialItem_4 = function() {
          (function() {
  var elementClassName = ".gt_atom-7oYU9uBPX9Z7JKN_iconSocialItem_4";
  var id = "7oYU9uBPX9Z7JKN_iconSocialItem_4";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "7oYU9uBPX9Z7JKN_iconSocialItem_4",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom7oYU9uBPX9Z7JKN_iconSocialItem_4()
      } catch(e) {
        console.error("Error ESAtom Id: 7oYU9uBPX9Z7JKN_iconSocialItem_4" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom7oYU9uBPX9Z7JKN_boxShipping = function() {
          (function() {
  var elementClassName = ".gt_atom-7oYU9uBPX9Z7JKN_boxShipping";
  var id = "7oYU9uBPX9Z7JKN_boxShipping";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "7oYU9uBPX9Z7JKN_boxShipping",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom7oYU9uBPX9Z7JKN_boxShipping()
      } catch(e) {
        console.error("Error ESAtom Id: 7oYU9uBPX9Z7JKN_boxShipping" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom7oYU9uBPX9Z7JKN_messageShipping = function() {
          (function() {
  var elementClassName = ".gt_atom-7oYU9uBPX9Z7JKN_messageShipping";
  var id = "7oYU9uBPX9Z7JKN_messageShipping";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "true" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"rubberBand"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "7oYU9uBPX9Z7JKN_messageShipping",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "7oYU9uBPX9Z7JKN_messageShipping",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom7oYU9uBPX9Z7JKN_messageShipping()
      } catch(e) {
        console.error("Error ESAtom Id: 7oYU9uBPX9Z7JKN_messageShipping" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom7oYU9uBPX9Z7JKN_boxAccount = function() {
          (function() {
  var elementClassName = ".gt_atom-7oYU9uBPX9Z7JKN_boxAccount";
  var id = "7oYU9uBPX9Z7JKN_boxAccount";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "7oYU9uBPX9Z7JKN_boxAccount",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom7oYU9uBPX9Z7JKN_boxAccount()
      } catch(e) {
        console.error("Error ESAtom Id: 7oYU9uBPX9Z7JKN_boxAccount" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom7oYU9uBPX9Z7JKN_accountTopBar = function() {
          (function() {
  var elementClassName = ".gt_atom-7oYU9uBPX9Z7JKN_accountTopBar";
  var id = "7oYU9uBPX9Z7JKN_accountTopBar";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "7oYU9uBPX9Z7JKN_accountTopBar",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtom7oYU9uBPX9Z7JKN_accountTopBar()
      } catch(e) {
        console.error("Error ESAtom Id: 7oYU9uBPX9Z7JKN_accountTopBar" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectionylWRszF6MLGZzua = function() {
          
        }
        funcESSectionylWRszF6MLGZzua()
      } catch(e) {
        console.error("Error ESSection Id: ylWRszF6MLGZzua" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectionER4JAyXh8P1WnKO = function() {
          
        }
        funcESSectionER4JAyXh8P1WnKO()
      } catch(e) {
        console.error("Error ESSection Id: ER4JAyXh8P1WnKO" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomER4JAyXh8P1WnKO_columnBanner = function() {
          (function() {
  var elementClassName = ".gt_atom-ER4JAyXh8P1WnKO_columnBanner";
  var id = "ER4JAyXh8P1WnKO_columnBanner";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "ER4JAyXh8P1WnKO_columnBanner",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomER4JAyXh8P1WnKO_columnBanner()
      } catch(e) {
        console.error("Error ESAtom Id: ER4JAyXh8P1WnKO_columnBanner" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomER4JAyXh8P1WnKO_bannerContainer = function() {
          (function() {
  var elementClassName = ".gt_atom-ER4JAyXh8P1WnKO_bannerContainer";
  var id = "ER4JAyXh8P1WnKO_bannerContainer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "true" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"zoom-out-up"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "ER4JAyXh8P1WnKO_bannerContainer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomER4JAyXh8P1WnKO_bannerContainer()
      } catch(e) {
        console.error("Error ESAtom Id: ER4JAyXh8P1WnKO_bannerContainer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomER4JAyXh8P1WnKO_headingText = function() {
          (function() {
  var elementClassName = ".gt_atom-ER4JAyXh8P1WnKO_headingText";
  var id = "ER4JAyXh8P1WnKO_headingText";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "ER4JAyXh8P1WnKO_headingText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "ER4JAyXh8P1WnKO_headingText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomER4JAyXh8P1WnKO_headingText()
      } catch(e) {
        console.error("Error ESAtom Id: ER4JAyXh8P1WnKO_headingText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomER4JAyXh8P1WnKO_messageText = function() {
          (function() {
  var elementClassName = ".gt_atom-ER4JAyXh8P1WnKO_messageText";
  var id = "ER4JAyXh8P1WnKO_messageText";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "ER4JAyXh8P1WnKO_messageText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "ER4JAyXh8P1WnKO_messageText",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomER4JAyXh8P1WnKO_messageText()
      } catch(e) {
        console.error("Error ESAtom Id: ER4JAyXh8P1WnKO_messageText" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomER4JAyXh8P1WnKO_countdownTimer = function() {
          (function() {
  var elementClassName = ".gt_atom-ER4JAyXh8P1WnKO_countdownTimer";
  var id = "ER4JAyXh8P1WnKO_countdownTimer";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    var arrayFormat = ["minute", "second"];
    var outputFormat = "";
    var showDays = "true" === "true";
    var showHours = "true" === "true";
    var type = "scheduled";
    var dateTimeAnyDate = "2022-09-18T07:00:00.000Z";
    var dateTimeAnyTime = "00:05:00";
    var isLoop = "true" === "true";
    var dateTimeAny = type === "scheduled" ? dateTimeAnyDate : dateTimeAnyTime;
    var endDate = 0;
    /* store get state block script */
    /* methods block script */
    function timeToSecond(timeString) {
      var times = timeString.split(":");
      var hour = parseInt(times[0]),
        min = parseInt(times[1]),
        sec = parseInt(times[2]);
      return hour * 3600 + min * 60 + sec;
    }

    function startTimer(key, endDate, $element, loop, isRepeat = false) {
      SOLID.Countdown({
        id,
        key: key,
        endDate: endDate,
        distance: 1000,
        outputFormat: outputFormat,
        onStop: function() {
          $element.addClass("gt_hidden");

          if (loop) {
            clearTimeout(window['_repeat_' + key]);
            window['_repeat_' + key] = setTimeout(() => {
              $element.removeClass("gt_hidden");
              var totalTime = timeToSecond(dateTimeAny);
              startTimer(key, new Date(Date.now() + totalTime * 1000), $element, loop, totalTime, true);
            }, 5000);
            return;
          }
        },
        onInterval: function(object) {
          var $days = $element.find(".gt_atom-days")
          var day1 = Math.floor(object.days / 10);
          var day2 = object.days % 10;
          $days.find(".gt_atom-num1").text(day1);
          $days.find(".gt_atom-num2").text(day2);


          var $hours = $element.find(".gt_atom-hours")
          var hr1 = Math.floor(object.hours / 10);
          var hr2 = object.hours % 10;
          $hours.find(".gt_atom-num1").text(hr1);
          $hours.find(".gt_atom-num2").text(hr2);


          var $minutes = $element.find(".gt_atom-minutes")
          var min1 = Math.floor(object.minutes / 10);
          var min2 = object.minutes % 10;
          $minutes.find(".gt_atom-num1").text(min1);
          $minutes.find(".gt_atom-num2").text(min2);


          var $seconds = $element.find(".gt_atom-seconds")
          var sec1 = Math.floor(object.seconds / 10);
          var sec2 = object.seconds % 10;
          $seconds.find(".gt_atom-num1").text(sec1);
          $seconds.find(".gt_atom-num2").text(sec2);

          if (isRepeat) {
            var time = hr1.toString() + hr2.toString() + ':' + min1.toString() + min2.toString() + ':' + sec1.toString() + sec2.toString();
            saveTimer(time);
          }
        }
      });
    }

    function saveTimer(time) {
      if (time == '00:00:01') {
        time = dateTimeAnyTime;
      }
      localStorage.setItem(id, time);
    }

    function createTimer() {
      if (type === 'repeat') {
        var totalTime = timeToSecond(dateTimeAny);
        if (localStorage.getItem(id)) {
          totalTime = timeToSecond(localStorage.getItem(id));
        }
        endDate = new Date(Date.now() + totalTime * 1000);
        $element.removeClass("gt_hidden");
        startTimer("repeatER4JAyXh8P1WnKO_countdownTimer", endDate, $element, isLoop, true);
      } else { //scheduled
        endDate = new Date(dateTimeAny);
        $element.removeClass("gt_hidden");
        localStorage.removeItem(id);
        startTimer("repeatER4JAyXh8P1WnKO_countdownTimer", endDate, $element);
      }
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "ER4JAyXh8P1WnKO_countdownTimer",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    if (!dateTimeAny) {
      return
    }
    if (showDays) {
      arrayFormat.push("day")
    }
    if (showHours) {
      arrayFormat.push("hour")
    }
    outputFormat = arrayFormat.join("|");
    createTimer();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomER4JAyXh8P1WnKO_countdownTimer()
      } catch(e) {
        console.error("Error ESAtom Id: ER4JAyXh8P1WnKO_countdownTimer" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomER4JAyXh8P1WnKO_buttonLink = function() {
          (function() {
  var elementClassName = ".gt_atom-ER4JAyXh8P1WnKO_buttonLink";
  var id = "ER4JAyXh8P1WnKO_buttonLink";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const isProduction = "production" === "production";
    let actions = `[]`
    const isCustomActions = "false" == "true"
    const openNewTab = "false" == "true"
    const linkButton = "/collections/deals-of-the-week";
    const activeButtonFixContent = "false" === "true";
    const buttonFixContent = "Buy [!quantity!] items"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "ER4JAyXh8P1WnKO_buttonLink",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }

    function addAction() {
      if (!isCustomActions) {
        if (linkButton != "") {
          actionsObj = [{
            "id": 1,
            "event": "click",
            "control": {
              "id": "1",
              "attribute": "1",
              "title": "Pick Link",
              "desc": "",
              "reference": "html",
              "type": "picklink",
              "value": linkButton,
              "newTab": openNewTab
            }
          }]
        } else {
          actionsObj = []
        }
        actions = JSON.stringify(actionsObj);
      }
      if (isProduction) {
        $element.customEvent(JSON.parse(actions), id + "_" + indexEl);
        /*Listenifisbuttonaddtocard*/

        window.SOLID.store.subscribe("loading-buy-now-ER4JAyXh8P1WnKO_buttonLink" + "_" + indexEl, function(isDisplay) {
          const $loadingEl = $element.find(".atom-button-loading-circle-loader");
          const $textEl = $element.find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              window.SOLID.store.dispatch("loading-buy-now-ER4JAyXh8P1WnKO_buttonLink" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                window.SOLID.store.dispatch("loading-buy-now-ER4JAyXh8P1WnKO_buttonLink" + "_" + indexEl, "");
              }, 3000);
            }
          }
        });
      }
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    addAction();
    if (activeButtonFixContent) {
      initFixContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomER4JAyXh8P1WnKO_buttonLink()
      } catch(e) {
        console.error("Error ESAtom Id: ER4JAyXh8P1WnKO_buttonLink" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomER4JAyXh8P1WnKO_imageMobile = function() {
          (function() {
  var elementClassName = ".gt_atom-ER4JAyXh8P1WnKO_imageMobile";
  var id = "ER4JAyXh8P1WnKO_imageMobile";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    /* store get state block script */
    /* methods block script */
    function checkDimensions() {
      var widthImage = $(elementClassName).find("img").width();
      var heightImage = $(elementClassName).find("img").height();
      $(elementClassName).find("img").attr('width', widthImage);
      $(elementClassName).find("img").attr('height', heightImage);
    }

    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "ER4JAyXh8P1WnKO_imageMobile",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }
    /* init block script */
    addInteraction();
    checkDimensions();
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomER4JAyXh8P1WnKO_imageMobile()
      } catch(e) {
        console.error("Error ESAtom Id: ER4JAyXh8P1WnKO_imageMobile" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectionrNmap4XG5nFwW8s = function() {
          var $section = jQuery('.gt_section-rNmap4XG5nFwW8s');
if ($section && $section.length) {
  $section.gtParallax({
    classBackgroundImage: '.hero_banner_image'
  })
  
  var $sectionAfter =  $section.next();
  if ($sectionAfter && $sectionAfter.length) {
    $section.find('.scroll_link').off("click.goto").on("click", function(){
        $("body,html").animate({
            scrollTop: $sectionAfter.offset().top
        },1000);
    });
  }
}



        }
        funcESSectionrNmap4XG5nFwW8s()
      } catch(e) {
        console.error("Error ESSection Id: rNmap4XG5nFwW8s" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectionpn8totfucNfbSQG = function() {
          var $section = jQuery(".gt_section-pn8totfucNfbSQG");
if (!$section || $section.length == 0) {
    return
}
var owlElementID =  $section.find(".gt_productlist-items");
$(owlElementID).owlCarousel({
    loop: true,
    margin: 24,
    stagePadding: 20,
    dots: true,
    nav: true,
    items: 1,
    navText: ['<svg width="12" height="27" viewBox="0 0 12 27" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10.75 1.75L2 13.625L10.75 25.5" stroke="#6D6D6D" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"/></svg>', '<svg width="12" height="27" viewBox="0 0 12 27" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1.25 25.25L10 13.375L1.25 1.5" stroke="#6D6D6D" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"/></svg>'],
    onInitialized: function () {
      $section.find('.gt_productlist-item').removeClass("gt_disabled");
    },
    responsive: {
      0: {
        mouseDrag: false,
        touchDrag: true,
        items: 2,
        stagePadding: 0,
      },
      576: {
        items: 2,
        stagePadding: 0,
      },
      992: {
        items: 3,
        stagePadding: 10,
      },
      1200: {
        mouseDrag: true,
        touchDrag: false,
        items: 4
      }
    }
});

        }
        funcESSectionpn8totfucNfbSQG()
      } catch(e) {
        console.error("Error ESSection Id: pn8totfucNfbSQG" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESSectionIRoWptvf5Lh1W38 = function() {
          
        }
        funcESSectionIRoWptvf5Lh1W38()
      } catch(e) {
        console.error("Error ESSection Id: IRoWptvf5Lh1W38" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomIRoWptvf5Lh1W38_sectionName = function() {
          (function() {
  var elementClassName = ".gt_atom-IRoWptvf5Lh1W38_sectionName";
  var id = "IRoWptvf5Lh1W38_sectionName";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "IRoWptvf5Lh1W38_sectionName",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "IRoWptvf5Lh1W38_sectionName",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomIRoWptvf5Lh1W38_sectionName()
      } catch(e) {
        console.error("Error ESAtom Id: IRoWptvf5Lh1W38_sectionName" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomIRoWptvf5Lh1W38_descriptionSection = function() {
          (function() {
  var elementClassName = ".gt_atom-IRoWptvf5Lh1W38_descriptionSection";
  var id = "IRoWptvf5Lh1W38_descriptionSection";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const activeTextFixed = "false" === "true";
    const textFixedContent = "[!discount!] OFF"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settingsBlock = {
          elementId: "IRoWptvf5Lh1W38_descriptionSection",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "block"
        }
        var settingsText = {
          elementId: "IRoWptvf5Lh1W38_descriptionSection",
          $doms: $(elementClassName),
          mode: "production",
          animationType: "text"
        }
        if (scrollIntoViewActive) {
          settingsText.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView",
          }
        }
        if (animationActive) {
          settingsBlock.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation",
          }
        }
        if (animationHoverActive) {
          settingsBlock.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settingsText);
        window.SOLID.library.animation(settingsBlock);
      }
    }

    function initFixedContent() {
      const splitContent = textFixedContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    if (activeTextFixed) {
      initFixedContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomIRoWptvf5Lh1W38_descriptionSection()
      } catch(e) {
        console.error("Error ESAtom Id: IRoWptvf5Lh1W38_descriptionSection" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtomIRoWptvf5Lh1W38_sectionButton = function() {
          (function() {
  var elementClassName = ".gt_atom-IRoWptvf5Lh1W38_sectionButton";
  var id = "IRoWptvf5Lh1W38_sectionButton";
  var $elements = document.querySelectorAll(elementClassName);
  var store = window.SOLID.store;

  function script($target, indexEl) {
    var $element = $target;
    /* data block script */
    const scrollIntoViewActive = "false" == "true";
    const animationActive = "false" == "true";
    const animationHoverActive = "false" == "true";
    const scrollIntoView = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animation = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const animationHover = '{"delay":0,"duration":"1.5","iterationCount":1,"name":"none"}';
    const isProduction = "production" === "production";
    let actions = `[]`
    const isCustomActions = "false" == "true"
    const openNewTab = "false" == "true"
    const linkButton = "/collections/featured-products";
    const activeButtonFixContent = "false" === "true";
    const buttonFixContent = "Buy [!quantity!] items"
    /* store get state block script */
    /* methods block script */
    function addInteraction() {
      if (animationActive || scrollIntoViewActive || animationHoverActive) {
        var settings = {
          elementId: "IRoWptvf5Lh1W38_sectionButton",
          $doms: $(elementClassName),
          animationType: "block",
          mode: "production",
        }
        if (scrollIntoViewActive) {
          settings.interactionScrollIntoView = {
            value: JSON.parse(scrollIntoView),
            previewAttr: "scrollIntoView"
          }
        }
        if (animationActive) {
          settings.interactionNormal = {
            value: JSON.parse(animation),
            previewAttr: "animation"
          }
        }
        if (animationHoverActive) {
          settings.interactionHover = {
            value: JSON.parse(animationHover),
            previewAttr: "animationHover"
          }
        }
        window.SOLID.library.animation(settings)
      }
    }

    function addAction() {
      if (!isCustomActions) {
        if (linkButton != "") {
          actionsObj = [{
            "id": 1,
            "event": "click",
            "control": {
              "id": "1",
              "attribute": "1",
              "title": "Pick Link",
              "desc": "",
              "reference": "html",
              "type": "picklink",
              "value": linkButton,
              "newTab": openNewTab
            }
          }]
        } else {
          actionsObj = []
        }
        actions = JSON.stringify(actionsObj);
      }
      if (isProduction) {
        $element.customEvent(JSON.parse(actions), id + "_" + indexEl);
        /*Listenifisbuttonaddtocard*/

        window.SOLID.store.subscribe("loading-buy-now-IRoWptvf5Lh1W38_sectionButton" + "_" + indexEl, function(isDisplay) {
          const $loadingEl = $element.find(".atom-button-loading-circle-loader");
          const $textEl = $element.find(".gt_button-content-text");
          if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
            let timeout = undefined;
            if (isDisplay === true) {
              /*displayloadingbutton*/
              clearTimeout(timeout);
              $loadingEl.css("display", "inline-block");
              $textEl.css("visibility", "hidden");
            } else if (isDisplay === "stop") {
              /*stoploading*/
              $loadingEl.removeAttr("style");
              $textEl.removeAttr("style");
              window.SOLID.store.dispatch("loading-buy-now-IRoWptvf5Lh1W38_sectionButton" + "_" + indexEl, "");
            } else if (isDisplay === false) {
              clearTimeout(timeout);
              /*displaytickbutton*/
              $loadingEl.addClass("load-complete");
              $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
              /*removetickbuttonanddisplaytext*/
              timeout = setTimeout(function() {
                $loadingEl.removeClass("load-complete");
                $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
                $loadingEl.removeAttr("style");
                $textEl.removeAttr("style");
                window.SOLID.store.dispatch("loading-buy-now-IRoWptvf5Lh1W38_sectionButton" + "_" + indexEl, "");
              }, 3000);
            }
          }
        });
      }
    }

    function initFixContent() {
      const splitContent = buttonFixContent.match(/(.+|\B)(\[\!.+\!\])(.+|\B)/);
      if (splitContent.length < 4) {
        return;
      }
      const beforeWord = splitContent[1];
      $element.find(".gt_button-content-text-before").html(beforeWord);
      const afterWord = splitContent[3];
      $element.find(".gt_button-content-text-after").html(afterWord);
    }
    /* init block script */
    addInteraction();
    addAction();
    if (activeButtonFixContent) {
      initFixContent();
    }
    /* store subscribe block script */
    /* events block script */
    /* destroy block script */
    
  }
  /* run all script */
  function main() {
    for (var indexEl = 0; indexEl < $elements.length; indexEl++) {
      var $target = $($elements[indexEl]);
      script($target, indexEl);
    }
  }
  main();
  /*===================== DEVELOPER AREA ======================*/
  /* BEGIN */

  /* END */
})();
        }
        funcESAtomIRoWptvf5Lh1W38_sectionButton()
      } catch(e) {
        console.error("Error ESAtom Id: IRoWptvf5Lh1W38_sectionButton" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESElement85689 = function() {
          function main() {
  var $elementProduct = $(".gt_element-85689");
  const hideZeroPrice = "false" === "true";
  
  var widthImage = $elementProduct.find("img").width();
  var heightImage = $elementProduct.find("img").height();
  $elementProduct.find("img").attr('width', widthImage);
  $elementProduct.find("img").attr('height', heightImage);

  var $price = $elementProduct.find(".gt_product-price");
  if ($price && $price.length > 0) {
    $price.gtProductPrice({
      classCurrentPrice: ".gt_product-price--origin .gt_product-price--current",
      classComparePrice: ".gt_product-price--origin .gt_product-price--compare",
      hideZeroPrice: hideZeroPrice
    });
  }

  var $featureImage = $elementProduct.find(".gt_product-image");
  if ($featureImage && $featureImage.length > 0) {
    $featureImage.gtProductFeatureImage({
      classFeatureImage: ".gt_product-image--front, .gt_product-image--back",
      classImages: null,
      carousel: null,
      owlCarousel: null,
    });
  }

  var $swatches = $elementProduct.find(".gt_product_variants");
  if ($swatches && $swatches.length > 0) {
    $swatches.gtProductSwatches({
      classCurrentValue: ".gt_product-variant-option--selected span",
      classCurrentStatus: ".gt_product-sold-out-tag",
      classItem: ".gt_product-variant-option",
      classInputIdHidden: ".gt_swatches--input",
      classBtnSelect: ".gt_swatches--select",
    });
  }

  var productDisplaySaleLabel = "- [!Profit!]";
  var productDisplaySaleLabelNew = "[!Profit!] off";
  var presetsStyleProduct = "style_default";
  var $saved = $elementProduct.find(".gt_product-sale-tag");
  if ($saved && $saved.length > 0) {
    $saved.gtProductSaved({
      classTextPercent: ".gt_product-sale-tag--value--percent",
      classTextNumber: ".gt_product-sale-tag--value--number",
      dataFormat: presetsStyleProduct == "style_default" ? productDisplaySaleLabel : productDisplaySaleLabelNew,
      dataFormatKey: "[!Profit!]",
      customCurrencyFormating: "shortPrefix"
    });
  }

  var $variantChecked = $elementProduct.find(".gt_product-variant--checked");
  var $variantOptions = $elementProduct.find(".gt_product-variant-options");
  var $variantOption = $elementProduct.find(".gt_product-variant-option");

  $variantChecked.off("click.selectItem85689").on("click.selectItem85689", function() {
    var $options = $(this).siblings(".gt_product-variant-options");
    if($options.hasClass("gt_active")) {
      $options.removeClass("gt_active");
      $(this).removeClass("gt_active");
    } else {
      $variantOptions.removeClass("gt_active");
      $options.addClass("gt_active");
      $(this).addClass("gt_active");
    }
  });

  $variantOption.off("click.selectItem85689").on("click.selectItem85689", function() {
    $variantChecked.removeClass('gt_active');
    $variantOptions.removeClass('gt_active');
    var value = $(this).attr("data-value");
    var $variantCheckedCurrent =  $(this).closest(".gt_product-variant-box");
    $variantCheckedCurrent.find(".gt_product-variant--checked .gt_product-variant-option--selected span").html(value);
  });
}

main();

window.SOLID.store.subscribe("run-script-85689", () => {
  main();
});

        }
        funcESElement85689()
      } catch(e) {
        console.error("Error ESElement Id: 85689" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom85689_productTitle = function() {
          var $atoms = jQuery(".gt_atom-85689_productTitle");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "85689_productTitle",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtom85689_productTitle()
      } catch(e) {
        console.error("Error ESAtom Id: 85689_productTitle" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom85689_productVendor = function() {
          var $atoms = jQuery(".gt_atom-85689_productVendor");
if (!$atoms || !$atoms.length) {
  return;
}

/* Variables */
var clientInteractionScrollIntoView = "";

window.SOLID.library.animation({
  $doms: $atoms,
  elementId: "85689_productVendor",
  animationType: "text",
  interactionScrollIntoView: {
    value: clientInteractionScrollIntoView,
    previewAttr: "interactionScrollIntoView"
  },
  mode: "production"
});

        }
        funcESAtom85689_productVendor()
      } catch(e) {
        console.error("Error ESAtom Id: 85689_productVendor" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom85689_productButtonBuy = function() {
          function main() {
  /* Init Actions */
  var $atoms = jQuery(".gt_atom-85689_productButtonBuy");
  if (!$atoms || !$atoms.length) {
    return;
  }
  /* Variables */
  const interactionHover = {"delay":0,"duration":"1.5","iterationCount":1,"name":"none"};
  const interactionNormal = {"name":"none","duration":"1.5","delay":0,"iterationCount":"infinite"};
  const interactionWhilePress = {"delay":0,"duration":"1.5","iterationCount":1,"name":"pulse"};
  const interactionScrollIntoView = "";
  // animation
  window.SOLID.library.animation({
    elementId: "85689_productButtonBuy",
    $doms: $atoms,
    interactionNormal: {
      value: interactionNormal,
      previewAttr: "interactionButton"
    },
    interactionHover: {
      value: interactionHover,
      previewAttr: "interactionButtonHover"
    },
    interactionWhilePress: {
      value: interactionWhilePress,
      previewAttr: "interactionButtonWhitePress"
    },
    interactionScrollIntoView: {
      value: interactionScrollIntoView,
      previewAttr: "interactionScrollIntoView"
    },
    animationType: "block",
    mode: "production",
  })

  for (let i = 0; i < $atoms.length; i++) {
    const $atom = $atoms[i];
    // function customEvent(actions, id, key)
    
      $($atom).customEvent([{"control":{"attribute":"pickProductButton","id":"pickProductButton","isButtonAddToCard":true,"type":"pickproduct"},"event":"click","id":1},{"control":{"attribute":"pickLinkButton","id":"pickLinkButton","newTab":false,"reference":"html","title":"Pick Link","type":"picklink","value":"/cart"},"event":"click","id":2}], "85689_productButtonBuy" + "_" + i);
    

    /* Listen if is button add to card */

    window.SOLID.store.subscribe("loading-buy-now-85689_productButtonBuy" + "_" + i, function (isDisplay) {
      const $loadingEl = $($atom).find(".atom-button-loading-circle-loader");
      const $textEl = $($atom).find(".gt_button-content-text");
      if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
        let timeout = undefined;
        if (isDisplay === true) {
          /* display loading button */
          clearTimeout(timeout);
          $loadingEl.css("display", "inline-block");
          $textEl.css("visibility", "hidden");
        } else if (isDisplay === "stop") {
          /* stop loading */
          $loadingEl.removeAttr("style");
          $textEl.removeAttr("style");
          window.SOLID.store.dispatch("loading-buy-now-85689_productButtonBuy", "");
          window.SOLID.store.dispatch("loading-buy-now-85689_productButtonBuy" + "_" + i, "");
        } else if (isDisplay === false){
          clearTimeout(timeout);
          /* display tick button */
          $loadingEl.addClass("load-complete");
          $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
          /* remove tick button and display text*/
          timeout = setTimeout(function() {
            $loadingEl.removeClass("load-complete");
            $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
            $loadingEl.removeAttr("style");
            $textEl.removeAttr("style");
            window.SOLID.store.dispatch("loading-buy-now-85689_productButtonBuy", "");
            window.SOLID.store.dispatch("loading-buy-now-85689_productButtonBuy" + "_" + i, "");
          }, 3000);
        }
      }
    });
  }
  for (let i = 0; i < $atoms.length; i++) {
    const $atom = $atoms[i];
    
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $atom,
          options: {
            isButtonAddToCard: true, 
            textAddToCard: "Add", 
            textSoldOut: "Sold out"
          }
        })
    
    
  }
}

main();

window.SOLID.store.subscribe("run-script-85689_productButtonBuy", () => {
  main();
});

        }
        funcESAtom85689_productButtonBuy()
      } catch(e) {
        console.error("Error ESAtom Id: 85689_productButtonBuy" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    
      try {
        const funcESAtom85689_productIconBuy = function() {
          function main() {
  /* Init Actions */
  var $atoms = jQuery(".gt_atom-85689_productIconBuy");
  if (!$atoms || !$atoms.length) {
    return;
  }
  /* Variables */
  const interactionHover = {"name":"none","duration":"1.5","delay":0,"iterationCount":1};
  const interactionNormal = {"name":"none","duration":"1.5","delay":0,"iterationCount":"infinite"};
  const interactionWhilePress = {"name":"none","duration":"1.5","delay":0,"iterationCount":1};
  const interactionScrollIntoView = "";
  // animation
  window.SOLID.library.animation({
    elementId: "85689_productIconBuy",
    $doms: $atoms,
    interactionNormal: {
      value: interactionNormal,
      previewAttr: "interactionButton"
    },
    interactionHover: {
      value: interactionHover,
      previewAttr: "interactionButtonHover"
    },
    interactionWhilePress: {
      value: interactionWhilePress,
      previewAttr: "interactionButtonWhitePress"
    },
    interactionScrollIntoView: {
      value: interactionScrollIntoView,
      previewAttr: "interactionScrollIntoView"
    },
    animationType: "block",
    mode: "production",
  })

  for (let i = 0; i < $atoms.length; i++) {
    const $atom = $atoms[i];
    // function customEvent(actions, id, key)
    
      $($atom).customEvent([{"control":{"attribute":"pickProductButton","id":"pickProductButton","type":"pickproduct","isButtonAddToCard":true},"event":"click","id":1},{"control":{"attribute":"pickLinkButton","id":"pickLinkButton","newTab":false,"reference":"html","title":"Pick Link","type":"picklink","value":"/cart"},"event":"click","id":2}], "85689_productIconBuy" + "_" + i);
    

    /* Listen if is button add to card */

    window.SOLID.store.subscribe("loading-buy-now-85689_productIconBuy" + "_" + i, function (isDisplay) {
      const $loadingEl = $($atom).find(".atom-button-loading-circle-loader");
      const $textEl = $($atom).find(".gt_button-content-text");
      if ($loadingEl && $loadingEl.length && $textEl && $textEl.length) {
        let timeout = undefined;
        if (isDisplay === true) {
          /* display loading button */
          clearTimeout(timeout);
          $loadingEl.css("display", "inline-block");
          $textEl.css("visibility", "hidden");
        } else if (isDisplay === "stop") {
          /* stop loading */
          $loadingEl.removeAttr("style");
          $textEl.removeAttr("style");
          window.SOLID.store.dispatch("loading-buy-now-85689_productIconBuy", "");
          window.SOLID.store.dispatch("loading-buy-now-85689_productIconBuy" + "_" + i, "");
        } else if (isDisplay === false){
          clearTimeout(timeout);
          /* display tick button */
          $loadingEl.addClass("load-complete");
          $loadingEl.find(".atom-button-loading-check-mark").css("display", "block");
          /* remove tick button and display text*/
          timeout = setTimeout(function() {
            $loadingEl.removeClass("load-complete");
            $loadingEl.find(".atom-button-loading-check-mark").removeAttr("style");
            $loadingEl.removeAttr("style");
            $textEl.removeAttr("style");
            window.SOLID.store.dispatch("loading-buy-now-85689_productIconBuy", "");
            window.SOLID.store.dispatch("loading-buy-now-85689_productIconBuy" + "_" + i, "");
          }, 3000);
        }
      }
    });
  }
  for (let i = 0; i < $atoms.length; i++) {
    const $atom = $atoms[i];
    
        window.SOLID.library.gtBuyProductListenSoldOut({
          $element: $atom,
          options: {
            isButtonAddToCard: true, 
            textAddToCard: "", 
            textSoldOut: "Sold out"
          }
        })
    
    
  }
}

main();

window.SOLID.store.subscribe("run-script-85689_productIconBuy", () => {
  main();
});

        }
        funcESAtom85689_productIconBuy()
      } catch(e) {
        console.error("Error ESAtom Id: 85689_productIconBuy" )
        console.log("=============================== START ERROR =================================")
        console.log(e)
        console.log("===============================  END ERROR  =================================")
      }
    !function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.webpackNumbers=e():t.webpackNumbers=e()}(window,(function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=18)}({18:function(t,e,n){"use strict";try{var o=window.location.href,i=new URL(o),a=i.searchParams.get("design_theme_id"),r=i.searchParams.get("frame_token"),l=i.searchParams.get("oseid"),s=i.searchParams.get("editor_domain"),d=i.searchParams.get("ose_preview_version"),c=i.searchParams.get("ose_end_param"),C=window.location.hostname;if(a||r||l||d||c||s){var f='\n        <div class="gts_wapper">\n            <div class="gts_overlay"></div>\n            <div class="gts_content">\n                <div class="gts_content-icon">\n                    <svg width="286" height="222" viewBox="0 0 286 222" fill="none"\n                        xmlns="http://www.w3.org/2000/svg">\n                        <g clip-path="url(#gts_id_1)">\n                            <rect x="16" y="169" width="270" height="53" fill="url(#gts_id_6)"/>\n                            <path d="M37.157 180.922C37.157 180.922 46.9336 191.229 48.2431 193.931" stroke="white" stroke-miterlimit="10"/>\n                            <path d="M86.1199 168.264C86.1199 168.264 106.393 153.514 108.932 154.554C111.471 155.595 104.933 159.188 104.933 159.188C104.933 159.188 119.868 156.576 122.277 158.927C124.686 161.279 100.375 166.563 94.377 176.419C85.9699 169.304 86.1199 168.264 86.1199 168.264Z" fill="white"/>\n                            <path d="M22.6821 105.611C22.6821 105.611 14.395 111.435 10.5763 114.567C10.3541 114.752 10.091 114.88 9.80913 114.942C9.52725 115.004 9.23468 114.997 8.95585 114.923C8.67703 114.848 8.42003 114.708 8.20631 114.514C7.99259 114.32 7.82834 114.077 7.72728 113.807C4.88828 106.212 -1.64944 85.848 0.389848 76.1715C2.72903 65.0439 16.6242 65.6043 19.1633 66.0446C21.7024 66.4849 27.5104 67.1854 45.9139 87.7793C46.0652 87.9481 46.1784 88.1474 46.2459 88.3639C46.3134 88.5803 46.3337 88.8087 46.3052 89.0337C46.2768 89.2586 46.2003 89.4748 46.0811 89.6676C45.9618 89.8604 45.8025 90.0252 45.614 90.1509L32.8485 98.4966C32.8485 98.4966 16.6242 98.5266 22.6821 105.611Z" fill="#2D2D2D"/>\n                            <path d="M130.574 27.8788C130.314 28.7895 126.796 41.7782 126.796 41.7782C126.796 41.7782 121.717 36.1744 116.069 34.4133C119.298 29.67 121.517 26.4078 121.517 26.4078C121.517 26.4078 119.818 3.00203 123.857 3.08208C126.206 3.53239 126.666 12.9387 126.666 12.9387C126.666 12.9387 128.815 9.08614 129.595 14.6299C130.374 20.1736 130.834 27.0183 130.574 27.8788Z" fill="#B6BBE8"/>\n                            <path d="M125.746 40.4774C123.027 37.7402 119.717 35.6654 116.069 34.4133V34.4733L113.54 38.1958C107.652 46.8217 99.9251 58.0492 95.4066 64.2134C87.7393 75.1308 81.8714 78.453 68.4461 90.5912C60.4786 97.7731 51.2442 103.406 41.2156 107.202C41.0876 107.249 40.9476 107.251 40.8187 107.207C40.6897 107.163 40.5794 107.077 40.5058 106.962L33.6083 96.6053C33.5738 96.5577 33.5257 96.5217 33.4704 96.502C33.4151 96.4824 33.3551 96.48 33.2984 96.4952L29.1798 97.616C29.8096 97.4358 33.2684 96.245 34.8678 91.5118C36.3073 82.896 29.8696 74.4103 21.7024 71.2782C13.5353 68.1461 12.7056 84.7173 13.5153 87.4991C12.2157 87.1089 10.3064 86.4985 8.87691 86.8587C8.58218 86.9509 8.31278 87.1101 8.08983 87.3239C7.86687 87.5377 7.69642 87.8003 7.59184 88.0911C7.48725 88.382 7.45137 88.6931 7.48702 89.0001C7.52266 89.3071 7.62886 89.6017 7.79728 89.8607C9.93654 93.193 17.0041 93.9635 17.0041 93.9635L26.0609 114.657C26.1036 114.745 26.113 114.845 26.0872 114.939C26.0614 115.033 26.0023 115.114 25.9209 115.168C23.4818 116.799 6.18785 128.707 2.72906 142.706C-0.989645 157.787 17.204 210.252 38.7165 220.829C50.8422 227.153 70.9752 205.389 70.9752 205.389L75.1237 200.385L65.4071 179.371C62.4082 181.242 59.3393 183.304 56.2004 185.505L75.7335 169.495L93.9671 120.221C93.2887 110.239 96.568 100.391 103.094 92.8127C112.311 82.2756 122.767 53.3461 125.856 44.44L126.136 43.6295C126.536 42.4587 126.756 41.7983 126.756 41.7983L125.746 40.4774Z" fill="#B6BBE8"/>\n                            <path d="M54.211 172.897L73.5001 174L56.2103 185.515C53.9135 186.933 51.6945 188.473 49.5627 190.128C49.4093 190.256 49.2273 190.344 49.0324 190.385C48.8374 190.427 48.6353 190.42 48.4435 190.366C48.2517 190.312 48.0759 190.212 47.9313 190.075C47.7867 189.937 47.6776 189.767 47.6133 189.578L39.6161 166.462C39.6161 166.462 30.9891 132.239 12.2257 126.505C12.2257 126.505 20.113 119.501 21.6624 118.3C21.6624 118.3 54.351 140.415 47.1135 104.751L97.9657 138.093L54.211 172.897Z" fill="#2D2D2D"/>\n                            <path d="M133.283 38.6861C133.283 38.6861 130.844 34.7335 131.034 27.0983C131.224 19.4632 133.953 15.8707 133.953 22.5352C134.013 10.5872 135.063 0.860588 138.192 0.0200204C141.321 -0.820548 139.881 31.8615 143.19 36.5647L133.283 38.6861Z" fill="#CCCEEF"/>\n                            <path d="M270.096 80.1541C270.096 80.1541 272.245 47.6522 277.593 46.1312C280.592 48.7429 287.669 55.8277 282.591 85.818L270.096 80.1541Z" fill="#CCCEEF"/>\n                            <path d="M275.16 45.5656L270.382 47.3756C270.217 47.4382 270.134 47.623 270.196 47.7884L280.603 75.313C280.665 75.4784 280.85 75.5617 281.015 75.4991L285.792 73.6892C285.958 73.6266 286.041 73.4417 285.978 73.2763L275.572 45.7518C275.509 45.5864 275.325 45.503 275.16 45.5656Z" fill="#26263B"/>\n                            <path d="M270.595 41.5181L270.126 46.9717C270.12 47.0257 270.129 47.0801 270.151 47.1297C270.172 47.1794 270.206 47.2228 270.249 47.2558C270.292 47.2888 270.343 47.3103 270.396 47.3184C270.45 47.3265 270.505 47.3208 270.555 47.302L274.984 45.6208C275.034 45.6019 275.079 45.5704 275.115 45.5293C275.15 45.4883 275.174 45.439 275.185 45.386C275.196 45.333 275.193 45.2782 275.177 45.2265C275.161 45.1748 275.133 45.128 275.094 45.0905L271.095 41.3179C271.052 41.2868 271.001 41.2671 270.948 41.2607C270.894 41.2543 270.84 41.2614 270.791 41.2813C270.741 41.3012 270.697 41.3334 270.663 41.3747C270.629 41.4161 270.606 41.4654 270.595 41.5181Z" fill="#45455E"/>\n                            <path d="M280.924 54.2877C280.924 54.2877 272.283 66.0058 275.136 70.6977C277.988 75.3895 282.65 66.1687 283.832 62.586C284.589 58.0746 280.924 54.2877 280.924 54.2877Z" fill="#26263B"/>\n                            <path d="M283.155 55.9726C283.097 55.6198 282.945 55.289 282.716 55.0147C282.487 54.7405 282.189 54.5327 281.852 54.4131C281.515 54.2934 281.153 54.2663 280.802 54.3345C280.451 54.4027 280.125 54.5637 279.857 54.8008C277.577 56.7995 275.783 59.2927 274.611 62.0904C271.823 68.6942 274.268 80.9434 278.826 74.3017C282.843 68.4403 284.463 63.3056 283.155 55.9726Z" fill="#CCCEEF"/>\n                            <path d="M194.272 77.2823H204.608C204.98 77.2836 205.343 77.1699 205.647 76.9567C205.951 76.7435 206.182 76.4412 206.308 76.0914L212.656 58.6196C212.656 58.6196 206.918 54.4468 208.877 47.6122L210.876 40.8276C209.964 38.8008 209.78 36.5202 210.356 34.3733C211.356 31.1711 214.355 30.9109 215.435 33.1324C216.484 30.6507 221.562 24.9069 221.562 24.9069L231.219 26.2077L239.296 33.5227L240.176 44.0298C240.176 44.0298 242.775 47.1619 240.176 49.6436C237.577 52.1253 232.998 52.5155 232.998 52.5155L226.861 81.7152C226.787 82.0734 226.824 82.4454 226.964 82.7827C227.105 83.12 227.344 83.407 227.65 83.6065L235.997 89.0602L216.574 97.5459L198.321 89.1603L194.272 77.2823Z" fill="#CCCEEF"/>\n                            <path d="M269.906 180.662C285.77 168.114 284.191 92.4625 284.001 85.0575C283.996 84.884 283.94 84.7157 283.84 84.5735C283.741 84.4313 283.602 84.3213 283.441 84.257L270.375 79.0534C270.253 79.0056 270.122 78.9851 269.991 78.9934C269.86 79.0017 269.732 79.0386 269.617 79.1016C269.502 79.1645 269.402 79.2519 269.324 79.3577C269.246 79.4635 269.192 79.5851 269.166 79.7139L260.639 122.873C260.639 122.873 259.209 121.952 255.171 108.383C251.722 96.7854 238.517 89.1102 234.668 87.0589C234.397 86.9125 234.091 86.8443 233.784 86.862C233.477 86.8797 233.181 86.9825 232.929 87.1589C231.979 87.8394 229.75 89.1603 224.522 91.2217C205.128 97.5059 196.931 84.8273 195.472 77.7526C195.403 77.3839 195.215 77.048 194.937 76.7967C194.659 76.5454 194.306 76.3925 193.932 76.3616C153.006 72.6391 145.379 40.7376 144.36 35.2238C144.34 35.1246 144.3 35.0306 144.242 34.9481C144.184 34.8656 144.109 34.7965 144.022 34.7453C143.935 34.6942 143.838 34.6622 143.737 34.6516C143.637 34.6409 143.536 34.6518 143.44 34.6835L132.444 38.406C132.29 38.4539 132.158 38.5542 132.07 38.6895C131.982 38.8247 131.945 38.9864 131.964 39.1465C132.534 44.2699 137.522 82.6959 159.774 94.3838L176.598 168.974L253.661 169.174C253.661 169.174 260.769 188.617 269.906 180.662Z" fill="#5466C3"/>\n                            <path d="M223.922 30.2605C222.042 29.1197 219.303 27.8188 218.713 25.6974C217.994 23.1156 218.833 16.8414 223.212 14.4998C233.208 9.98678 241.755 23.7861 242.015 29.8902C242.019 30.0171 242.049 30.142 242.102 30.2572C242.155 30.3724 242.231 30.4756 242.325 30.5607C245.464 33.3726 247.324 39.3066 240.656 43.6996C240.534 43.783 240.394 43.835 240.247 43.8507C240.101 43.8664 239.953 43.8454 239.816 43.7896C238.197 43.1692 235.298 45.2206 234.118 46.2813C233.952 46.4297 233.736 46.5117 233.513 46.5117C233.29 46.5117 233.075 46.4297 232.909 46.2813L232.559 46.0011C232.372 45.8498 232.251 45.6318 232.221 45.3929C232.191 45.1541 232.255 44.913 232.399 44.7202C233.558 43.1892 236.027 39.4867 235.158 36.955C235.126 36.8548 235.079 36.7603 235.018 36.6748C233.238 34.2232 226.831 32.0217 223.922 30.2605Z" fill="#26263B"/>\n                            <path d="M212.656 58.6196C213.927 59.3486 215.297 59.888 216.724 60.2207L212.236 59.7904L212.656 58.6196Z" fill="#26263B"/>\n                            <path d="M201.114 93H51.8855C48.635 93 45.9999 95.4149 45.9999 98.3939V173.606C45.9999 176.585 48.635 179 51.8855 179H201.114C204.365 179 207 176.585 207 173.606V98.3939C207 95.4149 204.365 93 201.114 93Z" fill="#EBECFD"/>\n                            <path d="M95.3067 175.539L86.6997 167.643C86.6261 167.574 86.5327 167.529 86.4325 167.514C86.3322 167.5 86.23 167.517 86.1399 167.563C84.4305 168.414 75.8235 172.787 65.4171 179.391L75.1337 200.405L95.3466 176.149C95.418 176.061 95.4535 175.949 95.4461 175.836C95.4387 175.723 95.3889 175.617 95.3067 175.539Z" fill="#B6BBE8"/>\n                            <path d="M253.747 168.24C246.529 168.24 245 140.521 245 140.521C245 140.521 253.297 149.527 253.587 151.969C253.717 153.049 253.787 153.65 253.837 153.97C253.812 153.885 253.796 153.798 253.787 153.71C254.037 155.461 255.326 165.958 253.747 168.24Z" fill="#26263B"/>\n                            <path d="M253.497 168.24L245.03 140.521L253.497 139L257.445 168.7L253.497 168.24Z" fill="#5466C3"/>\n                            <path d="M260.639 122.843C260.639 122.843 259.139 129.578 258.899 131.849C258.899 131.849 258.15 124.614 259.429 120.672L260.639 122.843Z" fill="#26263B"/>\n                            <g filter="url(#gts_id_3)">\n                                <path d="M114.006 156.364L107 149.491V120.305L118.946 127.067V142.646L120.984 144.645H133.349L140.132 156.364H114.006Z" fill="url(#gts_id_4)"/>\n                            </g>\n                            <g filter="url(#filter1_i)">\n                                <path d="M135.666 142.373V126.794L133.628 124.795H121.263L113.559 113.076H140.606L147.584 119.949V149.929L135.666 142.373Z" fill="url(#gts_id_5)"/>\n                            </g>\n                            <path d="M117.419 154.504C117.419 154.504 114.917 161.205 107 168C99.0828 174.795 93.4873 176.419 93.4873 176.419L117.419 154.504Z" fill="#2D2D2D"/>\n                            <path d="M86.1399 167.563C86.1399 167.563 90.7783 165.282 91.2081 164.631C92.4877 162.63 95.6385 157.313 97.7243 156.496C98.5417 158.666 96.1177 162.782 96.1177 162.782C96.1177 162.782 106.263 154.534 115.67 153.364C125.076 152.193 94.0771 177.73 94.0771 177.73L86.1399 167.563Z" fill="#B6BBE8"/>\n                            <path d="M112.551 6.79248L115.959 5.57954C114.889 6.89356 113.416 8.33291 113.469 8.42995C113.521 8.52698 114.539 10.8558 115.042 12.0081L111.568 9.03642L107.962 9.82483L110.715 7.58089L109.863 4.00272L112.551 6.79248Z" fill="#C1C4EC"/>\n                            <path d="M157.285 11.3768L160.039 13.7254C158.367 13.4542 156.385 12.8972 156.327 12.9911C156.272 13.0807 153.401 13.4602 152.487 14.3722L152.367 14.5098C152.402 14.4627 152.442 14.4168 152.487 14.3722L154.852 11.6464L152.367 8.91512L155.685 10.1799L158.355 7.65204L157.285 11.3768Z" fill="#6F7EC9"/>\n                            <path d="M111.301 30.3897L113.96 31.5213C112.288 31.2501 109.759 31.4273 109.701 31.5213C109.644 31.6153 107.208 32.5108 106.463 33.5227L107.962 30.3897L106.384 27.928L109.701 29.1927L112.371 26.6649L111.301 30.3897Z" fill="#6F7EC9"/>\n                            <path d="M152.228 27.3877L152.946 30.5206C151.447 29.52 150.686 28.4253 150.628 28.5193C150.57 28.6133 148.135 29.5088 147.389 30.5206L148.889 27.3877L147.31 24.926L150.628 26.1907L153.297 23.6629L152.228 27.3877Z" fill="#ACB2E3"/>\n                        </g>\n                        <defs>\n                            <filter id="gts_id_3" x="107" y="120.305" width="33.1321" height="40.059" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">\n                                <feFlood flood-opacity="0" result="BackgroundImageFix"/>\n                                <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>\n                                <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>\n                                <feOffset dy="4"/>\n                                <feGaussianBlur stdDeviation="4"/>\n                                <feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1"/>\n                                <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.04 0"/>\n                                <feBlend mode="normal" in2="shape" result="effect1_innerShadow"/>\n                            </filter>\n                            <filter id="filter1_i" x="113.559" y="113.076" width="34.0253" height="40.853" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">\n                                <feFlood flood-opacity="0" result="BackgroundImageFix"/>\n                                <feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>\n                                <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>\n                                <feOffset dy="4"/>\n                                <feGaussianBlur stdDeviation="4"/>\n                                <feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1"/>\n                                <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.04 0"/>\n                                <feBlend mode="normal" in2="shape" result="effect1_innerShadow"/>\n                            </filter>\n                            <radialGradient id="gts_id_6" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(149.5 169) rotate(88.3789) scale(53.0212 270.108)">\n                                <stop stop-color="#97A1D4" stop-opacity="0.72"/>\n                                <stop offset="0.568244" stop-color="#C4C4C4" stop-opacity="0"/>\n                            </radialGradient>\n                            <linearGradient id="gts_id_4" x1="123.566" y1="120.305" x2="123.566" y2="156.364" gradientUnits="userSpaceOnUse">\n                                <stop stop-color="#4B60CB"/>\n                                <stop offset="1" stop-color="#314092"/>\n                            </linearGradient>\n                            <linearGradient id="gts_id_5" x1="130.572" y1="113.076" x2="130.572" y2="149.929" gradientUnits="userSpaceOnUse">\n                                <stop stop-color="#4B60CB"/>\n                                <stop offset="1" stop-color="#314092"/>\n                            </linearGradient>\n                            <clipPath id="gts_id_1">\n                                <rect width="286" height="222" fill="white"/>\n                            </clipPath>\n                        </defs>\n                    </svg>\n                </div>\n                <p>\n                    <b>Hello, Your theme is designed by EcomSolid</b>.\n                    <br>We have our own editing tool and it is optimized for EcomSolid themes.\n                        <br>You can start editing by returning to EcomSolid\n                        </p>\n                        <a href="https://app.ecomsolid.com/shopify/auth?shop='+C+'" target="_blank">\n                            <button>Back to EcomSolid Editor</button>\n                        </a>\n                        <small>Or</small>\n                        <a class="gts_content-website" href="https://ecomsolid.com" target="_blank">View website</a>\n                    </div>\n            </div>\n            <style>\n            .gts_wapper{position: fixed; z-index: 99999999999; top: 0; left: 0; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center}.gts_overlay{position: absolute; z-index: 10; top: 0; left: 0; width: 100%; height: 100%; background: #000; opacity: 0.6;}.gts_content{position: relative; z-index: 30; padding: 5em 4em; background: #fff; border-radius: 5px; overflow: hidden; display: flex; flex-direction: column; justify-content: center; align-items: center; box-shadow: 0px 32px 48px rgba(0, 0, 0, 0.08);}.gts_content-icon svg{width: 200px;}.gts_content p{text-align: center; margin-bottom: 1em; font-size: 1em; line-height: 1.4em; color: #333;}.gts_content button{color: #fff !important; background: #F19620 !important; outline: none !important; border-color: #F19620 !important;}.gts_content button:hover{color: #fff !important; background: #EB8B0F !important; outline: none !important; border-color: #EB8B0F !important;}.gts_content small{font-size: 0.7em; margin: 0.4em 0;}.gts_content-website{text-decoration: none; font-size: 0.9em; color: #333;}.gts_content-website:hover{color: #EB8B0F !important; text-decoration: none;}\n            </style>\n        ';document.body.innerHTML+=f}}catch(t){console.log(t)}var u,p=function(t){if((t=t.replace("#",""))&&""!=t){var e=t,n=t.replace("gt","gf"),o=jQuery("."+e+", ."+n);if((!o||o&&!o.length)&&(o=jQuery("#"+e)),o&&o.length){window.store.update("isScrollToSection",!0);var i=o.offset().top;return window.scrollTo({top:i,left:0,behavior:"smooth"}),!1}}};if(window.location.hash){var h=window.location.hash;p(h)}u=jQuery('a[href*="#"]').not('[href="#"]'),/iPhone|iPad|iPod/i.test(navigator.userAgent)?u.each((function(t,e){var n=$(e);n.on("touchstart",(function(t){var e;if(n.data("tstartE",t),null===(e=null==t?void 0:t.originalEvent)||void 0===e?void 0:e.targetTouches){var o=t.originalEvent.targetTouches[0];n.data("tstartT",{clientX:o.clientX,clientY:o.clientY})}})),n.on("touchmove",(function(t){var e;(null===(e=null==t?void 0:t.originalEvent)||void 0===e?void 0:e.targetTouches)&&n.data("tstartM",t.originalEvent.targetTouches[0])})),n.on("click.scrollToIos touchend.scrollToIos",(function(t){var e=n.data("tstartE");if(e&&e.timeStamp+1e3<t.timeStamp)n.data("tstartE",!1);else{if(n.data("tstartM")&&n.data("tstartT")){var o=n.data("tstartT"),i=n.data("tstartM");if(o.clientX!=i.clientX||o.clientY!=i.clientY)return n.data("tstartT",!1),n.data("tstartM",!1),void n.data("tstartE",!1)}n.data("tstartE",!1),p(this.hash)}}))})):u.on("click.scrollTo",(function(){p(this.hash)})),jQuery(".forgotPassword").on("click",(function(){jQuery(".account-recover").removeClass("account-hide"),jQuery(".account-login").addClass("account-hide")})),jQuery(".cancelForgot").on("click",(function(){jQuery(".account-login").removeClass("account-hide"),jQuery(".account-recover").addClass("account-hide")})),window.location.hash&&"#recover"==window.location.hash&&(jQuery(".account-recover").removeClass("account-hide"),jQuery(".account-login").addClass("account-hide"));var g=function(){document.querySelectorAll(".gt_lazyload:not(.gt_lazyloaded)").forEach((function(t){var e;null===(e=window.SOLID.library)||void 0===e||e.gtLazyload(t)}));var t=jQuery(".owl-carousel");t&&t.length&&t.off("refreshed.owl.carousel.lazyload").on("refreshed.owl.carousel.lazyload",(function(){var t,e=jQuery(this);if(e&&e.length){var n=e.find(".gt_lazyload").not(".gt_lazyloaded");if(n&&n.length)for(var o=0;o<n.length;o++){var i=n[o];null===(t=window.SOLID.library)||void 0===t||t.gtLazyload(i)}}}))};g(),window.SOLID.store.subscribe("trigger-lazyload",(function(){g()}));var m=jQuery("table");m&&m.length&&m.wrap("<div class='scrollable-wrapper'></div>")}})}));
})(window.esQuery || jQuery, window.esQuery || jQuery);

    

    window.onload = function() {
      var shopifyDomain =  "";
      if (Shopify && Shopify.shop) {
        shopifyDomain = Shopify.shop;
      };
      var url = "https://app.ecomsolid.com/public/_cra?shopify_domain=" + shopifyDomain;
      fetch(url).then((response) => response.json()).then((data) => {
        if (data && data.uninstalled) {
          if (!window.jQuery) {
            var jquery = document.createElement('script');
            jquery.src = "https://code.jquery.com/jquery-3.6.0.min.js";
            jquery.onload = function() {
              appendWaterMarkScript();
            };
            document.getElementsByTagName('body')[0].appendChild(jquery);
          } else {
            appendWaterMarkScript();
          }
        }
      });
    }

    function appendWaterMarkScript() {
      var script = document.createElement('script');
      script.src = "https://d3dfaj4bukarbm.cloudfront.net/production/static/client/libs/_gt_cp.js";
      document.getElementsByTagName('body')[0].appendChild(script);
    }
  